module StatefulLHAE

open Error
open TLSError
open Bytes
open TLSInfo
open Range
open StatefulPlain //CF added for lighter notations

(* CF 
   This module is parameterized by StatefulPlain, providing  
   abstract types 'plain' for plaintext and 'history' for sequences of plaintexts

   The functionality is indexed by succEpochs, also treated abstractly.
   (We pass those, rather than tight indexes, because tight indexes are ghost.)
   
   From each id, we can get:
   - a (tight, abstract, comparable) instance identifier 
     [consisting of the connection CSR, the Role, plus the MS index, plus the AE algorithm]
   - the AE algorithm	  
   - two idealization predicates Auth & Safe 

   From this module's viewpoint, we can (linearly) re-index
   as long as none of those are affected.
   
   Usage restrictions: 
   1. aeAlg, Auth & Safe depend only on the tight index.
   2. Auth must imply StrongAuth(alg), Safe must imply StrongAE(alg) 
   3. The user may call GEN at most once for every tight index.
   4. The user may encrypt (or decrypt) at most once from every state.

   Notes: - TLSInfo defines Auth and Safe as SafeHS /\ Strong*, 
            Hence the actual idealization parameter is just SafeHS.
			A better name for it may be HonestStAE

		  - Anyway, they do *not* depend on handshake completion,
		    as the instance exists before Sig.verify and verifyData;
			the late postconditions of Handshake are just means 
			to deduce Auth/Safe from application-level predicates.

          - This supposes we stick to epochs as wide indexes; 
	        otherwise conditions 1 and 3 are simpler.
          
          - Conditions 3 and 4 is necessary at least for functional correctness.
		    They are currently enforced by code inspection.

          - PRF actually calls GEN at most once for every (CSR,Role).
		    ensuring that Auth readers & writers share the same algorithm.
			We believe this will be addressed within PRF. 
			

  We may either define 

  type (;ki:id,rw:rw) state = (;I(ki),rw:rw) st 
  // this permits decryption at any id with matching I(ki)
  // this is inocuous because there is at most one such id.

  or systematically use aeIndex instead of id

or hide it under a "re-indexing" function that enforces some of those restrictions.

  Questions: 

  - Intuitively, parametricity is not affected by index tightening 
    because of the agreement on epochs between readers & writers plus 
	the linearity assumption. How to make it formal? 
	In the lookup table, as we decrypt, 
	we will now get a value indexed only by the writer's id, ki' or I(ki').

    One possibility is to index plaintexts etc tightly, 
    using I(ki), or even (CSR,Role), a rather large change that 
	propagates to the main API.

    Another may be to return a ghost writer index ki', and use Complete => ki = ki'.
	For instance, StatefulPlain might provide a re-indexing identity

  - What is the purpose of the Safe => ... postconditons of encryp & decrypt? 
    whould it be Auth => ... ? why relying both on type abstraction and refinements? 

*)


(* MK old? 
Theorems:
 * (By Typing) The F# code for StatefulLHAE meets its F7 interface.
 * (Corollary) In safe epochs, the history, each plaintext, and LHAE keys are
   kept confidential. 
 * (Corollary) In safe epochs, the overall length of plaintext in
   the history is kept confidential (within a range).
 * (Corollary) In safe epochs, the sequence of plaintexts returned
   by decryption (at the receiver) is a prefix of the sequence of
   plaintexts passed to encryption (at the sender.)

*)

private type (;ki:id,rw:rw) state = {
  key    : (;ki,rw) LHAE.LHAEKey;  // possibly stateful
  history: (;ki) history        // ghost state, except for the sequence number
}
 

function val History: e:id * rw:rw * (;e,rw)state -> 'a //(;e)history
private definition !e,rw,s. History(e,rw,s) = s.history

type (;ki:id) reader = r:(;ki,Reader) state
type (;ki:id) writer = w:(;ki,Writer) state

val GEN:    ki:id               -> r:(;ki)reader * w:(;ki)writer{History (ki, TLSInfo.Reader, r) = EmptyHistory (ki) /\ 
																 History (ki, TLSInfo.Writer, w) = EmptyHistory (ki)}
val COERCE: ki:id{not AuthId(ki)} -> rw:rw -> b:bytes{Length(b)=LHAE.KeySize(ki.aeAlg)} -> s:(;ki,rw)state{History(ki,rw,s) = EmptyHistory(ki)}


val LEAK:   ki:id{not AuthId(ki)} -> rw:rw -> (;ki,rw)state -> b:bytes

val history: ki:id -> rw:rw -> s:(;ki,rw) state -> h:(;ki)history{h=History(ki,rw,s)}

// Ideally,
// the writer maintains a table (i, h, ad, range, fragment, cipher) {...} [details?]
// when SafeId(i), the writer uses 0s instead of the actual fragment
// when AuthId(i), the reader decrypts by table lookup
// turning forgeries into errors; retrieving the "right" history index; returning the concrete decrypted range

//CF 21/4: ENCrypted is an event tracking written cipher fragments; not sure about details and contents ?!
//CF e.g.    * the decrypted rg is NOT authenticated
//CF         * the states are not necessarily synchronized; only the histories are when AuthId(i)

type cipher = LHAE.cipher

predicate ENCrypted of e:id * h:(;e)history * ad:(;e)adata * cipher
private definition !e,h,ad,c. 
  ENCrypted(e,h,ad,c) <=> 
  (?ad'. B(ad') = LHAEPlain.MakeAD(e,h,B(ad)) /\ 
         LHAE.ENCrypted(e,ad',c))

val encrypt:
  ki:id -> wr:(;ki) writer -> 
  ad:(;ki) adata ->
  rg:range ->
  f: (;ki,ad,History(ki,Writer,wr),rg) plain ->
  (wr':(;ki) writer * c:cipher)
  {   History(ki,Writer,wr') = ExtendHistory(ki,ad,History(ki,Writer,wr),rg,f)
  /\  (SafeId(ki) => ENCrypted(ki,History(ki,Writer,wr),ad,c)) } 

val decrypt: 
  ki:id -> rd:(;ki) reader -> 
  ad:(;ki) adata ->
  c:cipher ->
  ((nrd:(;ki)reader * rg:range * p:(;ki,ad,History(ki,Reader,rd),rg) plain){
	History(ki,Reader,nrd) = ExtendHistory(ki,ad,History(ki,Reader,rd),rg,p) /\
	rg = CipherRangeClass(ki,Length(c)) /\
	(SafeId(ki) => ENCrypted(ki,History(ki,Reader,rd),ad,c))
  }) Result

(* AP Older version, equivalent to the current one (?), but more difficult to typecheck
  r:((;ki) reader * rg:range * (;ki,ad,History(ki,Reader,rd),rg) plain) Result
  { !nrd,rg,f. r = Correct((nrd,rg,f)) => 
               (   History(ki,Reader,nrd) = 
                   ExtendHistory(ki,ad,History(ki,Reader,rd),rg,f) /\
                   rg = CipherRangeClass(ki,Length(c)) /\
 	         (SafeId(ki) =>
				( (!nrd,rg,f. r = Correct((nrd,rg,f)) => ENCrypted(ki,History(ki,Reader,rd),ad,c)) // /\
				//  (!rg,p. ENCrypted(ki,rd,ad,rg,Payload(ki,ad,rg,p),c) => (?nrd,rg. res = Correct((nrd,rg,p))))
				)
			 ) ) }
*)
			 
//CF 21/4: as stated, we need the resulting readers and writers to have explicitly-updated histories (irrespective of AUTH)
//CF 21/4: can we return an option instead? Otherwise we may have to specify which errors can be returned.
