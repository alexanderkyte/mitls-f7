module LHAE

(* Implements Length-Hiding Authenticated Encryption
   for all "aeAlg" constructions: MtE, MacOnly, GCM;
   used by StatefulLHAE, parameterized by LHAEPlain. *)

open Bytes
open Error
open TLSError
open TLSInfo
open Range

open TLSConstants

type cipher = b:bytes{Length(b) <= max_TLSCipher_fragment_length}
(* no need to be more precise on the length *)

private type (;i:id,rw:rw) LHAEKey =
    | MtEK of ka:(;i)MAC.key * ke:(;i,rw)ENC.state
    | MACOnlyK of (;i)MAC.key
    | GCM of (;i,rw)AEAD_GCM.state

type (;i:id)encryptor = (;i,Writer)LHAEKey
type (;i:id)decryptor = (;i,Reader)LHAEKey

function val KeyDerivationIVSize: aeAlg -> nat
definition !mac.     KeyDerivationIVSize(MACOnly(mac))            = 0
definition !mac.     KeyDerivationIVSize(MtE(Stream_RC4_128,mac)) = 0
definition !enc,mac. KeyDerivationIVSize(MtE(CBC_Fresh(enc),mac)) = 0
definition !enc,mac. KeyDerivationIVSize(MtE(CBC_Stale(enc),mac)) = BlockSize(enc)
assume !a. KeyDerivationIVSize(a) >= 0

function val KeySize: a:aeAlg -> nat
definition !mac.     KeySize(MACOnly(mac))  = MacKeySize(mac) 
definition !enc,mac. KeySize(MtE(enc,mac))  = MacKeySize(mac) + EncKeySize(enc) + KeyDerivationIVSize(MtE(enc,mac))
definition !enc,prf. KeySize(AEAD(enc,prf)) = AEADKeySize(enc) + AEADIVSize(enc)

//CF not clearly useful MK helps typechecking LHAE.encrypt'
ask !i,mac.     i.aeAlg = MACOnly(mac) => KeySize(i.aeAlg) = MacKeySize(mac)
//MK strangely the following isn't needed for that
//MK ask !i,mac,enc. i.aeAlg = MtE(enc,mac) => KeySize(i.aeAlg) = MacKeySize(mac) + EncKeySize(enc) + KeyDerivationIVSize(MtE(enc,mac))

val GEN:    i:id     -> (;i)encryptor * (;i)decryptor
val COERCE: i:id{not AuthId(i)} -> rw:rw -> b:bytes{Length(b) = KeySize(i.aeAlg)} -> (;i,rw)LHAEKey
val LEAK:   i:id{not AuthId(i)} -> rw:rw -> (;i,rw)LHAEKey -> b:bytes
 
private val mteKey: i:id -> rw:rw -> (;i) MAC.key -> (;i,rw) ENC.state -> (;i,rw) LHAEKey
private val gcmKey: i:id -> rw:rw -> (;i,rw) AEAD_GCM.state -> (;i,rw)LHAEKey

// We have two variants for encryption and decryption: 
// the first (primed) is concrete; the second is idealized at safe indexes,
// using either #ideal_F (filtering out non-cipher) or #ideal (decrypting just by lookup)

predicate ENCrypted of e:id * ad:(;e)LHAEPlain.adata * cipher

private definition !e,enc,mac,ad,c.
  e.aeAlg = MtE(enc,mac)   => (ENCrypted(e,ad,c) <=> ?p. ENC.ENCrypted(e,ad,c,p)) 
private definition !e,aenc,mac,ad,c.
  e.aeAlg = AEAD(aenc,mac) => (ENCrypted(e,ad,c) <=> ?p. AEAD_GCM.ENCrypted(e,ad,c,p)) 

//CF 14-07-16 usage?
ask !e,enc,mac,ad,c.
  e.aeAlg = MtE(enc,mac) /\ ( SafeId(e) => ENCrypted(e,ad,c)) =>
  (SafeId(e) => (?p. ENC.ENCrypted(e,ad,c,p)))

ask !e,enc,mac,ad,c,p.
  e.aeAlg = MtE(enc,mac) /\ ( SafeId(e) => ENC.ENCrypted(e,ad,c,p) ) =>
  (SafeId(e) => ENCrypted(e,ad,c))

private val encrypt': i:id -> (;i) encryptor -> ad:(;i)LHAEPlain.adata ->
  rg:range -> p:(;i,ad,rg) LHAEPlain.plain ->
  ((;i) encryptor * c:cipher){Length(c) = TargetLength(i,rg) /\         
                             (SafeId(i) => ENCrypted(i,ad,c))}

val encrypt : i:id -> (;i) encryptor -> ad:(;i)LHAEPlain.adata ->
  rg:range -> p:(;i,ad,rg) LHAEPlain.plain ->
  ((;i) encryptor * c:cipher){Length(c) = TargetLength(i,rg) /\
                             (SafeId(i) => ENCrypted(i,ad,c))}

type entry = 
  i:id * ad:(;i) LHAEPlain.adata * rg:range * 
  p:(;i,ad,rg) LHAEPlain.plain * c:ENC.cipher {ENCrypted(i,ad,c)} 
private val log: entry list ref
private val cmem: i:id -> ad:(;i)LHAEPlain.adata -> c:cipher ->  
  entry list -> res:(r:range * (;i,ad,r)LHAEPlain.plain) option { 
    ( !rg,p. res = Some ((rg,p)) => (ENCrypted(i,ad,c) /\ rg = CipherRangeClass(i,Length(c))) ) /\
	( res = None => not ENCrypted(i,ad,c) )}
//CF 14-07-17 we effectively assume this non-trivial postcondition; TODO.

(*CF
theorem !i,d,rg0,p0,rg1,p1,c. (ENCrypted(i,d,rg0,p0,c) /\ ENCrypted(i,d,rg1,p1,c)) => p0 = p1
*)

private val decrypt': i:id -> k:(;i) decryptor -> ad:(;i)LHAEPlain.adata ->
  c:cipher{SafeId(i) => ENCrypted(i,ad,c)} -> res: 
  ( ( 
    (;i) decryptor *  
    rg:range * 
    p:(;i,ad,rg) LHAEPlain.plain) {rg = CipherRangeClass(i,Length(c))} ) Result

(* TODO MK seems outdated: partial functional correctness when decrypting what we encrypted  
  { 
   !pl,p,tag,rg.
	(    Length(c) = EncryptedLength(i,rg)
	  /\ MACed(e,ad,pl,tag) 
     /\ Encoded(e,ad,pl,tag,p) 
     /\ ENCrypted(e,Length(c),StateID(e,Encryptor(k)),c,p)  
   => ?k',r'. res = Correct((k',r',pl)) } 
*)

val decrypt: i:id -> (;i) decryptor -> ad:(;i)LHAEPlain.adata ->
  c:cipher -> res: 
  ( ((;i) decryptor *  rg:range * (;i,ad,rg) LHAEPlain.plain)
     {rg = CipherRangeClass(i,Length(c))}
  ) Result
   {
    (SafeId(i) => 
        (   (!k,r,p. res = Correct((k,r,p)) => ENCrypted(i,ad,c)) 
	 /\ (ENCrypted(i,ad,c) => (?p,k,r'. res = Correct((k,r',p))))
		))}
// The last two lines are equivalent to (but easier to verify than)
// !p. ENC.ENCrypted(i,ad,c,p) <=> (?k,r. res = Correct((k,r,p)))




(* CF 13-01-07 verification notes

We need a full independent spec of StrongAEId & StrongAuthId
something like the functions below and the corresponding logical specs.

let strongAEId pv cs = match cs with
  | NullCipherSuite | SCSV of _ | OnlyMACCipherSuite(_,_) -> false 
  | CipherSuite(_,ea) ->
      match ea with 
	    | MtE(eAlg, hAlg) -> int_cma pv hAlg && 
		                     ind_cpa pv eAlg && 
							 int_ctxt pv hAlg eAlg 
		| AEAD (_,_)      -> false // until we handle GCM 

let strongAuthId pv cs = match cs with
  | NullCipherSuite | SCSV of _ -> false 
  | OnlyMACCipherSuite(_,hAlg)  -> int_cma hAlg 
  | CipherSuite(_,ea) -> 
      match ea with 
	    | MtE(eAlg, hAlg) -> int_cma pv hAlg  
		| AEAD (_,_)      -> false // until we handle GCM 
 
and the corresponding logical specs such that, e.g.,

ask !i. StrongAEId(i) => StrongAuthId(i)
ask INT_CTXT(pv,h,e) => 
     pv = TLS_1p2 
  \/ ?kex,hAlg. e = CipherSuite(kex,MtE(_,hAlg) && ... 

(Note that we actually don't need full CMA when we have INT-CTXT, but this is practically irrelevant.)  

There are several ideal properties of AEAD:

1. (When SafeId:) filter out any cipher that is not an honest encryption---a.k.a "INT-CTXT" 
                implemented by #ideal_F in AEAD.fs

2. (When SafeId:) additionally decrypt by table lookup---so that we can get plain secrecy by typing 
                implemented by #ideal in AEAD.fs

3. (When Auth:) filter out any (i,plain,AD) forgery---aka "INT-PTXT" or "CMA"
                implemented by #ideal in MAC.fs

For F7 clarity, we distinguish several verification steps (using flags/Makefile):

1. (When SafeId, decryption correctness:) decryptions of honest ciphers always succeed, returning the plaintext
   Together with INT-CTXT & our "at most one encryption per AD" assumption, this justifies moving from 1 to 2.
   We might also explain it with a "Decryption error oracle". 

2. If we decrypt by table lookup, then, we implement parametric AEAD (to complete the SafeId proof)
   this essentially relies on CPA of the underlying encryption.

3. (When AuthId, irrespective of SafeId & INT-CTXT:) AEAD is PTXT wrt to some user-defined Msg property.

We agreed that #if ideal refers to typechecking 2. 

The postcondition of decryption thus consists of

// proved in step 3, sufficient to retrieve Msg(i,ad,p) as a predicate attached to the INT-CTXT log
(AuthId(i) => ((!p. (?r. res = Correct(i,r,p)) 
               <=> ( ?c. INT-CTXT(i,ad,p,c))))
/\
// a stronger "SafeId" authentication property, which also yields Msg(i,ad,p)
(SafeId(i) => ((!p. ( ?r. res = Correct(i,r,p)) 
		       <=> ( INT-CTXT(i,ad,p,c)))           
/\
// a functional property
(SafeId(i) => ?p. res = Correct((i,Range(i,c),p))) \/ res = Error(AD_bad_record_mac,"")

--- The sequence of games is 

* indistinguishability of filtering out bad ciphers at safe indexes (by INT-CTXT assumption) 
  The joint INT-CTXT assumption still has to be proved "by hand" for now, 
  although the functional property above helps.

* indistinguishability of decryption by lookup at safe indexes
  (by typechecking a full spec for the two variants when the lookup succeeds)

* secrecy by typing (CPA), relying on nested plains.
  for that step, we need to encapsulate Encode & Mac encryption processing into DataStream; 

  the current, specific approach is to idealize repr as max-sized-zero at safe indexes
  within encode (by ENC-CPA parametricity) then typecheck parametricy over delta.  

  a generic pattern would be (up to indexing)
  
  abstract_repr: delta -> high_bytes (within a range)
  abstract_map: (bytes -> bytes) -> high_bytes -> high_bytes (within computed range)

  
(independently:)

* CMA for Auth but not SafeId.   

*)

(* CF 12-04-09 discussion points: 
//
// plaintext integrity follows from abstraction:
// - a precondition for coercing to  (;i,rg,ad) plain is that i is un-AuthId
// - a precondition for leaking from (;i,rg,ad) plain is that i is un-SafeId
//
// additionally, the decryption refinement guarantees 
// functional correctness & ciphertext integrity
// 
// INT-CTXT(i,ad,p,c) is a runtime event recorded by encrypt, stating
// "c is a correct encryption for i, ad, some rg, and p 
//
// the range for encryption is not recorded in INT-CTXT,
// (as indeed only the secret length is authenticated, not the range).
//
// our interface is compatible with state for the underlying encryption
// (but does not rely on it); this is convenient for RC4, for IVs in old TLS
//
// how do we deal with corrupted peers? 
// why do we have two cases? I propose instead:
//
// AuthId(i) => 
// ( !p. res = Correct(CipherRange(i,c),p) <=> INT-CTXT(i,ad,p,c) )
//
// We are still in-between encryptor/decryptor and keys, why? 
// Are TLS 1.0 IVs now part of the mutable key? 
// Note that CipherRange depends on the TLS version too.
*)
