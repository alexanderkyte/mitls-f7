module AEADPlain
open DataStream
open StatefulPlain
type additionalData = b:bytes{Length(b) >= 8}
function val Seqn: additionalData -> int
function val Rest: additionalData -> bytes
assume !n,rest. Seqn(IntBytes(8,n) @| rest) = n
assume !n,rest. Rest(IntBytes(8,n) @| rest) = rest

type (;ki:KeyInfo,r:range,ad:additionalData) plain = 
    {p : (s:(;ki)state * (;ki,s,Rest(ad),r) fragment)}

val plain: ki:KeyInfo -> r:range  -> ad:additionalData -> bytes -> (;ki,ad,r) plain
val repr:  ki:KeyInfo -> r:range -> ad:additionalData -> (;ki,ad,r) plain -> bytes
val fragmentToPlain: ki:KeyInfo ->  s:(;ki) state -> ad:additionalData -> r:range -> d:(;ki,s,ad,r) fragment -> (;ki,r,ad) plain
val plainToFragment: ki:KeyInfo ->  s:(;ki) state -> ad:additionalData -> r:range -> (;ki,r,ad) plain -> d:(;ki,s,ad,r) fragment
