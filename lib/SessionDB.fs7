module SessionDB

(* Database storing live sessions towards resumption;
   We verify a simplified in-memory database with the same contents,
   but we trust its System.Data.SQLite implementation *)

open Bytes
open Date
open TLSInfo

predicate Authorize of Role * SessionInfo

type (;sid:sessionID, r:Role) StorableSession = si:SessionInfo * (;si) PRF.masterSecret * cVerifyData * sVerifyData
       { si.sessionID = sid /\ Authorize(r,si) }

type SessionIndex = sessionID * Role * Cert.hint
type entry = sid:sessionID * r:Role *  Cert.hint * (;sid,r) StorableSession 
type t = entry list 

val create: config -> t
val select: t -> sid:sessionID -> r:Role -> Cert.hint -> (;sid,r) StorableSession option 
val insert: t -> sid:sessionID -> r:Role -> Cert.hint -> (;sid,r) StorableSession -> t
val remove: t -> sid:sessionID -> r:Role -> Cert.hint -> t

// Useful for the user of miTLS
val getAllStoredIDs: t -> SessionIndex list
