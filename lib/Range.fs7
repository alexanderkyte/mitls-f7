module Range

(* This modules defines the range computations for length-hiding *) 

open Bytes
open TLSConstants
open TLSInfo
open TLSExtensions

type range = low:nat * high:nat { low <= high }
type (;r:range) rbytes = b:bytes { ?l,h. r = (l,h) /\ l <= Length(b) /\ Length(b) <= h }   
function val Sum: range * range -> range
definition !l0,h0,l1,h1. Sum((l0,h0),(l1,h1)) = (l0+l1,h0+h1)
val sum: r0:range -> r1:range -> r:range{r = Sum(r0,r1)}

predicate SubRange of range * range
definition !l0,l1,h0,h1. SubRange((l0,h0),(l1,h1)) <=> l1 <= l0 && h0 <= h1

function val RangeClass: id * range -> range
function val TargetLength: id * range -> nat
function val CipherRangeClass: id * nat -> range

definition !e,r. RangeClass(e,r) = CipherRangeClass(e,TargetLength(e,r))
theorem !e,t,rg.  rg = CipherRangeClass(e,t) => t = TargetLength(e,rg)
theorem !e,r. SubRange(r,RangeClass(e,r))

function val IVSize: id -> nat
definition 
	(!i,mac.     i.aeAlg = MACOnly(mac)            => IVSize(i) = 0) /\
	(!i,mac.     i.aeAlg = MtE(Stream_RC4_128,mac) => IVSize(i) = 0 ) /\ 
	(!i,mac,alg. i.aeAlg = MtE(CBC_Stale(alg),mac) => IVSize(i) = 0 ) /\ 
	(!i,mac,alg. i.aeAlg = MtE(CBC_Fresh(alg),mac) => IVSize(i) = BlockSize(alg)) /\
	(!i,aealg,macalg. i.aeAlg = AEAD(aealg,macalg) => IVSize(i) = 0)

ask !i. (?mac. i.aeAlg = MACOnly(mac) \/ i.aeAlg = MtE(Stream_RC4_128,mac)) => IVSize(i) = 0

val ivSize: e:id -> l:nat{l=IVSize(e)}

function val FixedPadSize: id * unit -> nat
private definition
	(* AP: for LH
	(HasExtendedPadding(i) => FixedPadSize(i,())=2) /\
    (not HasExtendedPadding(i) => 
	*)
		( (!i,mac. i.aeAlg = MACOnly(mac)  => FixedPadSize(i,())=0 ) /\
		  (!i,aeAlg,mac. i.aeAlg = AEAD(aeAlg,mac) => FixedPadSize(i,())=0 ) /\
		  (!i,mac. i.aeAlg = MtE(Stream_RC4_128,mac) => FixedPadSize(i,())=0 ) /\
		  (!i,alg,mac. i.aeAlg = MtE(CBC_Stale(alg),mac) => FixedPadSize(i,())=1 ) /\
		  (!i,alg,mac. i.aeAlg = MtE(CBC_Fresh(alg),mac) => FixedPadSize(i,())=1 )		
		)
	(* AP: for LH
	)
	*)
val fixedPadSize: id:id -> l:nat{l=FixedPadSize(id,())}

function val MaxPadSize: i:id * unit -> nat //TODO MK fix spec
private definition
	(* AP: for LH
    (	not HasExtendedPadding(i) =>
	*)
		(
		(!i,mac. i.aeAlg = MACOnly(mac) 	        => MaxPadSize(i,()) = 0)  /\
		(!i,aeAlg,mac. i.aeAlg = AEAD(aeAlg,mac)	=> MaxPadSize(i,()) = 0)  /\
		(!i,mac. i.aeAlg = MtE(Stream_RC4_128,mac) 	=> MaxPadSize(i,()) = 0 ) /\
		(!i,alg,mac. i.aeAlg = MtE(CBC_Fresh(alg),mac)
			/\ (PvOfId(i) = TLS_1p0 \/ PvOfId(i) = TLS_1p1 \/ PvOfId(i) = TLS_1p2) 
											=> MaxPadSize(i,()) = 255) /\
		(!i,alg,mac. i.aeAlg = MtE(CBC_Stale(alg),mac)
			/\ (PvOfId(i) = TLS_1p0 \/ PvOfId(i) = TLS_1p1 \/ PvOfId(i) = TLS_1p2) 
											=> MaxPadSize(i,()) = 255) /\
		(!i,alg,mac. i.aeAlg = MtE(CBC_Fresh(alg),mac) /\ PvOfId(i) = SSL_3p0
											=> MaxPadSize(i,()) = BlockSize(alg)) /\
		(!i,alg,mac. i.aeAlg = MtE(CBC_Stale(alg),mac) /\ PvOfId(i) = SSL_3p0
											=> MaxPadSize(i,()) = BlockSize(alg))
		)
	(* AP: for LH
	) /\
	(	HasExtendedPadding(i) =>
		MaxPadSize(i,()) = fragmentLength - 2
	)
	*)

val maxPadSize: i:id -> l:nat{l = MaxPadSize(i,())}

(* A range that can be conveyed in one fragment *)
predicate RangeFragment of id * range
definition !i,l,h. RangeFragment(i,(l,h)) <=>
	h <= fragmentLength
//AP /\ h - l <= MaxPadSize(i,())

// Padding computations
function val Modulus: int * int -> int
//private definition !x,y. Modulus(x,y) = 0
 
function val BlockAlignedPadding: id * nat -> nat
definition
	(!e,mac,l. e.aeAlg = MACOnly(mac)    => BlockAlignedPadding(e,l) = 0 ) /\
	(!e,aeAlg,mac,l. e.aeAlg = AEAD(aeAlg,mac) => BlockAlignedPadding(e,l) = 0 ) /\
	(!e,mac,l. e.aeAlg = MtE(Stream_RC4_128,mac) => BlockAlignedPadding(e,l) = 0 ) /\
	(!e,alg,mac,l. e.aeAlg = MtE(CBC_Fresh(alg),mac) /\ Modulus(l + 1,BlockSize(alg)) = 0 =>  
                                 BlockAlignedPadding(e,l) = 0) /\
	(!e,alg,mac,l. e.aeAlg = MtE(CBC_Stale(alg),mac) /\ Modulus(l + 1,BlockSize(alg)) = 0 =>  
                                 BlockAlignedPadding(e,l) = 0) /\
	(!e,alg,mac,l. e.aeAlg = MtE(CBC_Fresh(alg),mac) /\ Modulus(l + 1,BlockSize(alg)) <> 0 =>  
                                 BlockAlignedPadding(e,l) = BlockSize(alg) - Modulus(l + 1,BlockSize(alg))) /\
	(!e,alg,mac,l. e.aeAlg = MtE(CBC_Stale(alg),mac) /\ Modulus(l + 1,BlockSize(alg)) <> 0 =>  
                                 BlockAlignedPadding(e,l) = BlockSize(alg) - Modulus(l + 1,BlockSize(alg)))



private val blockAlignPadding: e:id -> l:nat -> l':nat{l' = BlockAlignedPadding(e,l)}

val alignedRange: i:id -> rg:range ->
	rg':range{!l,h. rg = (l,h) =>
		rg' = (l,h + BlockAlignedPadding(i,h+MacSize(MacAlg(i)))) }

val extendedPad: id -> range -> nat -> b:bytes //AP: Refine when LH

definition !e,mac,alg,aeAlg,l,h.
	h >= 0 =>
	(
		( (e.aeAlg = MACOnly(mac) \/
		   e.aeAlg = MtE(alg,mac)  ) =>
		TargetLength(e,(l,h)) =
			IVSize(e) + h + MacKeySize(MacAlg(e)) +
			BlockAlignedPadding(e,h + MacKeySize(MacAlg(e))) ) /\
		( e.aeAlg = AEAD(aeAlg,mac) =>
		TargetLength(e,(l,h)) =
			AEADRecordIVSize(aeAlg) + h + AEADTagSize(aeAlg)
		)
	)

ask !e,l,h. h >= 0 => TargetLength(e,(l,h)) >= 0

val targetLength: i:id -> r:range -> 
  tlen:nat {tlen = TargetLength(i,r) /\ tlen <= max_TLSCipher_fragment_length}

(*KB
definition !e,tlen,alg,mac.
	((e.aeAlg = MtE(CBC_Fresh(alg),mac) \/
	  e.aeAlg = MtE(CBC_Stale(alg),mac)) =>
         (!x. x = tlen - IVSize(e) - MacKeySize(MacAlg(e)) - 1 /\ x >= 0 =>
             ((x < 255 => CipherRangeClass(e,tlen) = (0,x)) /\
              (x >= 255 => CipherRangeClass(e,tlen) = (x-255,x))))) /\
	((e.aeAlg = MACOnly(mac) \/
	  e.aeAlg = MtE(Stream_RC4_128,mac)) =>
         (!x. x = tlen - IVSize(e) - MacKeySize(MacAlg(e)) /\ x >= 0 =>
             CipherRangeClass(e,tlen) = (x,x)))
*)

definition 
	(!e,tlen,alg,mac,x. 
           e.aeAlg = MtE(CBC_Fresh(alg),mac) /\ 
            x = tlen - IVSize(e) - MacKeySize(mac) - 1 /\ 
            x >= 0 =>
             ((x < 255 /\ CipherRangeClass(e,tlen) = (0,x)) \/
              (x >= 255 /\ CipherRangeClass(e,tlen) = (x-255,x))))
definition
	(!e,tlen,alg,mac,x. 
		   e.aeAlg = MtE(CBC_Stale(alg),mac) /\
            x = tlen - IVSize(e) - MacKeySize(mac) - 1 /\ 
            x >= 0 =>
             ((x < 255 /\ CipherRangeClass(e,tlen) = (0,x)) \/
              (x >= 255 /\ CipherRangeClass(e,tlen) = (x-255,x))))
definition
	(!e,tlen,mac,x. 
	  e.aeAlg = MACOnly(mac) /\
          x = tlen - MacKeySize(mac) /\ 
          x >= 0 => CipherRangeClass(e,tlen) = (x,x))
definition
	(!e,tlen,mac,x. 
	  e.aeAlg = MtE(Stream_RC4_128,mac) /\
          x = tlen - IVSize(e) - MacKeySize(mac) /\ x >= 0 =>
             CipherRangeClass(e,tlen) = (x,x))
definition
	(!e,tlen,aeAlg,mac,x.
	  e.aeAlg = AEAD(aeAlg,mac) /\
		  x = tlen - AEADRecordIVSize(aeAlg) - AEADTagSize(aeAlg) /\ x >= 0 =>
			 CipherRangeClass(e,tlen) = (x,x))

val minMaxPad: i:id -> l:nat * h:nat{
	(MaxPadSize(i,()) = 0 /\ l = 0 /\ h = 0 ) \/
	 MaxPadSize(i,()) > 0 /\ l = FixedPadSize(i,()) /\ h = MaxPadSize(i,())}

val cipherRangeClass: e:id -> 
  tlen:nat{tlen <= max_TLSCipher_fragment_length} -> 
  r:range {r = CipherRangeClass(e,tlen)}

val rangeClass: e:id -> r0:range -> r1:range{r1 = RangeClass(e,r0)}

//AP type (;e:id)frange = l:nat * h:nat{l<=h /\ TargetLength(e,rg) <= max_TLSCipher_fragment_length
//AP									/\ h-l <= MaxPad(e)}

