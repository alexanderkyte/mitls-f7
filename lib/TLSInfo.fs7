module TLSInfo

open Bytes
open Principal
open CipherSuites

type sessionID = bytes

type preDirection =
    | CtoS
    | StoC
type Direction = d:preDirection{d = CtoS \/ d = StoC}
(* FIXME: Automatic inference by F7 *)

val dualDirection: d1:Direction -> d2:Direction
  {(d1 = CtoS /\ d2 = StoC) \/ (d1 = StoC /\ d2 = CtoS) }

type SessionInfo = {
    clientID: cert option;
    serverID: cert option;
    sessionID: sessionID option;
    protocol_version: ProtocolVersion;
    cipher_suite: cipherSuite;
    compression: Compression;
    init_crand: bytes;
    init_srand: bytes
    }

val null_sessionInfo: ProtocolVersion -> SessionInfo

type KeyInfo = {
    sinfo: SessionInfo;
    dir: Direction;
    crand: bytes;
    srand: bytes;
    (* cVerifyData: bytes
    sVerifyData: bytes *)
    }

val init_KeyInfo: s:SessionInfo -> d:Direction -> k:KeyInfo{k.sinfo = s /\ k.dir = d}
