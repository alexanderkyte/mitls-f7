module Dispatch

open Bytes
open Formats
open Tcp
open Error
open Record
open Handshake
open Alert
open AppData
open TLSInfo
open AppCommon
open TLSFragment
open SessionDB

type predispatchState =
  | Init (* of ProtocolVersion * ProtocolVersion *) (* min and max *)
  | FirstHandshake (* of ProtocolVersion *)             (* set by the ServerHello *) 
  | Finishing
  | Finished (* Only for Writing side, used to avoid sending data on a partially completed handshake *)
  | Open
  | Closing
  | Closed

type dispatchState = d:predispatchState{
	d = Init \/ d = FirstHandshake \/ d = Finishing \/ d = Finished \/
	d = Open \/ d = Closing \/ d = Closed}

type (;ki:KeyInfo) dState = {
    disp: dispatchState;
    conn: (;ki)Record.ConnectionState;
    }

type index =
    { id_in:  KeyInfo;
      id_out: KeyInfo}

type (;id:index) globalState = {
  poptions: protocolOptions;
  (* abstract protocol states for HS/CCS, AL, and AD *)
  handshake: (;id.id_out.sinfo) Handshake.hs_state;
  alert    : (;id.id_out.sinfo) Alert.state;
  appdata  : (;id.id_out.sinfo) AppData.app_state;    

  (* connection state for reading and writing *)
  read  : (;id.id_in)  dState;
  write : (;id.id_out) dState;
  (* The actual socket *)
  ns: NetworkStream;
  }

type Connection = C of (id:index * (;id)globalState)
function val ConnectionIndex: Connection -> index
assume !id,s. ConnectionIndex(C(id,s)) = id
type (;c:Connection) SameConnection = c':Connection{ConnectionIndex(c) = ConnectionIndex(c')}


function val ConnectionOutKeyInfo: Connection -> KeyInfo
assume !id,s. ConnectionOutKeyInfo(C(id,s))= id.id_out
function val ConnectionInKeyInfo: Connection -> KeyInfo
assume !id,s. ConnectionInKeyInfo(C(id,s)) = id.id_in

(*
function val idSIout: (id:index * (;id)globalState) -> SessionInfo
assume !id,s. idSIout(id,s)=id.id_out.sinfo

function val idSIin: (id:index * (;id)globalState) -> SessionInfo
assume !id,s. idSIin(id,s)=id.id_in.sinfo
*)

type writeOutcome =
    | WriteAgain (* Possibly more data to send *)
    | Done (* No more data to send in the current state *)
    | MustRead (* Read until completion of Handshake *)

type deliverOutcome =
    | ReadAgain
    | AppDataDone
    | HSDone
    | Abort

val init: NetworkStream -> Direction -> protocolOptions -> Connection

val resume: NetworkStream -> sessionID -> protocolOptions -> unit Result * Connection

val ask_rehandshake: c:Connection -> protocolOptions -> (;c) SameConnection
val ask_rekey:       c:Connection -> protocolOptions -> (;c) SameConnection
val ask_hs_request:  c:Connection -> protocolOptions -> (;c) SameConnection

val getSessionInfo: c:Connection -> si:SessionInfo{?id. id = ConnectionIndex(c) /\ 
                                                    si = id.id_out.sinfo}

val moveToOpenState: c:Connection ->
	(si:SessionInfo * (;si)PRFs.masterSecret * Direction){?id. id=ConnectionIndex(c) /\ 
                                                               si = id.id_out.sinfo} ->
	(;ConnectionIndex(c))globalState Result

val closeConnection: c:Connection-> (;c) SameConnection

val send: ki:KeyInfo -> NetworkStream -> ss:(;ki)sendState -> tlen:int ->
	ct:ContentType -> f:(;ki,tlen,ct)TLSFragment.fragment ->
	ss':(;ki)sendState Result

val writeOne: c:Connection ->
	(writeOutcome Result) * (;c) SameConnection

val deliver: c:Connection -> ct:ContentType -> tlen:int ->
	(;ConnectionOutKeyInfo(c),ct,tlen)TLSFragment.fragment ->
	(deliverOutcome Result * (;c) SameConnection)

val recv: c:Connection ->
	((;c) SameConnection *
	 ct:ContentType * tlen:int * 
         (;ConnectionInKeyInfo(c),tlen,ct)TLSFragment.fragment) Result

val readOne: c:Connection ->
	deliverOutcome Result * (;c) SameConnection

val writeFromRead: c:Connection ->
	unit Result * (;c) SameConnection

type preReadInvocation =
    | StopAtHS
    | StopAtAppData

type readInvocation = r:preReadInvocation{
	r = StopAtHS \/ r = StopAtAppData}

val read: c:Connection -> readInvocation -> unit Result * (;c) SameConnection

val writeAppData: c:Connection -> unit Result * (;c) SameConnection

(*
val commit: c:(id:index * (;id)globalState) ->
	(;idSIout(FIRST(c),SECND(c)))AppDataPlain.lengths ->
	(;idSIout(FIRST(c),SECND(c)))AppDataPlain.appdata ->
	(id':index * (;id')globalState){FIRST(c)=id'}

val readAppData: c:(id:index * (;id)globalState) ->
	((;idSIin(FIRST(c),SECND(c)))AppDataPlain.appdata Result) *
	((id':index * (;id')globalState){FIRST(c)=id'})
*)
val readHS: c:Connection -> unit Result * (;c) SameConnection
