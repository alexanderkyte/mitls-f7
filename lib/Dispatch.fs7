module Dispatch

open Bytes
open Formats
open Tcp
open Error
open Record
open Handshake
open Alert
open AppData
open TLSInfo
open AppCommon
open TLSFragment
open SessionDB

type predispatchState =
  | Init (* of ProtocolVersion * ProtocolVersion *) (* min and max *)
  | FirstHandshake (* of ProtocolVersion *)             (* set by the ServerHello *) 
  | Finishing
  | Finished (* Only for Writing side, used to avoid sending data on a partially completed handshake *)
  | Open
  | Closing
  | Closed

type dispatchState = d:predispatchState{
	d = Init \/ d = FirstHandshake \/ d = Finishing \/ d = Finished \/
	d = Open \/ d = Closing \/ d = Closed}

type (;ki:KeyInfo) dState = {
    disp: dispatchState;
    conn: (;ki)Record.ConnectionState;
    }

type index =
    { id_in:  KeyInfo;
      id_out: KeyInfo}

type (;id:index) preConnection = {
  poptions: protocolOptions;
  (* abstract protocol states for HS/CCS, AL, and AD *)
  handshake: (;id.id_out.sinfo) Handshake.hs_state;
  alert    : (;id.id_out.sinfo) Alert.state;
  appdata  : (;id.id_out.sinfo) AppData.app_state;    

  (* connection state for reading and writing *)
  read  : (;id.id_in)  dState;
  write : (;id.id_out) dState;

  (* The actual socket *)
  ns: NetworkStream
  }

type Connection = Conn of (id:index * (;id)preConnection)

type writeOutcome =
    | WriteAgain (* Possibly more data to send *)
    | Done (* No more data to send in the current state *)
    | MustRead (* Read until completion of Handshake *)

type deliverOutcome =
    | ReadAgain
    | AppDataDone
    | HSDone
    | Abort

val init: NetworkStream -> Direction -> protocolOptions -> Connection

val resume: NetworkStream -> sessionID -> protocolOptions -> unit Result * Connection

val ask_rehandshake: c1:Connection -> protocolOptions -> c2:Connection{?id,s,s'. c1=(id,s) /\ c2=(id,s')}
val ask_rekey:       c1:Connection -> protocolOptions -> c2:Connection{?id,s,s'. c1=(id,s) /\ c2=(id,s')}
val ask_hs_request:  c1:Connection -> protocolOptions -> c2:Connection{?id,s,s'. c1=(id,s) /\ c2=(id,s')}

val getSessionInfo: Connection -> SessionInfo

val moveToOpenState: id:index -> c:(;id)preConnection -> StorableSession -> (;id)preConnection Result

val closeConnection: c1:Connection -> c2:Connection{?id,s,s'. c1=(id,s) /\ c2=(id,s')}

val send: ki:KeyInfo -> NetworkStream -> ss:(;ki)sendState -> tlen:int ->
	ct:ContentType -> f:(;ki,tlen,ct)TLSFragment.fragment ->
	ss':(;ki)sendState Result

val writeOne: c1:Connection -> (writeOutcome Result) * c2:Connection{?id,s,s'. c1=(id,s) /\ c2=(id,s')}

val deliver: c1:Connection -> ct:ContentType -> tlen:int ->
	(;id,ct,tlen)TLSFragment.fragment ->
	(deliverOutcome Result) * c2:Connection{?s,s'. c1=(id,s) /\ c2=(id,s')}

val writeAppData: Connection -> (unit Result) * Connection
val readAppData: Connection -> ((AppDataPlain.appdata Result) * Connection)
val readHS: Connection -> (unit Result) * Connection
// val appDataAvailable: Connection -> bool

val getSessionInfo: Connection -> SessionInfo

(* Fills the output buffer with the given data.
   Do not send anything on the network yet. *)
val commit: Connection -> AppDataPlain.lengths -> AppDataPlain.appdata -> Connection
// val write_buffer_empty: Connection -> bool