module RSAKeys

// This module defines RSA keys
// but not their use for public-key encryption: see RSAEnc
// (We use two modules to break a circular dependency)

open Bytes

type sk (* secret (decryption) key, abstract *)
type pk (* public (encryption) key, abstract but bytes are accessible *)

type modulus  = bytes
type exponent = bytes

// TODO val honest: pk:pk -> b:bool { b = true <=> Honest(pk) }  

// TODO to be adjusted depending on the compromise model in Cert
val create_rsapkey : modulus * exponent -> pk
val create_rsaskey : modulus * exponent -> sk

// TODO (* Commented out because they depend on core ciphers,
// TODO    and they are never used in ideal TLS crypto *)
// TODO val repr_of_rsapkey : pk -> CoreACiphers.pk
// TODO val repr_of_rsaskey : sk -> CoreACiphers.sk
