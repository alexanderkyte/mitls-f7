module Sessions

open Data
open Stream

type prerole =
    | ClientRole
    | ServerRole

type role = r:prerole{r = ClientRole \/ r = ServerRole}

type sessionID = bytes

type SessionInfo = {
    role: role;
    clientID: string option;
    serverID: string option;
    sessionID: sessionID option;
    null_algs: bool
    }

function type funs =
    | IntOtherRole of role
    | OtherRole of SessionInfo
    | InitSessionInfo of role

predicate type preds =
    | Compromised of SessionInfo
    | NonNullSession of SessionInfo
    | FreshSession of SessionInfo * ContentType
    | Established of send_info:SessionInfo * send_stream:stream * recv_info:SessionInfo * recv_stream:stream

val init_sessionInfo: r:role ->	s:SessionInfo{ s = InitSessionInfo(r) }

val getSessionRole: i:SessionInfo -> r:role{r = i.role}
val getSessionID: i:SessionInfo -> id:sessionID option{id = i.sessionID}

assume IntOtherRole(ClientRole) = ServerRole
assume IntOtherRole(ServerRole) = ClientRole

assume !s. OtherRole(s) = {
	   	role = IntOtherRole(s.role);
		clientID = s.clientID;
		serverID = s.serverID;
		sessionID = s.sessionID;
		null_algs = s.null_algs}

assume !r,d. InitSessionInfo(r) = { role = r;
				    clientID = None;
				    serverID = None;
				    sessionID = None;
				    null_algs = true}

assume !info,cid,sid. NonNullSession(info) <=> (info.clientID = Some(cid) /\ info.sessionID = Some(sid) /\ null_algs = false )

ask !info. NonNullSession(info) => NonNullSession(OtherRole(info))

assume !send_info,send_stream,recv_info,recv_stream. Established(send_info,send_stream,recv_info,recv_stream) <=>
                                ( NonNullSession(send_info) /\ send_info = OtherRole(recv_info) /\ StreamClone(send_stream,recv_stream) )
