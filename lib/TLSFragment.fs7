module TLSFragment

open Bytes
open TLSInfo
open Formats
open CipherSuites
open DataStream

// Plain type for Dispatch
type (;ki:KeyInfo) history = {
  handshake: (;ki) Handshake.stream;
  alert: (;ki) Alert.stream;
  ccs: (;ki) Handshake.stream;
  appdata: (;ki) AppDataStream.stream;
  log: (;ki) fragmentSequence;
}
and (;ki:KeyInfo,ct:ContentType,h:(;ki) history,rg:range) fragment =
    | FHandshake of (;ki,h.handshake,rg)Handshake.fragment    {ct=Formats.Handshake}
    | FCCS       of (;ki,h.ccs,rg)Handshake.ccsFragment {ct=Change_cipher_spec}
    | FAlert     of (;ki,h.alert,rg)Alert.fragment        {ct=Alert}
    | FAppData   of (;ki,h.appdata,rg)AppDataStream.fragment {ct=Application_data}
and (;ki:KeyInfo) fragmentSequence = (ct:ContentType * h:(;ki) history * rg:range * (;ki,ct,h,rg) fragment) list

predicate Multiplexed of KeyInfo * fragmentSequence * Handshake.stream * Handshake.stream * Alert.stream * AppDataStream.stream 
assume !ki,fs,hs,ccs,al,ad. Multiplexed(ki,fs,hs,ccs,al,ad) <=>
  ((fs = [] /\ 
   Handshake.EmptyStream(ki,hs) /\
   Handshake.EmptyStream(ki,ccs) /\
   Alert.EmptyStream(ki,al) /\
   AppDataStream.EmptyStream(ki,ad)) \/
  (?ct,h0,rg,f,t. fs = (ct,h0,rg,f)::t /\
      (?hs'. ct = Formats.Handshake /\
	  Handshake.ConcatStream(ki,hs',f,hs) /\
	  Multiplexed(ki,t,hs',ccs,al,ad)) \/
      (?ccs'. ct = Formats.Change_cipher_spec /\
	  Handshake.ConcatStream(ki,ccs',f,ccs) /\
	  Multiplexed(ki,t,hs,ccs',al,ad)) \/
      (?al'. ct = Formats.Alert /\
	  Alert.ConcatStream(ki,al',f,al) /\
	  Multiplexed(ki,t,hs,ccs,al',ad)) \/
      (?ad'. ct = Formats.Application_data /\
	  AppDataStream.ConcatStream(ki,ad',f,ad) /\
	  Multiplexed(ki,t,hs,ccs,al,ad'))))

type (;ki:KeyInfo) shistory = (h:(;ki) history){Multiplexed(ki,h.log,h.handshake,h.ccs,h.alert,h.appdata)}


predicate Fragment of KeyInfo * range * int * ContentType * bytes

val TLSFragmentRepr: ki:KeyInfo -> ct:ContentType -> h: (;ki) history -> rg:range ->
  (;ki,ct,h,rg)fragment -> bytes

val TLSFragment: ki:KeyInfo -> ct:ContentType -> h: (;ki) history -> rg:range ->
  bytes -> (;ki,ct,h,rg)fragment 

function val ADLength: ProtocolVersion -> int
assume !pv. (pv = SSL_3p0 /\ ADLength(pv) = 9) \/ (pv <> SSL_3p0 /\ ADLength(pv) = 11)

// Additional Data
type (;pv:ProtocolVersion) addData = (b:bytes){Length(b) = ADLength(pv)}

function val ADBytes: (ProtocolVersion * int * ContentType) -> bytes
assume !pv,seqn,ct.
	( pv = SSL_3p0 /\
	  ADBytes(pv,seqn,ct) =
		IntBytes(8,seqn) @| CTBytes(ct) ) \/
	( pv <> SSL_3p0 /\
          ADBytes(pv,seqn,ct) =
		IntBytes(8,seqn) @| (CTBytes(ct) @| VersionBytes(pv)))

ask !pv,seqn,ct. Length(ADBytes(pv,seqn,ct)) = ADLength(pv)

function val ADct: pv:ProtocolVersion * (;pv)addData -> ContentType
assume !pv,seqn,ct. ADct(pv,ADBytes(pv,seqn,ct)) = ct

function val ADseqn: pv:ProtocolVersion * (;pv)addData -> int
assume !pv,seqn,ct. ADseqn(pv,ADBytes(pv,seqn,ct)) = seqn

private val makeAD: pv:ProtocolVersion ->
	seqn:int -> ct:ContentType ->
	  ad: (;pv)addData{ad=ADBytes(pv,seqn,ct)}

private val parseAD: pv:ProtocolVersion -> 
          ad: (;pv)addData -> 
          (seqn:int * ct:ContentType){ad=ADBytes(pv,seqn,ct)}




