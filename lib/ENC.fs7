module ENC

open Bytes
open Plain
open TLSInfo
open Error

(* this interface is trusted *)

// ciphers consist of one or more blocks of bytes.
type cipher = b:bytes{Length(b) <= FragCommon.max_TLSCipher_fragment_length}

predicate ENCrypted of
  (ki:KeyInfo * tlen:int * (;ki) ENCKey.key * (;ki,tlen) plain * cipher)

val ENC: ki:KeyInfo -> k:(;ki) ENCKey.key -> (;ki) ENCKey.iv3 -> tlen:int -> p:(;ki,tlen) plain -> 
  ((;ki) ENCKey.iv3 * c:cipher{ENCrypted(ki,tlen,k,p,c) /\ Length(c)=tlen})

val DEC: ki:KeyInfo -> k:(;ki) ENCKey.key -> (;ki) ENCKey.iv3 -> c:cipher -> 
  ((;ki) ENCKey.iv3 * p:(;ki,Length(c))plain{ENCrypted(ki,Length(c),k,p,c)})
