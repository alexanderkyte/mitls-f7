module PRF

// This module implements the PRFs keyed by master secrets, 
// for two purposes: MACing the verifyData and deriving the connection keys. 
// (CRE independently implements extraction.
// TLS uses the same hash function based techniques for this, 
// i.e. PRFs keyed by pre master secrets.)

// CF We currently perform several successive steps with a single #ideal
// CF - a crypto-agile PRF assumption on kdf + verifyData 
// CF - a lossless "reverse inlining" of StAE.GEN (at consistent CSRs)
// CF - a reduction from PRF to INT-CMA, with a loss due to tag collisions only. 
// CF We may consider splitting this file accordingly. 
// CF but note that we still need an assumption covering all usages of MS.
 
open Bytes
open TLSConstants
open TLSInfo
open StatefulLHAE

// Master secrets are used to derive key materials. 
// Compared with standard (non-tls) key derivation,
// - the label is hardcoded & implicit; 
// - the context/seed, i.e. (crandom @| srandom), is retrieved from the epoch
// MK: we use the concept of seed in very confusing ways. It appears in the RFC, 
// MK: and I propose to continue using it in TLSPRF in the same way. 
// MK: here (crandom @| srandom) is more like a context which guarantees that
// MK: we do not generate the same keys for different sessions.
// MK: in CRE we may indeed use seeds as used in the theory of extractors

type repr = (;48)lbytes

//#begin-abstraction
private type (;i:msId) ms = {bytes: repr}

// This index additionally records the *local* session info.
// CF consider using ms everywhere instead of masterSecret.
type (;si:SessionInfo) masterSecret = (;MsI(si)) ms
//#end-abstraction

// We have a double notion of conditional safety (logically defined in TLSInfo.fs7)
// SafeVD for Finished messages, when the pms is ideal and hashAlg is strong and
// SafeKDF for Key derivation, additionally requiring agreement on committed parameters.

// Ideally, we maintain two logs
// - all authentic Finished messages so far, to filter out forgeries in their "MAC verify". 
// - all safe connection keys generated so far, to share them with the second, matching ideal key derivation.


(** Master secrets are either ideally sampled or concretely derived & coerced **) 

val sample: i:msId -> (;i)ms

//#begin-coerce

//the precondition of coerce excludes both idealizations.

// MK this is checked by the following ask in TLSInfo
// MK   ask !si. not HonestMS(MsI(si)) => not SafeVD(SiId(si)) /\ not SafeKDF(i)
val coerce: i:msId {not HonestMS(i)} -> repr -> (;i)ms 

//#end-coerce


(** Key derivation **) 

//CF to be merged with LHAE? This is just twice LHAE.KeySize_AEAlg
function val KeyExtensionLength: aeAlg -> nat 
definition (!mac.     KeyExtensionLength(MACOnly(mac)) = 2*MacKeySize(mac)) /\
           (!enc,mac. KeyExtensionLength(MtE(enc,mac)) = 2*(EncKeySize(enc) + MacKeySize(mac) +	
                                                            LHAE.KeyDerivationIVSize(MtE(enc,mac))) )

val keyExtensionLength: ae:aeAlg -> n:nat { n=KeyExtensionLength(ae) }

//CF not sure the refinement is right, and why it was not on deriveKeys. Commenting out for now
//MK It's probably right. I removed it from deriveKeys to get more meaningful typechecking errors during debugging.
//MK Was just copied over from keyGen. Should add it back.
type (;rdId:id,wrId:id) derived =  
  ( r:(;rdId) StatefulLHAE.reader * w:(;wrId)StatefulLHAE.writer ) 
  { wrId = Swap(rdId)  /\
    StatefulLHAE.History(rdId,Reader,r) = 
    StatefulPlain.EmptyHistory(rdId) /\
    StatefulLHAE.History(wrId,Writer,w) = 
    StatefulPlain.EmptyHistory(wrId) }

private val deriveRawKeys: 
  i: id -> (;i.msId)ms -> (;LHAE.KeySize(i.aeAlg)) lbytes * (;LHAE.KeySize(i.aeAlg)) lbytes 

private val deriveKeys: 
  rdId:id -> wrId:id { 
    wrId = Swap(rdId) /\ 
    not AuthId(rdId) /\ 
	not AuthId(wrId) (* needed to coerce to StatefulLHAE *) } ->  
  (;rdId.msId)ms -> Role -> (;rdId,wrId) derived 


// USAGE RESTRICTION:
// For each CSR, 
// - the server linearly calls "keyCommit csr a" then "keyGenServer csr a" ...
// - the client linearly calls "keyGenClient csr a" 
// - an ideal state machine (below) keeps track of both, to condition KDF idealization.
// 
// The state machine has an implicit Init state as the csr has not been used yet by any
// honest client or server, and otherwise records its state in a table indexed by csr. 
// Generating a fresh CR or a SR guarantees that we are initially in that state
//
// Note that we use CR @| SR, rather than SR @| CR as in the raw KDF call. 

// Calls to keyCommit and keyGenClient are treated as internal events of PRF. 
// SafeKDF specifically enables us to assume consistent algorithms for StAE.
// (otherwise we would need some custom joint/cross ciphersuite/agile assumptions for StAE)
// 
// predicate val SafeKDF: csr -> bool
// definition SafeKDF(id) <=> HonestMS(id.msId) /\ StrongKDF(id.kdfAlg) /\ 
//                            KeyCommit(id.csrConn,id.pv,id.aeAlg) /\ KeyGenClient(id.csrConn,id.pv,id.aeAlg)  


// See comments in the code as we assume Mismatch to reflect freshness assumptions.
// we may also rely more finely on the log, to define Match 
// more precisely as " KeyCommit ; KeyGenClient " with no KeyGenServer in-between.
type event = Mismatch of id 
private theorem !id. Mismatch(id) => not AuthId(id)

type (;csr: csrands) state =
  | Init
  | Committed of pv:ProtocolVersion * ae:aeAlg { KeyCommit(csr,pv,ae) }
  // The server has committed to using at most this algorithmn with this csr.
  // --------> 
  | Derived of rdId:id * wrId:id * (;rdId,wrId) derived //CF { Match(rdId)} // known, not used here so far
  // the client has ideally derived keys for both roles,
  // with matching algorithm, recording the keys for the server. 
  // --only-->
  //| Done 
  // the server has also derived keys (retrieving those recorded, or generating others).
  // or he may have failed because of an aeAlg mismatch.
  // MK what do you mean with "failed because of aeAlg msmatch?"
  // No action allowed from this point. 
  //
  // In all other cases, we reach a stable state such that we never idealize. 
  // We won't have SafeHS for this csr. 
  //| Wasted


type kdentry = csr:csrands * (;csr) state 
val kdlog : kdentry list ref  
val read: csr:csrands -> kdentry list -> (;csr) state 
val update: csr:csrands -> (;csr) state -> kdentry  list -> kdentry list  

// Ideally, the server commits to using at most 
// an si with pv and aeAlg for keyGen with matching (si.cr,si.sr)
// MK do we really mean si.init_crand and si.init_srand here?
// MK and not epochCSRands? 

// We could enforce commitments by adding a post-condition to keyCommit  
// and a matching pre-condition to the server-side keyGen.

//CF to circumvent F7 limitations.
private val commit:  
  csr:csrands -> pv:ProtocolVersion -> ae:aeAlg { KeyCommit(csr,pv,ae) } -> (;csr) state

//CF no clue why it does not typecheck if we rename x,y to rdId,wrId.
private val wrap:
  x: id -> y: id { y = Swap(x) } -> 
  r:(;y) StatefulLHAE.reader -> w:(;x)StatefulLHAE.writer -> 
  (;y,x) derived   
private val wrap2:
  x: id -> y: id -> (;x,y) derived -> csr:csrands -> (;csr) state

  
val keyCommit: 
  csrConn:csrands -> pv:ProtocolVersion -> ae:aeAlg -> 
  unit { KeyCommit(csrConn,pv,ae) } 

val keyGenClient: 
  rdId: id -> wrId: id { wrId = Swap(rdId) } ->
  (;rdId.msId)ms -> (;rdId,wrId) derived  { KeyGenClient(rdId.csrConn,rdId.pv,rdId.aeAlg) }

val keyGenServer:  
  rdId: id -> wrId: id { wrId = Swap(rdId) } ->
  (;rdId.msId)ms -> (;rdId,wrId) derived


(* CF
 --- summary of our discussion on Apr 29, towards typechecking the HS.

 The following predicate controls StAE idealization
 (relative to StAE's algorithmic strength)
 it is ideally used much before it can be proved as the HS completes.

definition SafeHS(si) <=> !r:Role.
     HonestMS(MsI(si)) /\
     SafeKDF(SiId(id,r) /\ //MK should this include KeyCommit and KeyGenClient?
     SafeVD(si)

 In HS, we have 
  - KeyGenClient(id.csrConn, id.pv, id.aeAlg) for id=Id(e) is a precondition to the event ClientSentCCS(e)
  - KeyCommit(id.csrConn, id.pv, id.aeAlg)    for id=Id(e) is a precondition to the event ServerSentCCS(e)
  - HonestMS /\ StrongVD are sufficient to guarantee 
    matching ClientSentCCS(e) and ServerSentCCS(e), hence getting 
     (1) SafeKDF, and 
     (2) e is the only wide index associated with Id(e)       

    This enables us to prove Complete, roughly as currently defined:
    Complete <=> (HonestPMS /\ StrongHS => SafeHS)
*)



(** VerifyData authenticator in Finished messages **)

// Master secrets are also used to generate and check verifyData tags,
// providing conditional authentication of the (abstract) VerifyData predicate.

// We specify it as we do for MACs,
// whereas we have a stronger PRF assumption.
// TODO reduction from joint MAC & KDF to PRF. 

// Some verbatim handshake message log as text...
// MACed into tags (with a fixed, irrelevant length) 

type text = bytes
type tag = bytes

// Abstract predicate authenticated by the Finished messages.
// (privately defined in Handshake.fs7)
// CF we used to index it by epoch, then by SessionInfo, now by MsI(si) 
predicate VerifyData of msId * Role * text

// role & text are jointly authenticated
type entry = i:msId * r:Role * t:text {VerifyData(i,r,t)}
private val log: entry list ref
private val mem: i:msId -> r:Role -> t:text -> entry list -> b:bool{ b=true => VerifyData(i,r,t) }
//private val cons: si:SessionInfo -> tag -> r:Role -> t:text {VerifyData(si,r,t)} -> entry list -> entry list

private val verifyData: si:SessionInfo -> (;si) masterSecret -> r:Role -> t:text -> tag 

// MACing 
val makeVerifyData: 
  si:SessionInfo -> (;si) masterSecret -> 
  r:Role -> t:text{VerifyData(MsI(si),r,t)} -> 
  tag (* length depends on cs, 12 by default *)

// MAC verifying 
val checkVerifyData: 
  si:SessionInfo -> (;si) masterSecret ->
  r:Role -> t:text -> tag:tag (* the expected value *) ->
  b:bool{(b = true /\ SafeVD(si)) => VerifyData(MsI(si),r,t)} 
  

(** ad hoc SSL3-only function; untrusted. **) 

//CF we need to exclude calls to this function when SafeHS_SI(si)!
val ssl_certificate_verify: 
  si:SessionInfo -> (;si)masterSecret ->
  TLSConstants.sigAlg -> bytes -> bytes





//CF =============================== only comments below

(* CF
// ask from LHAE.fs7 repeated here to help Z3 type real_key_Gen; apparently not needed anymore
private ask !ki,si,enc,mac. 
     TLSConstants.CipherSuiteAuthEncAlg(EpochSI(ki).cipher_suite,EpochSI(ki).protocol_version) = TLSConstants.MACOnly(mac) 
  => LHAE.KeySize(ki) = TLSConstants.MacKeySize(mac)

private ask !cs,pv,mac. 
     CipherSuiteAuthEncAlg(cs,pv) = MACOnly(mac) 
  => KeyExtensionLength(pv,cs) = MacKeySize(mac)+MacKeySize(mac)
private ask !cs,pv,mac. 
     CipherSuiteAuthEncAlg(cs,pv) = MACOnly(mac) 
  => LHAE.KeySize_AEAlg(MACOnly(mac)) = TLSConstants.MacKeySize(mac)
private ask !ki,mac. 
     CipherSuiteAuthEncAlg(EpochSI(ki).cipher_suite,EpochSI(ki).protocol_version) = MACOnly(mac) 
  => LHAE.KeySize(ki) = TLSConstants.MacKeySize(mac)
*)
