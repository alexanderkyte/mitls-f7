module Range

(* This modules defines the range computations for length-hiding *) 

open Bytes
open TLSInfo
open TLSConstants

type range = low:nat * high:nat { low <= high }
type (;r:range) rbytes = b:bytes { ?l,h. r = (l,h) /\ l <= Length(b) /\ Length(b) <= h }   
function val Sum: range * range -> range
definition !l0,h0,l1,h1. Sum((l0,h0),(l1,h1)) = (l0+l1,h0+h1)
val rangeSum: r0:range -> r1:range -> r:range{r = Sum(r0,r1)}

predicate SubRange of range * range
definition !l0,l1,h0,h1. SubRange((l0,h0),(l1,h1)) <=> l1 <= l0 && h0 <= h1

function val RangeClass: epoch * range -> range
function val TargetLength: epoch * range -> nat
function val CipherRangeClass: epoch * nat -> range

definition !e,r. RangeClass(e,r) = CipherRangeClass(e,TargetLength(e,r))
theorem !e,t,rg.  rg = CipherRangeClass(e,t) => t = TargetLength(e,rg)
theorem !e,r. SubRange(r,RangeClass(e,r))

function val IVSize: epoch -> nat
definition !e,mac,alg.
	((CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MACOnly(mac) \/
	  CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MtE(Stream_RC4_128,mac) \/
	  CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MtE(CBC_Stale(alg),mac))
	 => IVSize(e) = 0 ) /\
	( CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MtE(CBC_Fresh(alg),mac)
	 => IVSize(e)= BlockSize(alg) )

val ivSize: e:succEpoch -> l:nat{l=IVSize(e)}

val fixedPadSize: si:SessionInfo -> l:nat{
	(si.extended_record_padding = true /\ l=2) \/
	(si.extended_record_padding = false /\ l=1)}

function val MaxPadSize: si:SessionInfo * unit -> nat
// TODO: private definition !si. MaxPadSize(si) = ...
val maxPadSize: si:SessionInfo -> l:nat{l = MaxPadSize(si,())}

(* A range that can be conveyed in one fragment *)
predicate RangeFragment of SessionInfo * range
definition !si,l,h. RangeFragment(si,(l,h)) <=>
	( h <= fragmentLength /\ h - l <= MaxPadSize(si,()))
type (;si:SessionInfo) rangeF = r:range{RangeFragment(si,r)}

// Padding computations
function val BlockAligned: epoch * nat -> nat
definition !e,mac,alg,l.
	((CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MACOnly(mac) \/
	  CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MtE(Stream_RC4_128,mac))
	 => BlockAligned(e,l) = 0 ) /\
	((CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MtE(CBC_Fresh(alg),mac) \/
	  CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MtE(CBC_Stale(alg),mac))
	 =>  ( BlockAligned(e,l) >= 0 /\ BlockAligned(e,l) < BlockSize(alg) ) )

private val blockAlignPadding: e:succEpoch -> l:nat -> l':nat{l' = BlockAligned(e,l)}

definition !e,l,h.
	TargetLength(e,(l,h)) =
		IVSize(e) + h + MacSize(CipherSuiteMACAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version)) +
		BlockAligned(e,h + MacSize(CipherSuiteMACAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version)))

val targetLength: e:succEpoch -> r:range -> 
  tlen:nat {tlen = TargetLength(e,r) /\ tlen <= max_TLSCipher_fragment_length}

val cipherRangeClass: e:succEpoch -> 
  tlen:nat{tlen <= max_TLSCipher_fragment_length} -> 
  r:range {r = CipherRangeClass(e,tlen)}

val rangeClass: e:succEpoch -> r0:range -> r1:range{r1 = RangeClass(e,r0)}

//AP type (;e:epoch)frange = l:nat * h:nat{l<=h /\ TargetLength(e,rg) <= max_TLSCipher_fragment_length
//AP									/\ h-l <= MaxPad(e)}