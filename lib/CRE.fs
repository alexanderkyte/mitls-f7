module CRE

open Bytes
open TLSConstants
open TLSInfo
open TLSPRF
open Error
open TLSError
open PMS

(*  extractMS is internal and extracts entropy from both rsapms and dhpms bytes 

    Intuitively (and informally) we require extractMS to be a computational randomness extractor for both 
    of the distributions generated by genRSA and sampleDH, i.e. we require that 

    PRF.sample si ~_C extractMS si genRSA pk cv         //for related si and pk cv
    PRF.sample si ~_C extractMS si sampleDH p g gx gy   //for related si and p g gx gy

    In reality honest clients and servers can be tricked by an active adversary to run different 
    and multiple extraction algorithms on the same pms and related client server randomness. 
    We call this an agile extractor, following:
    http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.187.6929&rep=rep1&type=pdf

    si contains potentially random values csrands generated by the client and the server. 
    If we do not want to rely on these values being random we require deterministic extraction.

    If we use them as seeds there may be some relations to non-malleable extractors:
    https://www.cs.nyu.edu/~dodis/ps/it-aka.pdf,
    we are however in the computational setting.   
 *)


let extractMS si pmsBytes : PRF.masterSecret =
    let pv = si.protocol_version in
    let cs = si.cipher_suite in
    let data = csrands si in
    let ca = creAlg si in
    let res: PRF.repr = extract' ca pmsBytes data 48 in
    PRF.coerce si res


(*  Idealization strategy: to guarantee that in ideal world mastersecrets (ms) are completely random
    extractRSA samples a ms at radom when called first on arguments pk,cv,pms,csrands si, prfAlg si. 
    
    When called on the same values again, the corresponding master secret is retrieved from a secret log. 

    This is done only for pms for which honestRSAPMS is true and (prfAlg si) is strong.
    Note that in this way many idealized master secrets can be derived from the same pms.
 *)


(*private*) 
let accessRSAPMS (pk:RSAKey.pk) (cv:ProtocolVersion) pms = 
  match pms with 
  #if ideal
  | IdealRSAPMS(s) -> s.seed
  #endif
  | ConcreteRSAPMS(b) -> b 

// The trusted setup for Diffie-Hellman computations
open DHGroup

(*private*) 
let accessDHPMS (p:DHGroup.p) (g:DHGroup.g) (gx:DHGroup.elt) (gy:DHGroup.elt) (pms:dhpms) = 
  match pms with 
  #if ideal
  | IdealDHPMS(b) -> b.seed
  #endif
  | ConcreteDHPMS(b) -> b 

let accessPMS (pms:PMS.pms) =
  match pms with
  | PMS.RSAPMS(pk,cv,rsapms) ->  accessRSAPMS pk cv rsapms
  | PMS.DHPMS(p,g,gx,gy,dhpms) -> accessDHPMS p g gx gy dhpms

#if ideal
// We maintain a log for looking up good ms values using their msId
type entry = pmsId * csrands * creAlg * PRF.ms
let log = ref []

let rec assoc (pi:pmsId) (csr:bytes) (ca:creAlg) (mss:entry list): PRF.ms option = 
    match mss with 
    | [] -> None 
    | (pi', csr',ca', ms)::mss' when pi=pi' && csr=csr' && ca=ca' -> Some(ms) 
    | _::mss' -> assoc pi csr ca mss'

#endif

let extract si pms: PRF.masterSecret = 
    #if ideal
    (* MK: the following should be made consistent with safeMS_SI
    let i = PRF.msi si (RSAPMS(pk,cv,pms))
    if PRF.safeMS_msIndex i then *)
    if safeCRE si then
        //We assoc on pk, cv, pms,  csrands, and prfAlg
        let pmsId = si.pmsId
        let csr = csrands si
        let ca = creAlg si
        match assoc pmsId csr ca !log with 
        | Some(ms) -> ms
        | None -> 
                let ms = PRF.sample si
                log := (pmsId,csr, ca, ms)::!log;
                ms            
    else
        extractMS si (accessPMS pms)
    #else
    extractMS si (accessPMS pms)
    #endif