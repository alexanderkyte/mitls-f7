module SessionDB

(* Database storing live sessions towards resumption. 
   Mostly trusted: we typecheck a much simplified in-memory database *)

open TLSInfo

predicate Authorize of Role * SessionInfo

type SessionIndex = sessionID * Role * Cert.hint
type StorableSession = si:SessionInfo * (;si) PRF.masterSecret

private type SessionDB = 
  (r:Role * si:SessionInfo * (;si) PRF.masterSecret {Authorize(r,si)}) list ref

val create: config -> SessionDB
val select: SessionDB -> x:SessionIndex -> res:(StorableSession option){
  !sid,r,h,si,ms. x = (sid,r,h) /\ res = Some((si,ms)) => Authorize(r,si)}
val insert: SessionDB -> x:SessionIndex -> res:StorableSession{
  !sid,r,h,si,ms. x = (sid,r,h) /\ res = (si,ms) => Authorize(r,si)}
 -> SessionDB
val remove: SessionDB -> SessionIndex -> SessionDB

// Useful for the user of miTLS; nothing interesting to verify 
val getAllStoredIDs: SessionDB -> SessionIndex list
