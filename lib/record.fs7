module Record

open Bytes
open Tcp
open Formats
open Error
open TLSInfo
open TLSKey
open CipherSuites

type (;ki:KeyInfo) ConnectionState = {
  key: (;ki) recordKey;
  iv3: (;ki) ENCKey.iv3;
  seqn: int; 
}
    
type (;ki:KeyInfo) sendState = (;ki) ConnectionState 
type (;ki:KeyInfo) recvState = (;ki) ConnectionState

val initConnState: ki:KeyInfo -> (;ki) ccs_data -> 
                   cs:(;ki) ConnectionState{cs.seqn = 0}

val recordPacketOut: ki:KeyInfo -> 
                     ss:(;ki) sendState -> 
                     tlen:int -> ct:ContentType -> 
                     (;ki,tlen,ct) TLSFragment.fragment -> 
                     (ss':(;ki) sendState *
		      wire:bytes){ss'.seqn = ss.seqn+1}
 
val recordPacketIn : ki:KeyInfo -> 
                     rs:(;ki) recvState -> 
                     wire:bytes -> 
                     (rs':recvState * 
		      ct:ContentType * 
		      pv:ProtocolVersion *
		      tlen:int * 
		      (;ki,tlen,ct) TLSFragment.fragment) Result


(* auxiliary functions *)

val parseHeader: bytes -> (ContentType * ProtocolVersion * int) Result

