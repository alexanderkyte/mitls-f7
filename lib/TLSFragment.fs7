module TLSFragment

open Bytes
open TLSInfo
open Formats

// Plain type for Dispatch
type (ki:KeyInfo,tlen:int,ct:ContentType) fragment =
    | FHandshake of (;ki,tlen)Handshake.fragment    {ct=Formats.Handshake}
    | FCCS       of (;ki,tlen)Handshake.ccsFragment {ct=Change_cipher_spec}
    | FAlert     of (;ki,tlen)Alert.fragment        {ct=Alert}
    | FAppData   of (;ki,tlen)AppDataPlain.fragment {ct=Application_data}

val repr: ki:KeyInfo -> tlen:int -> ct:ContentType -> (;ki,tlen,ct)fragment -> bytes
val fragment: ki:KeyInfo -> tlen:int -> ct:ContentType -> bytes -> (;ki,tlen,ct)fragment

// Plain type for AEAD
type addData = bytes

predicate ADofID: KeyInfo -> int -> ContenType -> addData

type (;ad:addData) AEADFragment
val AEADFragment: ad:addData{?ki,tlen,ct. ADofID(ki,tlen,ct,ad)} -> bytes -> (;ad)AEADFragment
val AEADRepr: ad:addData{?ki,tlen,ct. ADofID(ki,tlen,ct,ad)} -> (;ad)AEADFragment -> bytes

val AEADToDispatch: ki:KeyInfo -> tlen:int -> ct:ContentType -> ad:addData{ADofID(ki,tlen,ct,ad)} -> (;ad)AEADFragment -> (;ki,tlen,ct)fragment
val DispatchToAEAD: ki:KeyInfo -> tlen:int -> ct:ContentType -> ad:addData{ADofID(ki,tlen,ct,ad)} -> (;ki,tlen,ct)fragment -> (;ad)AEADFragment