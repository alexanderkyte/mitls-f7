module LHAE

open Bytes
open Error
open TLSError
open TLSInfo
open Range

open TLSConstants

type cipher = b:bytes{Length(b) <= max_TLSCipher_fragment_length}
(* no need to be more precise on the length *)


(* MK 
type keyindex
val KeyF: id -> keyindex

private type (;ki:keyindex) secretLHAEKey =
    | MtEK of ka:(;ki)MAC.key * ke:(;ki)ENC.state // {MtEKey(ki,(ka,ke))}
    | MACOnlyK of (;ki) MAC.key
//  | GCM of ke:(;ki:AENC.state)  


type (e:id) LHAEKey = (;keyF(e)) secretLHAEKey
*)

private type (;ki:id) LHAEKey =
    | MtEK of ka:(;ki)MAC.key * ke:(;ki)ENC.state // {MtEKey(ki,(ka,ke))}
    | MACOnlyK of (;ki) MAC.key
(*  | GCM of ke:(;ki:AENC.state)  *)

function val KeySize_AEAlg: a:aeAlg -> nat
definition !a,enc,mac. 
	(( a = MACOnly(mac) =>
	  KeySize_AEAlg(a) = MacKeySize(mac) ) /\
	 ( a = MtE(enc,mac) =>
	  KeySize_AEAlg(a) = MacKeySize(mac) +
					         EncKeySize(enc) +
		                     KeyDerivationIVSize_AEAlg(a) ))
ask !cs,pv,mac. CipherSuiteAuthEncAlg(cs,pv) = MACOnly(mac) => KeySize_AEAlg(MACOnly(mac)) = MacKeySize(mac)

function val KeySize: ki:id -> nat
definition !ki. KeySize(ki) = KeySize_AEAlg(CipherSuiteAuthEncAlg((EpochSI(ki)).cipher_suite,(EpochSI(ki)).protocol_version))

(*
function val KeySize: ki:id -> nat
definition !ki,si. si = EpochSI(ki) => 
	KeySize(ki)=KeySize_AEAlg(CipherSuiteAuthEncAlg(si.cipher_suite,si.protocol_version))


private definition !ki,si,enc,mac. si = EpochSI(ki) =>
	(( CipherSuiteAuthEncAlg(si.cipher_suite,si.protocol_version) = MACOnly(mac) =>
	  KeySize(ki) = MacKeySize(mac) ) /\
	 ( CipherSuiteAuthEncAlg(si.cipher_suite,si.protocol_version) = MtE(enc,mac) =>
	  KeySize(ki) = MacKeySize(mac) +
					    EncKeySize(enc) +
					    Range.KeyDerivationIVSize(ki) ))
*)

ask !ki,mac. CipherSuiteAuthEncAlg(EpochSI(ki).cipher_suite,EpochSI(ki).protocol_version) = MACOnly(mac) =>
	  KeySize(ki) = TLSConstants.MacKeySize(mac)

ask !ki,si,enc,mac. CipherSuiteAuthEncAlg(EpochSI(ki).cipher_suite,EpochSI(ki).protocol_version) = MtE(enc,mac) =>
	  KeySize(ki) = MacKeySize(mac) + EncKeySize(enc) + Range.KeyDerivationIVSize(ki)


//CF '13 who wrote this? when?
//MK I have a partial answer, for a different question, why?: it was needed for PRF verification, and 
//MK I added a similar ask in PRF.fs7. Succeeds for me. 
//TODO Why is this failing? Because of KeySize not being what I want, I cannot typecheck COERCE.
//TODO ask !ki. IsOnlyMACCiphersuite(EpochSI(ki).cipher_suite) => KeySize(ki,ki) = MacKeySize(TLSConstants.CipherSuiteMACAlg(EpochSI(ki).cipher_suite))

val GEN:    ki:id     -> encryptor:(;ki)LHAEKey * decryptor:(;ki)LHAEKey
val COERCE: ki:id{not Auth(ki)} -> b:bytes{Length(b) = KeySize(ki)} -> (;ki)LHAEKey
val LEAK:   ki:id{not Auth(ki)} -> (;ki)LHAEKey -> b:bytes

private val mteKey: ki:id -> (;ki) MAC.key -> (;ki) ENC.state -> (;ki) LHAEKey

(* MK not needed any more
FIXME: next two should be ask
private ask !e,si. si = EpochSI(e) =>
	( (si.protocol_version = SSL_3p0 \/ si.protocol_version = TLS_1p0) => IVSize(e) = 0 ) /\
	( (si.protocol_version = TLS_1p1 \/ si.protocol_version = TLS_1p2) => 
	   IVSize(e) = EncAlgBlockSize(CipherSuiteENCAlg(si.cipher_suite,si.protocol_version)) )
*)


//MK I added this one, to typecheck key generation in PRF and LHAE.COERCE. 
//MK As this change resulted from a bug in LHAE, I am even more concerned about these assumes.
//MK Should be replaced by a different ask.
private assume !e,si. si = EpochSI(e) =>
	( (si.protocol_version = SSL_3p0 \/ si.protocol_version = TLS_1p0) => KeyDerivationIVSize(e) = EncAlgBlockSize(CipherSuiteENCAlg(si.cipher_suite,si.protocol_version)) ) /\
	( (si.protocol_version = TLS_1p1 \/ si.protocol_version = TLS_1p2) => 
	   KeyDerivationIVSize(e) = 0 )

// We have two variants for encryption and decryption: 
// the first (primed) is concrete; the second is idealized at safe indexes,
// using either #ideal_F (filtering out non-cipher) or #ideal (decrypting just by lookup)

predicate ENCrypted of e:id * ad:(;e)LHAEPlain.adata * cipher

private definition !e,ad,c.
  ENCrypted(e,ad,c) <=> ?p'. ENC.ENCrypted(e,ad,c,p')

ask !e,ad,c. ( Safe(e) => ENCrypted(e,ad,c) ) => (Safe(e) => ?p. ENC.ENCrypted(e,ad,c,p))

val encrypt': ki:id -> (;ki) LHAEKey -> ad:(;ki)LHAEPlain.adata ->
  rg:range -> p:(;ki,ad,rg) LHAEPlain.plain ->
  ((;ki) LHAEKey * c:cipher){Length(c) = TargetLength(ki,rg) /\         
                             (Safe(ki) => ENCrypted(ki,ad,c))}

val encrypt : ki:id -> (;ki) LHAEKey -> ad:(;ki)LHAEPlain.adata ->
  rg:range -> p:(;ki,ad,rg) LHAEPlain.plain ->
  ((;ki) LHAEKey * c:cipher){Length(c) = TargetLength(ki,rg) /\
                             (Safe(ki) => ENCrypted(ki,ad,c))}

type entry = 
  ki:id * ad:(;ki) LHAEPlain.adata * rg:range * 
  p:(;ki,ad,rg) LHAEPlain.plain * c:ENC.cipher {ENCrypted(ki,ad,c)} 
private val log: entry list ref
private val cmem: ki:id -> ad:(;ki)LHAEPlain.adata -> c:cipher ->  
  entry list -> res:(r:range * (;ki,ad,r)LHAEPlain.plain) option { 
    ( !rg,p. res = Some ((rg,p)) => (ENCrypted(ki,ad,c) /\ rg = CipherRangeClass(ki,Length(c))) ) /\
	( res = None => not ENCrypted(ki,ad,c) )}

(*CF
theorem !ki,d,rg0,p0,rg1,p1,c. (ENCrypted(ki,d,rg0,p0,c) /\ ENCrypted(ki,d,rg1,p1,c)) => p0 = p1
*)

val decrypt': ki:id -> k:(;ki) LHAEKey -> ad:(;ki)LHAEPlain.adata ->
  c:cipher{Safe(ki) => ENCrypted(ki,ad,c)} -> res: 
  ( ( 
    (;ki) LHAEKey *  
    rg:range * 
    p:(;ki,ad,rg) LHAEPlain.plain) {rg = CipherRangeClass(ki,Length(c))} ) Result

// { (* partial functional correctness when decrypting what we encrypted *)
//   !pl,p,tag,rg.
//	(    Length(c) = EncryptedLength(ki,rg)
//	  /\ MACed(e,ad,pl,tag) // nb Encode.MACed has extra args.
//     /\ Encoded(e,ad,pl,tag,p) 
//     /\ ENCrypted(e,Length(c),StateID(e,Encryptor(k)),p,c)  
//   => ?k',r'. res = Correct((k',r',pl)) } 

val decrypt: ki:id -> (;ki) LHAEKey -> ad:(;ki)LHAEPlain.adata ->
  c:cipher -> res: 
  ( ((;ki) LHAEKey *  rg:range * (;ki,ad,rg) LHAEPlain.plain)
     {rg = CipherRangeClass(ki,Length(c))}
  ) Result
   {
    (Safe(ki) => 
        (   (!k,r,p. res = Correct((k,r,p)) => ENCrypted(ki,ad,c)) 
	 /\ (ENCrypted(ki,ad,c) => (?p,k,r'. res = Correct((k,r',p))))
		))}
// The last two lines are equivalent to (but easier to verify than)
// !p. CTXT(ki,ad,p,c) <=> (?k,r. res = Correct((k,r,p)))

(* CF 13-01-07 verification notes

We need a full independent spec of StrongAE & StAE
something like the functions below and the corresponding logical specs.

let strongAE pv cs = match cs with
  | NullCipherSuite | SCSV of _ | OnlyMACCipherSuite(_,_) -> false 
  | CipherSuite(_,ea) ->
      match ea with 
	    | MtE(eAlg, hAlg) -> int_cma pv hAlg && 
		                     ind_cpa pv eAlg && 
							 int_ctxt pv hAlg eAlg 
		| AEAD (_,_)      -> false // until we handle GCM 

let strongAuth pv cs = match cs with
  | NullCipherSuite | SCSV of _ -> false 
  | OnlyMACCipherSuite(_,hAlg)  -> int_cma hAlg 
  | CipherSuite(_,ea) -> 
      match ea with 
	    | MtE(eAlg, hAlg) -> int_cma pv hAlg  
		| AEAD (_,_)      -> false // until we handle GCM 
 
and the corresponding logical specs such that, e.g.,

ask !e. StrongAE(e) => StrongAuth(e)
ask INT_CTXT(pv,h,e) => 
     pv = TLS_1p2 
  \/ ?kex,hAlg. e = CipherSuite(kex,MtE(_,hAlg) && ... 

(Note that we actually don't need full CMA when we have CTXT, but this is practically irrelevant.)  

There are several ideal properties of AEAD:

1. (When Safe:) filter out any cipher that is not an honest encryption---a.k.a "INT-CTXT" 
                implemented by #ideal_F in AEAD.fs

2. (When Safe:) additionally decrypt by table lookup---so that we can get plain secrecy by typing 
                implemented by #ideal in AEAD.fs

3. (When Auth:) filter out any (ki,plain,AD) forgery---aka "INT-PTXT" or "CMA"
                implemented by #ideal in MAC.fs

For F7 clarity, we distinguish several verification steps (using flags/Makefile):

1. (When Safe, decryption correctness:) decryptions of honest ciphers always succeed, returning the plaintext
   Together with CTXT & our "at most one encryption per AD" assumption, this justifies moving from 1 to 2.
   We might also explain it with a "Decryption error oracle". 

2. If we decrypt by table lookup, then, we implement parametric AEAD (to complete the Safe proof)
   this essentially rely on CPA of the underlying encryption.

3. (When Auth, irrespective of Safe & CTXT:) AEAD is PTXT wrt to some user-defined Msg property.

We agreed that #if ideal refers to typechecking 2. 

The postcondition of decryption thus consists of

// proved in step 3, sufficient to retrieve Msg(ki,ad,p) as a predicate attached to the CTXT log
(Auth(ki) => ((!p. (?r. res = Correct(ki,r,p)) 
               <=> ( ?c. CTXT(ki,ad,p,c))))
/\
// a stronger "Safe" authentication property, which also yields Msg(ki,ad,p)
(Safe(ki) => ((!p. ( ?r. res = Correct(ki,r,p)) 
		       <=> ( CTXT(ki,ad,p,c)))           
/\
// a functional property
(Safe(ki) => ?p. res = Correct((ki,Range(ki,c),p))) \/ res = Error(AD_bad_record_mac,"")

--- The sequence of games is 

* indistinguishability of filtering out bad ciphers at safe indexes (by CTXT assumption) 
  The joint CTXT assumption still has to be proved "by hand" for now, 
  although the functional property above helps.

* indistinguishability of decryption by lookup at safe indexes
  (by typechecking a full spec for the two variants when the lookup succeeds)

* secrecy by typing (CPA), relying on nested plains.
  for that step, we need to encapsulate Encode & Mac encryption processing into DataStream; 

  the current, specific approach is to idealize repr as max-sized-zero at safe indexes
  within encode (by ENC-CPA parametricity) then typecheck parametricy over delta.  

  a generic pattern would be (up to indexing)
  
  abstract_repr: delta -> high_bytes (within a range)
  abstract_map: (bytes -> bytes) -> high_bytes -> high_bytes (within computed range)

  
(independently:)

* CMA for Auth but not Safe.   

*)

(* CF 12-04-09 discussion points: 
//
// plaintext integrity follows from abstraction:
// - a precondition for coercing to  (;ki,rg,ad) plain is that ki is un-Auth
// - a precondition for leaking from (;ki,rg,ad) plain is that ki is un-Safe
//
// additionally, the decryption refinement guarantees 
// functional correctness & ciphertext integrity
// 
// CTXT(ki,ad,p,c) is a runtime event recorded by encrypt, stating
// "c is a correct encryption for ki, ad, some rg, and p 
//
// the range for encryption is not recorded in CTXT,
// (as indeed only the secret length is authenticated, not the range).
//
// our interface is compatible with state for the underlying encryption
// (but does not rely on it); this is convenient for RC4, for IVs in old TLS
//
// how do we deal with corrupted peers? 
// why do we have two cases? I propose instead:
//
// Auth(ki) => 
// ( !p. res = Correct(CipherRange(ki,c),p) <=> CTXT(ki,ad,p,c) )
//
// We are still in-between encryptor/decryptor and keys, why? 
// Are TLS 1.0 IVs now part of the mutable key? 
// Note that CipherRange depends on the TLS version too.
*)
