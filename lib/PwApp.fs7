module PwApp

open Cert
open Dispatch
open TLSInfo
open PwToken

type username = PwToken.username

predicate ClientAuthenticated   of username * token
predicate AuthenticatedByServer of SessionInfo  * username

function val CN : Cert.cert list -> string

val request :
      servname : string
   -> username : string
   -> token    : token{RegisteredToken(UTK(username, token))}
   -> (c:Connection{
           CN(EpochSI(CnInfo(c).id_in).serverID) = username
		/\ (   StrongAuth(EpochSI(CnInfo(c).id_in).cipher_suite)
		    /\ Honest(ServerKey(EpochSI(CnInfo(c).id_in).serverID))
		         => AuthenticatedByServer(EpochSI(CnId(c).id_in), username))
      }) option

val response : unit -> (uc:(username * Connection){
  !c, u. (u, c) = uc =>
    ?token. StrongAuth(EpochSI(CnId(c).id_in).cipher_suite)
	          => ClientAuthenticated(u, token) /\ GoodToken(u, token)
}) option
