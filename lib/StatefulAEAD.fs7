module StatefulAEAD

open Error
open Bytes
open TLSInfo

//CF 12/2: do we need pre/post on ciphertext lengths?
//CF 21/4: cut prestate and State? 

type rw =
	| ReaderState 
	| WriterState

private type (;ki:epoch,rw:rw) state = {
  key    : (;ki) AEAD.AEADKey;         // possibly stateful
  history: (;ki) StatefulPlain.history // ghost state, except for the sequence number
}

function val History: e:epoch * rw:rw * (;e,rw)state -> 'a //(;e)StatefulPlain.history
private definition !e,rw,s. History(e,rw,s) = s.history

type (;ki:epoch) reader = r:(;ki,ReaderState) state
type (;ki:epoch) writer = w:(;ki,WriterState) state

val GEN:    ki:succEpoch{Safe(ki)}     -> (;ki)reader * (;ki)writer
val COERCE: ki:succEpoch{not Auth(ki)} -> rw:rw -> b:bytes{Length(b)=AEAD.AEADSize(ki)} -> (;ki,rw)state
val LEAK:   ki:succEpoch{not Auth(ki)} -> rw:rw -> (;ki,rw)state -> b:bytes

val history: ki:epoch -> rw:rw -> s:(;ki,rw) state -> h:(;ki)StatefulPlain.history{h=History(ki,rw,s)}

// Ideally,
// the writer maintains a table (ki, h, ad, range, fragment, cipher) {...} [details?]
// when SAFE(ki), the writer uses 0s instead of the actual fragment
// when AUTH(ki), the reader decrypts by table lookup
// turning forgeries into errors; retrieving the "right" history index; returning the concrete decrypted range

//CF 21/4: STXT is an event tracking written cipher fragments; not sure about details and contents ?!
//CF e.g.    * the decrypted rg is NOT authenticated
//CF         * the states are not necessarily synchronized; only the histories are when AUTH

type cipher = AEAD.cipher

predicate val STXT: ki:epoch * (;ki) StatefulPlain.history * ad:(;ki)StatefulPlain.adata * 'a (* (;ki,ad,r)StatefulPlain.fragment *) * cipher -> bool
private definition !ki,h,ad,f,c. 
  STXT(ki,h,ad,f,c) <=> AEAD.CTXT(ki,AEADPlain.MakeAD(ki,h,ad),AEADPlain.StAEToAEAD(f),c)

val encrypt: ki:succEpoch -> 
  wr:(;ki) writer -> 
  ad:(;ki) StatefulPlain.adata ->
  rg:range ->
  f: (;ki,ad,History(ki,WriterState,wr),rg) StatefulPlain.plain ->
  (wr':(;ki) writer * c:cipher){
    History(ki,WriterState,wr') = StatefulPlain.ExtendHistory(ki,ad,History(ki,WriterState,wr),rg,f) /\
    (Safe(ki) => STXT(ki,History(ki,WriterState,wr),ad,f,c))}
//CF why do we need a conditional here? 

val decrypt: ki:succEpoch -> 
  rd:(;ki) reader -> 
  ad:(;ki) StatefulPlain.adata ->
  c:cipher ->
  res:((;ki) reader * rg:range * (;ki,ad,History(ki,ReaderState,rd),rg) StatefulPlain.plain) Result
  { !nrd,rg,f. res = Correct((nrd,rg,f)) => 
               (   History(ki,ReaderState,nrd) = StatefulPlain.ExtendHistory(ki,ad,History(ki,ReaderState,rd),rg,f) /\
                   Encode.CipherRange(ki,rg,Length(c)) /\
 	         (Safe(ki) =>
				( (!nrd,rg,f. res = Correct((nrd,rg,f)) => STXT(ki,History(ki,ReaderState,rd),ad,f,c)) // /\
				//  (!p. STXT(ki,rd,ad,p,c) => (?nrd,rg. res = Correct((nrd,rg,p))))
				)
			 ) ) }
			 
			  //STXT(ki,rd,ad,f,c)) /\
              //   (Auth(ki) => STXT(ki,rd,ad,f,c))) }

//CF 21/4: as stated, we need the resulting readers and writers to have explicitly-updated histories (irrespective of AUTH)
//CF 21/4: can we return an option instead? Otherwise we may have to specify which errors can be returned.