module CRE

open Bytes
open TLSConstants
open TLSInfo
open TLSPRF
open Error


(*  extactMS is internal and extracts entropy from both rsapms and dhpms bytes 

    Intuitively we require extractMS to be at least a deterministic computational randomness extractor for both 
    of the distributions generated by genRSA and sampleDH. 

    PRF.sample si ~_C extractMS si genRSA pk vc //for related si and pk vc
    PRF.sample si ~_C extractMS si sampleDH p g //for related si and p g

    In reality honest clients and servers can be tricked by an active adversary to run different 
    and multiple extraction algorithms on the same pms. We call this an agile extractor, following:
    http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.187.6929&rep=rep1&type=pdf

    There may be some relations to non-malleable extractors, we are however deterministic and computational setting:
    https://www.cs.nyu.edu/~dodis/ps/it-aka.pdf . 

*)

let extractMS sinfo pmsBytes: PRF.masterSecret =
    let pv = sinfo.protocol_version in
    let cs = sinfo.cipher_suite in
    let data = csrands sinfo in
    let res = prf pv cs pmsBytes tls_master_secret data 48 in
    PRF.coerce sinfo res

type rsarepr = bytes
(*private*) type rsaseed = {seed: rsarepr}

// To ideally avoid collisions concerns between Honest and Coerced pms we use a sum type. 
type rsapms = 
#if ideal 
  | IdealRSAPMS of rsaseed 
#endif
  | ConcreteRSAPMS of rsarepr

#if ideal
//this predicate is used in RSA.encrypt to record the event that rsapms got encrypted
type predicates = EncryptedRSAPMS of RSAKey.pk * ProtocolVersion * rsapms * bytes

//this function is used to determine whether idealization should be performed
let honestRSAPMS (pk:RSAKey.pk) (cv:TLSConstants.ProtocolVersion) pms = 
  match pms with 
  | IdealRSAPMS(s)    -> true
  | ConcreteRSAPMS(s) -> false
#endif 

let genRSA (pk:RSAKey.pk) (vc:ProtocolVersion): rsapms = 
    let verBytes = TLSConstants.versionBytes vc in
    let rnd = random 46 in
    let pms = verBytes @| rnd in
    #if ideal
      if RSAKey.honest pk then 
        IdealRSAPMS({seed=pms}) 
      else 
    #endif
        ConcreteRSAPMS(pms)  

let coerceRSA (pk:RSAKey.pk) (cv:ProtocolVersion) b = ConcreteRSAPMS(b)
let leakRSA (pk:RSAKey.pk) (cv:ProtocolVersion) pms = 
  match pms with 
  #if ideal
  | IdealRSAPMS(_) -> Error.unexpected "pms is dishonest" //MK changed to unexpected from unreachable
  #endif
  | ConcreteRSAPMS(b) -> b 

(*  Idealization strategy: to guarantee that in ideal world mastersecrets (ms) are completely random
    extractRSA samples a ms at radom when called first on arguments pk,cv,pms,csrands si. 
    
    When called on the same values again, the corresponding master secret is retrieved from a secret log. 

    This is done only for pms for which honestRSAPMS is true. Note that in this way many idealized master 
    secrets can be derived from the same pms.
 *)


#if ideal
let todo s = failwith s 

// We maintain a log for looking up good ms values using their pms values
type rsaentry = RSAKey.pk * ProtocolVersion * rsapms * bytes * PRF.ms

let rsalog = ref []

let rec rsaassoc (pk:RSAKey.pk) (cv:ProtocolVersion) (pms:rsapms)  (csr:bytes) (mss:rsaentry list): PRF.ms option = 
    match mss with 
    | [] -> None 
    | (pk',cv',pms',csr',ms)::mss' when pk=pk' && cv=cv' && pms=pms' && csr=csr' -> Some(ms) 
    | _::mss' -> rsaassoc pk cv pms csr mss'

#else
let todo s = ()
#endif

let extractRSA si (cv:ProtocolVersion) pms = 
  match pms with
  #if ideal
  | IdealRSAPMS(s) ->
        let pk = 
            match (Cert.get_chain_public_encryption_key si.serverID) with 
            | Correct(pk) -> pk
            | _           -> unexpected "server must have an ID"    
        //We assoc on pk, cv, pms and csrands 
        match rsaassoc pk cv pms (csrands si) !rsalog with 
        | Some(ms) -> ms
        | None -> 
                 let ms = PRF.sample si 
                 rsalog := (pk,cv,pms,csrands si,ms)::!rsalog
                 ms
  #endif  
  | ConcreteRSAPMS(s) -> todo "SafeMS_SI ==> HonestRSAPMS"; extractMS si s


// The trusted setup for Diffie-Hellman computations
open DHGroup

type dhrepr = bytes
(*private*) type dhseed = {seed: dhrepr}

// To ideally avoid collisions concerns between Honest and Coerced pms we use a sum type.
type dhpms = 
#if ideal 
  | IdealDHPMS of dhseed 
#endif
  | ConcreteDHPMS of dhrepr

#if ideal
let honestDHPMS (p:DHGroup.p) (g:DHGroup.g) (gx:DHGroup.elt) (gy:DHGroup.elt) pms = 
  match pms with 
  | IdealDHPMS(s)    -> true
  | ConcreteDHPMS(s) -> false 

// We maintain a log for looking up good ms values using their pms values
type dhentry = p * g * elt * elt * dhpms * bytes * PRF.masterSecret

let dhlog = ref []

#endif

let sampleDH p g (gx:DHGroup.elt) (gy:DHGroup.elt) = 
    let gz = DHGroup.genElement p g in
    #if ideal
    IdealDHPMS({seed=gz}) 
    #else
    ConcreteDHPMS(gz)  
    #endif

let coerceDH (p:DHGroup.p) (g:DHGroup.g) (gx:DHGroup.elt) (gy:DHGroup.elt) b = ConcreteDHPMS(b) 

#if ideal

let rec dhassoc (p:p) (g:g) (gx:elt) (gy:elt) (pms:dhpms)  (csr:bytes) (mss:dhentry list): PRF.masterSecret option = 
    match mss with 
    | [] -> None 
    | (p',g',gx',gy',pms',csr',ms)::mss' when p=p' && g=g' && gx=gx' && gy=gy' && pms=pms' && csr=csr' -> Some(ms) 
    | _::mss' -> dhassoc p g gx gy pms csr mss'

#endif

let extractDHE (si:SessionInfo) (p:DHGroup.p) (g:DHGroup.g) (gx:DHGroup.elt) (gy:DHGroup.elt) (pms:dhpms): PRF.masterSecret =
    match pms with
    //#begin-ideal 
    #if ideal
    | IdealDHPMS(s) -> 
        match dhassoc p g gx gy pms (csrands si) !dhlog with
           | Some(ms) -> ms
           | None -> 
                 let ms=PRF.sample si 
                 dhlog := (p, g, gx, gy, pms, csrands si, ms)::!dhlog;
                 ms 
    #endif
    //#end-ideal
    | ConcreteDHPMS(s) -> todo "SafeHS_SI ==> HonestDHPMS"; extractMS si s
   