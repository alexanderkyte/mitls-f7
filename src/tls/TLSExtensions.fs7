(* Copyright (C) 2012--2014 Microsoft Research and INRIA *)

module TLSExtensions

(* Formatting and parsing support for the protocol extensions
   exchanged in the first two messages of the handshake *)

open Bytes
open Error
open TLSError
open TLSConstants
open TLSInfo

(* AP: New interface: to be proved *)

// Following types used only in Handshake
type clientExtension
type serverExtension

// Client side
val clientExtensionsBytes: clientExtension list -> bytes
val prepareClientExtensions: config -> ConnectionInfo -> cVerifyData -> clientExtension list
val parseServerExtensions: bytes -> (serverExtension list) Result
val negotiateClientExtensions: clientExtension list -> serverExtension list -> bool -> cipherSuite -> negotiatedExtensions Result

// Server side
val serverExtensionsBytes: serverExtension list -> bytes
val negotiateServerExtensions: clientExtension list -> config -> cipherSuite -> (cVerifyData * sVerifyData) -> bool -> (serverExtension list * negotiatedExtensions)
val parseClientExtensions: bytes -> cipherSuites -> (clientExtension list) Result

// ------------------------------------------------------
// The rest is extension-specific

// Secure Renegotiation Information

val checkClientRenegotiationInfoExtension: config -> clientExtension list -> cVerifyData -> bool
val checkServerRenegotiationInfoExtension: config -> serverExtension list -> cVerifyData -> sVerifyData -> bool

// Extended master secret
val hasExtendedMS: negotiatedExtensions -> bool


// Extended padding
predicate HasExtendedPadding of id
val hasExtendedPadding: id:id -> b:bool{b = true <=> HasExtendedPadding(id)}

(* AP: OLD Interface
type extensionType =
    | HExt_renegotiation_info

function val ExtensionTypeBytes: extensionType -> cbytes
private definition ExtensionTypeBytes(HExt_renegotiation_info) = [|0xFFuy; 0x01uy|]

val extensionTypeBytes: et:extensionType -> b:bytes{B(b)=ExtensionTypeBytes(et)}
val parseExtensionType: b:bytes -> (et:extensionType{B(b)=ExtensionTypeBytes(et)}) Result
val isExtensionType: et:extensionType -> ext:(extensionType * bytes) ->
	b:bool{b = true => (?et',d. ext=(et',d) /\ et = et')}

function val ExtensionBytes: extensionType * cbytes -> cbytes
private definition !et,b.
	ExtensionBytes(et,b) = ExtensionTypeBytes(et) @| VLBytes(2,b)
predicate ContainsExtensions of cbytes * (extensionType * bytes) list
// FIXME: Next is wrong!
private definition !b,l. ContainsExtensions(b,l)

val extensionBytes: et:extensionType -> d:bytes -> b:bytes{B(b)=ExtensionBytes(et,d)}
val consExt: extensionType * bytes -> (extensionType * bytes) list -> (extensionType * bytes) list
val parseExtensionList: b:bytes -> cur:(extensionType * bytes) list ->
	(res:(extensionType * bytes) list{ContainsExtensions(B(b),res)}) Result

val renegotiationInfoExtensionBytes: vd:bytes ->
	b:bytes{B(b)=ExtensionBytes(HExt_renegotiation_info,VLBytes(1,B(vd)))}
val parseRenegotiationInfoExtension: b:bytes ->
	(vd:bytes{B(b)=VLBytes(1,B(vd))}) Result

function val ExtensionsBytes: cbytes -> cbytes
private definition !b. ExtensionsBytes(b) = VLBytes(2,b)
val extensionsBytes: en:bool -> vd:bytes ->
	b:bytes{(en = true /\ B(b) = ExtensionsBytes(ExtensionBytes(HExt_renegotiation_info,VLBytes(1,B(vd)))) ) \/
			(en = false /\ b = empty_bytes)}

val parseExtensions: b:bytes -> (res:(extensionType * bytes) list
	{(b = empty_bytes /\ res = [] ) \/
	 (b <> empty_bytes /\ ?ext. B(b) = VLBytes(2,ext) /\ ContainsExtensions(ext,res) )
	}) Result

val check_reneg_info: got:bytes -> exp:bytes ->
	b:bool{b=true => (?d. B(got) = VLBytes(1,d) /\ exp = d)}

// TODO: That's tricky. There's a hidden invariant on whether we are in the first, or subsequent handshake.
val checkClientRenegotiationInfoExtension:
	(extensionType * bytes) list -> cipherSuites -> bytes -> bool

// TODO: Need to deal with lists to say something about this function
val inspect_ServerHello_extensions:
	(extensionType * bytes) list -> bytes ->
		unit Result

*)

// Signature and Hash Algorithms

function val SigHashAlgBytes: 'a (*TODO Sig.alg, can't use because it's a pair *) -> cbytes
private definition !s,h. SigHashAlgBytes((s,h)) = HashAlgBytes(s) @| SigAlgBytes(h)

val sigHashAlgBytes: a:Sig.alg -> b:bytes{B(b)=SigHashAlgBytes(a)}
val parseSigHashAlg: b:bytes -> (a:Sig.alg{B(b)=SigHashAlgBytes(a)}) Result

function val SigHashAlgsBytes: Sig.alg list -> cbytes
val sigHashAlgListBytes: al:Sig.alg list -> b:bytes{B(b)=SigHashAlgsBytes(al)}
val parseSigHashAlgList: b:bytes -> (al:Sig.alg list{B(b)=SigHashAlgsBytes(al)}) Result

function val DefaultSigHashAlgs: ProtocolVersion * cipherSuite -> Sig.alg list
val default_sigHashAlg: pv:ProtocolVersion -> cs:cipherSuite -> al:Sig.alg list{al=DefaultSigHashAlgs(pv,cs)}

val sigHashAlg_contains: Sig.alg list -> Sig.alg -> bool
val cert_type_list_to_SigHashAlg: certType list -> ProtocolVersion -> Sig.alg list
val cert_type_list_to_SigAlg: certType list -> sigAlg list
val sigHashAlg_bySigList: Sig.alg list -> sigAlg list -> Sig.alg list
