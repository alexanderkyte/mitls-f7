<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog.Xml</name>
    </assembly>
    <members>
        <member name="T:NLog.Fluent.Log">
            <summary>
            A global logging class using the Visual Studio 2012 caller info to find the logger.
            </summary>
        </member>
        <member name="M:NLog.Fluent.Log.Level(NLog.LogLevel,System.String)">
            <summary>
            Starts building a log event with the specified <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is the file path at the time of compile.</param>
            <returns>An instance of the fluent <see cref="T:NLog.Fluent.LogBuilder"/>.</returns>
        </member>
        <member name="M:NLog.Fluent.Log.Trace(System.String)">
            <summary>
            Starts building a log event at the <c>Trace</c> level.
            </summary>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is the file path at the time of compile.</param>
            <returns>An instance of the fluent <see cref="T:NLog.Fluent.LogBuilder"/>.</returns>
        </member>
        <member name="M:NLog.Fluent.Log.Debug(System.String)">
            <summary>
            Starts building a log event at the <c>Debug</c> level.
            </summary>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is the file path at the time of compile.</param>
            <returns>An instance of the fluent <see cref="T:NLog.Fluent.LogBuilder"/>.</returns>
        </member>
        <member name="M:NLog.Fluent.Log.Info(System.String)">
            <summary>
            Starts building a log event at the <c>Info</c> level.
            </summary>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is the file path at the time of compile.</param>
            <returns>An instance of the fluent <see cref="T:NLog.Fluent.LogBuilder"/>.</returns>
        </member>
        <member name="M:NLog.Fluent.Log.Warn(System.String)">
            <summary>
            Starts building a log event at the <c>Warn</c> level.
            </summary>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is the file path at the time of compile.</param>
            <returns>An instance of the fluent <see cref="T:NLog.Fluent.LogBuilder"/>.</returns>
        </member>
        <member name="M:NLog.Fluent.Log.Error(System.String)">
            <summary>
            Starts building a log event at the <c>Error</c> level.
            </summary>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is the file path at the time of compile.</param>
            <returns>An instance of the fluent <see cref="T:NLog.Fluent.LogBuilder"/>.</returns>
        </member>
        <member name="M:NLog.Fluent.Log.Fatal(System.String)">
            <summary>
            Starts building a log event at the <c>Fatal</c> level.
            </summary>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is the file path at the time of compile.</param>
            <returns>An instance of the fluent <see cref="T:NLog.Fluent.LogBuilder"/>.</returns>
        </member>
        <member name="T:NLog.Fluent.LogBuilder">
            <summary>
            A fluent class to build log events for NLog.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder"/> class.
            </summary>
            <param name="logger">The <see cref="T:NLog.Logger"/> to send the log event.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.Logger,NLog.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder"/> class.
            </summary>
            <param name="logger">The <see cref="T:NLog.Logger"/> to send the log event.</param>
            <param name="logLevel">The <see cref="T:NLog.LogLevel"/> for the log event.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Exception(System.Exception)">
            <summary>
            Sets the exception information of the logging event.
            </summary>
            <param name="exception">The exception information of the logging event.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Level(NLog.LogLevel)">
            <summary>
            Sets the level of the logging event.
            </summary>
            <param name="logLevel">The level of the logging event.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.LoggerName(System.String)">
            <summary>
            Sets the logger name of the logging event.
            </summary>
            <param name="loggerName">The logger name of the logging event.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String)">
            <summary>
            Sets the log message on the logging event.
            </summary>
            <param name="message">The log message for the logging event.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object)">
            <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The object to format.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <param name="arg3">The fourth object to format.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object[])">
            <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Property(System.Object,System.Object)">
            <summary>
            Sets a per-event context property on the logging event.
            </summary>
            <param name="name">The name of the context property.</param>
            <param name="value">The value of the context property.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.TimeStamp(System.DateTime)">
            <summary>
            Sets the timestamp of the logging event.
            </summary>
            <param name="timeStamp">The timestamp of the logging event.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.StackTrace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Sets the stack trace for the event info.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Write(System.String,System.String,System.Int32)">
            <summary>
            Writes the log event to the underlying logger.
            </summary>
            <param name="callerMemberName">The method or property name of the caller to the method. This is set at by the compiler.</param>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is set at by the compiler.</param>
            <param name="callerLineNumber">The line number in the source file at which the method is called. This is set at by the compiler.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Func{System.Boolean},System.String,System.String,System.Int32)">
            <summary>
            Writes the log event to the underlying logger if the condition delegate is true.
            </summary>
            <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
            <param name="callerMemberName">The method or property name of the caller to the method. This is set at by the compiler.</param>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is set at by the compiler.</param>
            <param name="callerLineNumber">The line number in the source file at which the method is called. This is set at by the compiler.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Writes the log event to the underlying logger if the condition is true.
            </summary>
            <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
            <param name="callerMemberName">The method or property name of the caller to the method. This is set at by the compiler.</param>
            <param name="callerFilePath">The full path of the source file that contains the caller. This is set at by the compiler.</param>
            <param name="callerLineNumber">The line number in the source file at which the method is called. This is set at by the compiler.</param>
        </member>
        <member name="P:NLog.Fluent.LogBuilder.LogEventInfo">
            <summary>
            Gets the <see cref="P:NLog.Fluent.LogBuilder.LogEventInfo"/> created by the builder.
            </summary>
        </member>
        <member name="T:NLog.Fluent.LoggerExtensions">
            <summary>
            Extension methods for NLog <see cref="T:NLog.Logger"/>.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Log(NLog.Logger,NLog.LogLevel)">
            <summary>
            Starts building a log event with the specified <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <param name="logLevel">The log level.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Trace(NLog.Logger)">
            <summary>
            Starts building a log event at the <c>Trace</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Debug(NLog.Logger)">
            <summary>
            Starts building a log event at the <c>Debug</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Info(NLog.Logger)">
            <summary>
            Starts building a log event at the <c>Info</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Warn(NLog.Logger)">
            <summary>
            Starts building a log event at the <c>Warn</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Error(NLog.Logger)">
            <summary>
            Starts building a log event at the <c>Error</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Fatal(NLog.Logger)">
            <summary>
            Starts building a log event at the <c>Fatal</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns></returns>
        </member>
        <member name="T:NLog.LayoutRenderers.XmlLayoutRenderer">
            <summary>
            An Xml Layout Renderer for NLog.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.XmlLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Appends the specified builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="logEventInfo">The log event info.</param>
        </member>
        <member name="T:NLog.Layouts.XmlLayout">
            <summary>
            An Xml Layout for NLog.
            </summary>
        </member>
        <member name="M:NLog.Layouts.XmlLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.XmlLayout"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.XmlLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>
            The rendered layout.
            </returns>
        </member>
        <member name="P:NLog.Layouts.XmlLayout.Properties">
            <summary>
            Gets the custom properties for the log event.
            </summary>
        </member>
        <member name="P:NLog.Layouts.XmlLayout.Renderer">
            <summary>
            Gets the layout renderer.
            </summary>
        </member>
        <member name="T:NLog.Layouts.XmlProperty">
            <summary>
            A custom xml property for the log event.
            </summary>
        </member>
        <member name="M:NLog.Layouts.XmlProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.XmlProperty"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.XmlProperty.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.XmlProperty"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="P:NLog.Layouts.XmlProperty.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:NLog.Layouts.XmlProperty.Layout">
            <summary>
            Gets or sets the layout.
            </summary>
            <value>
            The layout.
            </value>
        </member>
        <member name="T:NLog.Model.LogEvent">
            <summary>
            A log event data transfer object.
            </summary>
        </member>
        <member name="M:NLog.Model.LogEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Model.LogEvent"/> class.
            </summary>
        </member>
        <member name="M:NLog.Model.LogEvent.Populate(NLog.LogEventInfo)">
            <summary>
            Populates from specified <see cref="T:NLog.LogEventInfo"/>.
            </summary>
            <param name="logEventInfo">The log event info.</param>
        </member>
        <member name="M:NLog.Model.LogEvent.Save">
            <summary>Saves this instance to an XML string.</summary>
            <returns>An XML string representing this instance.</returns>
        </member>
        <member name="M:NLog.Model.LogEvent.Save(System.IO.Stream)">
            <summary>Saves this instance the specified <paramref name="stream"/>.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to save this instance to.</param>
        </member>
        <member name="M:NLog.Model.LogEvent.Save(System.IO.TextWriter)">
            <summary>Saves this instance the specified <paramref name="writer"/>.</summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to save this instance to.</param>
        </member>
        <member name="M:NLog.Model.LogEvent.Save(System.Xml.XmlWriter)">
            <summary>Saves this instance the specified <paramref name="writer"/>.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to save this instance to.</param>
        </member>
        <member name="M:NLog.Model.LogEvent.Load(System.String)">
            <summary>Creates an new instance by loading the specified XML.</summary>
            <param name="xml">The XML string representing this instance.</param>
            <returns>A new instance deserialize from the specifed XML.</returns>
        </member>
        <member name="M:NLog.Model.LogEvent.Load(System.IO.Stream)">
            <summary>Creates an new instance by loading the specified stream.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to load the instance from.</param>
            <returns>A new instance deserialize from the specifed reader.</returns>
        </member>
        <member name="M:NLog.Model.LogEvent.Load(System.IO.TextReader)">
            <summary>Creates an new instance by loading the specified reader.</summary>
            <param name="reader">The reader to load the instance from.</param>
            <returns>A new instance deserialize from the specifed reader.</returns>
        </member>
        <member name="M:NLog.Model.LogEvent.Load(System.Xml.XmlReader)">
            <summary>Creates an new instance by loading the specified reader.</summary>
            <param name="reader">The reader to load the instance from.</param>
            <returns>A new instance deserialize from the specifed reader.</returns>
        </member>
        <member name="P:NLog.Model.LogEvent.SequenceID">
            <summary>
            Gets or sets the sequence ID.
            </summary>
            <value>
            The sequence ID.
            </value>
        </member>
        <member name="P:NLog.Model.LogEvent.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="P:NLog.Model.LogEvent.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:NLog.Model.LogEvent.LoggerName">
            <summary>
            Gets or sets the name of the logger.
            </summary>
            <value>
            The name of the logger.
            </value>
        </member>
        <member name="P:NLog.Model.LogEvent.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:NLog.Model.LogEvent.StackTrace">
            <summary>
            Gets or sets the stack trace.
            </summary>
            <value>
            The stack trace.
            </value>
        </member>
        <member name="P:NLog.Model.LogEvent.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:NLog.Model.LogEvent.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="T:NLog.Model.Property">
            <summary>
            A property data transfer object.
            </summary>
        </member>
        <member name="P:NLog.Model.Property.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:NLog.Model.Property.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NLog.Model.Error">
            <summary>
            An error data transfer object.
            </summary>
        </member>
        <member name="M:NLog.Model.Error.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.Model.Error.GetBaseError">
            <summary>
            Gets the base exception detail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Model.Error.Populate(System.Exception)">
            <summary>
            Populates with the specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to create from.</param>
        </member>
        <member name="M:NLog.Model.Error.Create(System.Exception)">
            <summary>
            Creates with the specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to create from.</param>
            <returns></returns>
        </member>
        <member name="P:NLog.Model.Error.TypeName">
            <summary>
            Gets or sets the exception type name.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="P:NLog.Model.Error.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:NLog.Model.Error.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>
            The name of the method.
            </value>
        </member>
        <member name="P:NLog.Model.Error.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>
            The name of the module.
            </value>
        </member>
        <member name="P:NLog.Model.Error.ModuleVersion">
            <summary>
            Gets or sets the module version.
            </summary>
            <value>
            The module version.
            </value>
        </member>
        <member name="P:NLog.Model.Error.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:NLog.Model.Error.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:NLog.Model.Error.StackTrace">
            <summary>
            Gets or sets the stack trace.
            </summary>
            <value>
            The stack trace.
            </value>
        </member>
        <member name="P:NLog.Model.Error.ExceptionText">
            <summary>
            Gets or sets the exception text value.
            </summary>
            <value>
            The exception text.
            </value>
        </member>
        <member name="P:NLog.Model.Error.InnerError">
            <summary>
            Gets or sets the inner exception.
            </summary>
            <value>
            The inner exception.
            </value>
        </member>
        <member name="M:NLog.Targets.LimitedMemoryTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LimitedMemoryTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.LimitedMemoryTarget.Write(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.LimitedMemoryTarget.Limit">
            <summary>
            Gets or sets the number of messages to keep in memory.
            </summary>
        </member>
        <member name="P:NLog.Targets.LimitedMemoryTarget.Logs">
            <summary>
            Gets the list of logs gathered in the <see cref="T:NLog.Targets.LimitedMemoryTarget"/>.
            </summary>
        </member>
        <member name="T:NLog.Xml.Targets.MessageQueueTarget">
            <summary>
            Writes log message to the specified message queue handled by MSMQ.
            </summary>
            <seealso href="http://nlog-project.org/wiki/MessageQueue_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Xml.Targets.MessageQueueTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Xml.Targets.MessageQueueTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Xml.Targets.MessageQueueTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a queue specified in the Queue 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Xml.Targets.MessageQueueTarget.PrepareMessage(NLog.LogEventInfo)">
            <summary>
            Prepares a message to be sent to the message queue.
            </summary>
            <param name="logEvent">The log event to be used when calculating label and text to be written.</param>
            <returns>The message to be sent.</returns>
            <remarks>
            You may override this method in inheriting classes
            to provide services like encryption or message 
            authentication.
            </remarks>
        </member>
        <member name="P:NLog.Xml.Targets.MessageQueueTarget.Queue">
            <summary>
            Gets or sets the name of the queue to write to.
            </summary>
            <remarks>
            To write to a private queue on a local machine use <c>.\private$\QueueName</c>.
            For other available queue names, consult MSMQ documentation.
            </remarks>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Xml.Targets.MessageQueueTarget.Label">
            <summary>
            Gets or sets the label to associate with each message.
            </summary>
            <remarks>
            By default no label is associated.
            </remarks>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Xml.Targets.MessageQueueTarget.CreateQueueIfNotExists">
            <summary>
            Gets or sets a value indicating whether to create the queue if it doesn't exists.
            </summary>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Xml.Targets.MessageQueueTarget.Recoverable">
            <summary>
            Gets or sets a value indicating whether to use recoverable messages (with guaranteed delivery).
            </summary>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Xml.Targets.MessageQueueTarget.Encoding">
            <summary>
            Gets or sets the encoding to be used when writing text to the queue.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Xml.Targets.MessageQueueTarget.UseXmlEncoding">
            <summary>
            Gets or sets a value indicating whether to use the XML format when serializing message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
    </members>
</doc>
