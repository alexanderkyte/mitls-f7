module Encode

open Bytes
open TLSInfo
open TLSConstants


//------------------------------------------------------------------------------------------------------
// Interface towards ENC 
//------------------------------------------------------------------------------------------------------
function val PlainLength: e:epoch * tlen:nat -> plen:nat
private type (;e:epoch,tlen:nat) plain = {p: (x:bytes){Length(x) = PlainLength(e,tlen) /\ tlen <= max_TLSCipher_fragment_length}}
val plain: e:epoch{not Auth(e)} -> tlen:nat{tlen <= max_TLSCipher_fragment_length} -> b:bytes{Length(b) = PlainLength(e,tlen)} -> (;e,tlen) plain
val repr:  e:epoch{not Safe(e)} -> tlen:nat -> (;e,tlen) plain -> b:bytes{Length(b) = PlainLength(e,tlen)}


val pad: l:int -> b:bytes{Length(b) = l}


//------------------------------------------------------------------------------------------------------
// Interface towards AEAD
//------------------------------------------------------------------------------------------------------
function val IVSize: epoch -> nat
val ivLength: e:succEpoch -> l:nat{l=IVSize(e)}
type (;e:epoch) adata = (;e)AEADPlain.adata

// Plaintext of MAC
private type (;e:epoch) MACPlain = {macP:bytes}
// Result of MAC
private type (;e:epoch) tag = {macT:bytes}

function val MACPlain : 'a * 'b * 'c * 'd -> 'e
val macPlain: e:epoch -> r:range -> 
  ad:(;e)AEADPlain.adata ->
  f:(;e,ad,r)AEADPlain.plain ->
  p:(;e)MACPlain{p = MACPlain(e,r,ad,f)}

predicate MACed of e:epoch * (;e) MAC.key * (;e) MACPlain * (;e) tag

val mac: e:succEpoch -> k:(;e) MAC.key -> t:(;e) MACPlain{?r,ad,f. t = MACPlain(e,r,ad,f)}
  -> tag:(;e) tag{Length(tag.macT) = MacKeySize(CipherSuiteMACAlg(EpochSI(e).cipher_suite)) /\ MACed(e,k,t,tag)}
val verify: e:succEpoch -> k:(;e) MAC.key -> text:(;e) MACPlain -> tag:(;e) tag ->
  v:bool{v = true => (?r,ad,f. text = MACPlain(e,r,ad,f)) /\ (MACed(e,k,text,tag) => v = true)}

// Padding computations
private val blockAlignPadding: e:succEpoch -> nat -> nat
function val RangeCipher: epoch * range -> nat // not injective
private val rangeCipher: e:succEpoch -> r:range -> tlen:nat{tlen = RangeCipher(e,r) /\ tlen <= max_TLSCipher_fragment_length}
private val cipherRange: e:succEpoch -> tlen:nat{tlen <= max_TLSCipher_fragment_length} -> r:range{tlen = RangeCipher(e,r)}

predicate val Encoded: 'e * 'a * 'b * 'c * 'd -> bool
val encode: e:succEpoch{IsAEADCiphersuite(EpochSI(e).cipher_suite)} ->
	rg:range -> ad:(;e) AEADPlain.adata -> pl:(;e,ad,rg) AEADPlain.plain -> tag:(;e) tag ->
	(tlen:nat * p:(;e,tlen) plain){tlen=RangeCipher(e,rg) /\ tlen <= max_TLSCipher_fragment_length /\ Encoded(e,ad,pl,tag,p)}
val decode: e:succEpoch{IsAEADCiphersuite(EpochSI(e).cipher_suite)} ->
	ad:(;e) AEADPlain.adata -> tlen:nat -> p:(;e,tlen) plain ->
	(rg:range * pl:(;e,ad,rg)AEADPlain.plain * tag:(;e)tag * ok:bool){
          tlen=RangeCipher(e,rg) /\
          (Encoded(e,ad,pl,tag,p) => ok = true)}
val encodeNoPad: e:succEpoch{IsOnlyMACCiphersuite(EpochSI(e).cipher_suite) \/
                    CipherSuiteENCAlg(EpochSI(e).cipher_suite) = RC4_128} ->
	rg:range -> ad:(;e) AEADPlain.adata -> (;e,ad,rg) AEADPlain.plain -> (;e) tag ->
	(tlen:nat * (;e,tlen) plain){tlen=RangeCipher(e,rg) /\ tlen <= max_TLSCipher_fragment_length}
val decodeNoPad: e:succEpoch{IsOnlyMACCiphersuite(EpochSI(e).cipher_suite) \/
                    CipherSuiteENCAlg(EpochSI(e).cipher_suite) = RC4_128} ->
	ad:(;e) AEADPlain.adata -> tlen:nat -> (;e,tlen) plain ->
	(rg:range * (;e,ad,rg)AEADPlain.plain * (;e)tag){tlen=RangeCipher(e,rg)}

//------------------------------------------------------------------------------------------------------
// Auxiliary definitions and Assumes for typing
//------------------------------------------------------------------------------------------------------

function val MsgBytes: e:epoch * (;e) adata * bytes -> bytes
private assume !e,ad,x. MsgBytes(e,ad,x) = (ad @| IntBytes(2,Length(x))) @| x 
private assume !e,ad1,x1,ad2,x2. (Length(ad1) = Length(ad2) /\
                        MsgBytes(e,ad1,x1) = MsgBytes(e,ad2,x2)) => 
                       (ad1 = ad2 /\ x1=x2)

private assume !e,tlen,pl. MAC.Msg(e,pl) <=>
  (not Auth(e) \/
     (?ad,x. Length(ad) = (8 + StatefulPlain.ADLength(e)) /\
	  pl = MsgBytes(e,ad,x)))

ask !e,t. not Auth(e) => MAC.Msg(e,t)


private assume !e. IVSize(e) >= 0
assume !e,si. si = EpochSI(e) =>
	( si.protocol_version = SSL_3p0 \/ si.protocol_version = TLS_1p0
		=> IVSize(e) = 0 ) /\
	( si.protocol_version = TLS_1p1 \/ si.protocol_version = TLS_1p2
		=> IVSize(e) = BlockSize(CipherSuiteENCAlg(si.cipher_suite)) )
assume !e,si,tlen. si = EpochSI(e) =>
	( IsOnlyMACCiphersuite(si.cipher_suite) => PlainLength(e,tlen) = tlen ) /\
    ( IsAEADCiphersuite(si.cipher_suite) /\ tlen >= IVSize(e) =>
	  PlainLength(e,tlen) = tlen - IVSize(e) )

//CF Comments:
//CF 
//CF AP and CF agree: Encode is indexed by (e and) its public length, after encoding (and not by range).
//CF We define function from:
//CF - public length of ciphertext to public length of encoded plaintext (either identity, or minus iv length)
//CF - from tlen to public range of decoded authenticated fragment
//CF - (and the inverse functions)
