module RSAKey

// This module defines RSA keys
// but not their use for public-key encryption: see RSA
// (We use two modules to break a circular dependency)

open Bytes

private type sk = { sk : CoreACiphers.sk } (* secret (decryption) key, abstract for honest keys *)
type pk = { pk : CoreACiphers.pk } (* public (encryption) key, bytes are accessible *)

type modulus  = bytes
type exponent = bytes

//marks honestly generated keys
predicate Honest of pk
val honest: pk:pk -> b:bool {b=true <=> Honest(pk)}

predicate Strong of TLSConstants.ProtocolVersion 
val strong: pv:TLSConstants.ProtocolVersion  -> b:bool {b=true <=> Strong(pv)}

//marks relationship between secret and public keys
predicate type pred = SK_PK of sk * pk
function val PK: sk -> pk
private definition !sk,pk. pk=PK(sk) <=> SK_PK(sk,pk)

val gen: unit -> p:pk * s:sk{p = PK(s)}
val coerce: p:pk {not Honest(p)}     -> CoreACiphers.sk -> s:sk{p = PK(s)}

//in a model with adversarially provided keys and static corruption, leak is not essential
//val leak:   s:sk {not Honest(PK(s))} -> CoreACiphers.sk 

// shouldn't be needed as representation of pk need not be private
val repr_of_rsapkey : pk -> CoreACiphers.pk

// morally private, used only in RSA.fs
val repr_of_rsaskey : sk -> CoreACiphers.sk

// shouldn't be needed as representation of pk need not be private
val create_rsapkey : modulus * exponent -> pk

// replaced by coerce
// val create_rsaskey : modulus * exponent -> sk