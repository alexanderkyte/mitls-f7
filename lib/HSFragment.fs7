module HSFragment
open Bytes
open TLSInfo
open Range

private type (;ki:id,r:range) fragment = {frag: (;r)rbytes}
private type (;ki:id) stream = {sb:bytes list}

predicate Sent of ki:id * (;ki) stream * r:range * (;ki,r)fragment
assume !ki,s,r,f. Sent(ki,s,r,f) (*KB No Handshake/Alert/CCS Authentication *)

type (;e:id,s:(;e)stream,r:range)plain = f:(;e,r)fragment{AuthId(e) => Sent(e,s,r,f)}

function val Payload: e:id * r:range * (;e,r)fragment -> cbytes
private definition !e,r,f. Payload(e,r,f) = B(f.frag)

function val EmptyStream: e:id -> (;e)stream
private definition !e. EmptyStream(e) = {sb = []}
val init: e:id -> s:(;e)stream{s = EmptyStream(e)}

val fragmentPlain: ki:id -> r:range -> b:(;r) rbytes -> f:(;ki,EmptyStream(ki),r) plain{B(b) = Payload(ki,r,f)}
val fragmentRepr:  ki:id -> r:range -> f:(;ki,r) fragment -> b:(;r) rbytes{B(b) = Payload(ki,r,f)}

//AP Unless the two streams are the same, this functions breaks the streaming
//AP authentication property (which we currently don't prove for HS/CCS/Alert) 
val reStream: e:id -> s:(;e)stream -> r:range -> p:(;e,s,r)plain -> s':(;e)stream ->
	p':(;e,s',r)plain{Payload(e,r,p) = Payload(e,r,p')}

val widen: e:id -> r0:range -> r1:range {r1 = RangeClass(e,r0)} -> 
    f0:(;e,r0)fragment -> f1:(;e,r1)fragment{Payload(e,r0,f0) = Payload(e,r1,f1) /\ !s. Sent(e,s,r0,f0) => Sent(e,s,r1,f1)}

function val Extend: e:id * s:(;e)stream * r:range * (;e,r)fragment -> 'a // (;e)stream
private definition !ki,s,r,f. Extend(ki,s,r,f) = {sb = f.frag :: s.sb }
val extend: e:id -> s:(;e)stream -> r:range -> f:(;e,r)fragment -> s':(;e)stream{s'=Extend(e,s,r,f)}

 

