(* Copyright (C) 2012--2014 Microsoft Research and INRIA *)

module ENC

(* Bulk encryption for TLS record, agile & assumed conditionally CPA with "Encode" for plaintexts *) 
(* This module is idealized *)
(* TODO write a well-typed ideal functionality; reduce it to its non-agile underlying algorithms, e.g. AES-CBC and GCM *) 

open Bytes
open Encode 
open TLSInfo
open TLSConstants
open Error
open TLSError
open Range


// ciphers consist of one or more blocks of bytes.
type cipher = b:bytes{Length(b) <= max_TLSCipher_fragment_length}

private type (;ki:id) key = {k:bytes}

//CF should actually be 
//CF private type (;ki:id) key' = 
//CF   | GoodKey_A of ideal_A.key 
//CF   | GoodKey_B of ideal_B.key
//CF   | BadKey_A 

type iv = bytes //CF could specify its size
private type (;ki:id) iv3 =
	| SomeIV of iv // SSL_3p0 and TLS_1p0
	| NoIV         // TLS_1p0 and TLS_1p2

private val someIV: ki:id -> iv:iv -> (;ki)iv3
private val noIV: ki:id -> (;ki)iv3

private type (;ki:id) blockState =
    {key: (;ki)key;
     iv: (;ki)iv3}
private type (;ki:id) streamState = 
    {skey: (;ki)key; // Ghost: Only stored so that we can LEAK it
     sstate: CoreCiphers.rc4engine}

private val updateIV: i:id -> (;i)blockState -> (;i)iv3 -> (;i)blockState

private type (;ki:id,rw:rw)state =	
    | BlockCipher of (;ki)blockState
    | StreamCipher of (;ki)streamState

type (;ki:id)encryptor = (;ki,Writer)state
type (;ki:id)decryptor = (;ki,Reader)state

// We do not use the state, but an abstract ID over it, so that we can link
// encryptor and decryptor states
private function val StateID: ki:id * rw:rw * (;ki,rw)state -> int

val streamCipher: ki:id -> r:rw -> s:(;ki)streamState -> (;ki,r) state
val blockCipher: ki:id -> r:rw -> s:(;ki)blockState -> (;ki,r) state

//val GEN:    ki:id -> (e:(;ki)encryptor{StateID(ki,Writer,e)=0}) * (d:(;ki)decryptor{StateID(ki,Reader,d)=0})
val GEN:    ki:id -> (e:(;ki)encryptor) * (d:(;ki)decryptor) //MK less refinements for testing
val LEAK:   ki:id{not SafeId(ki)} -> rw:rw -> (;ki,rw)state -> key:bytes * iv:bytes
val COERCE: ki:id{not SafeId(ki)} -> rw:rw -> key:bytes -> iv:bytes -> (;ki,rw)state

(* an abstract event recording all encryption results. *)
type event = ENCrypted of
  e:id * ad:(;e)LHAEPlain.adata * c:cipher * p:(;e,ad,CipherRangeClass(e,Length(c))) plain
//predicate val ENCrypted:
//  (e:id * ad:(;e)LHAEPlain.adata * c:cipher * 'a) -> bool // p:(;e,ad,CipherRangeClass(e,Length(c))) plain

// TODO: We need to refine cipher before applying CPA
//CF we miss a refinement synchronizing ad and s
val ENC: ki:id -> s:(;ki) encryptor -> ad:(;ki)LHAEPlain.adata -> r:range ->
  p:(;ki,ad,r)plain -> 
  ( (s': (;ki) encryptor (*MK unspecified for now: {StateID(ki,Writer,s') = StateID(ki,Writer,s)+1} *)
    ) *
    (c : cipher {(SafeId(ki) => ENCrypted(ki,ad,c,p)) /\ Length(c)=TargetLength(ki,r)}
    ) 
  )

//MK I don't see how we can prove this by typing.
//ask !ki,ad,c,p,p'. ENCrypted(ki,ad,c,p) /\ ENCrypted(ki,ad,c,p') => p=p'

val DEC: ki:id -> s:(;ki) decryptor -> ad:(;ki)LHAEPlain.adata ->
  c:cipher
  { (SafeId(ki) => ?p'. ENCrypted(ki,ad,c,p')) /\ Length(c) >= MinTlen(ki) /\ Length(c) <= max_TLSCipher_fragment_length } -> 
  ( (s': (;ki) decryptor (*MK unspecified for now: {StateID(ki,Reader,s') = StateID(ki,Reader,s)+1}*) )  *
    (p : (;ki,ad,CipherRangeClass(ki,Length(c)))plain (*MK: ignoring this for now: {!p'. ENCrypted(ki,ad,c,p') => p=p'}*) ))

type entry = 
  (ki:id * ad:(;ki)LHAEPlain.adata * rg:range * c:cipher * p:(;ki,ad,rg)plain)
  { ENCrypted(ki,ad,c,p) /\ Length(c) = TargetLength (ki, rg) } 

val addtolog: e:entry -> l:entry list ref -> entry list

val log: entry list ref

val cfind: e:id -> ad:(;e)LHAEPlain.adata -> c:cipher -> xs: entry list -> (rg:range * p:(;e,ad,rg) Encode.plain){ENCrypted(e,ad,c,p) /\ Length(c) = TargetLength (e, rg)}

//MK is this outdated? Should do some cleanup.
(* AP
val ENC: ki:id -> s:(;ki) encryptor -> tlen:int -> p:(;ki,tlen) plain -> 
  ( s':(;ki)encryptor *
   c:cipher{  StateID(s') = StateID(s)+1 /\  ENCrypted(ki,tlen,StateID(s),p,c) /\ Length(c)=tlen})

  (s':(;ki)decryptor *
   p:(;ki,Length(c))plain{  StateID(s') = StateID(s)+1 /\  !p'. ENCrypted(ki,Length(c),StateID(s),p',c) => p=p'})
*)



private val lastblock:  alg:blockCipher -> c:cipher {Length(c)>=BlockSize(alg)} -> bytes

// internal function declarations 
//TODO state should also have a role, but GENOne returns the state for both roles.
//private val GENOne: i:id -> 'a //(;i) state
private val cbcenc: blockCipher -> CoreCiphers.key -> CoreCiphers.iv -> bytes -> bytes 
private val cbcdec: blockCipher -> CoreCiphers.key -> CoreCiphers.iv -> bytes -> bytes

val ENC_int: i:id -> s:(;i)encryptor -> tlen:nat{!enc,mac. i.aeAlg = MtE(CBC_Stale(enc),mac) => tlen>=BlockSize(enc)} -> bytes -> 
( (s': (;i) encryptor (*MK unspecified for now: {StateID(i,Writer,s') = StateID(i,Writer,s)+1} *)
  ) * 
  (c:cipher {Length(c)=tlen}
  )  
)

private val DEC_int: ki:id -> s:(;ki) decryptor -> 
					 c:cipher {Length(c) >= MinTlen(ki) /\ Length(c) <= max_TLSCipher_fragment_length /\ (!enc,mac. ki.aeAlg = MtE(CBC_Stale(enc),mac) \/ ki.aeAlg = MtE(CBC_Fresh(enc),mac) => Length(c)>=BlockSize(enc)) } -> 
					 (;ki) decryptor * (;PlainLength(ki,Length(c)))lbytes //MK removed: ad:(;ki)LHAEPlain.adata