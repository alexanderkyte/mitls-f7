module DataStream

open TLSInfo
open Bytes
open Error

val max_TLSPlaintext_fragment_length  : n:nat{n = 16384}
val max_TLSCompressed_fragment_length : n:nat{n = max_TLSPlaintext_fragment_length  + 1024}
val max_TLSCipher_fragment_length     : n:nat{n = max_TLSCompressed_fragment_length + 1024}
val fragmentLength                    : n:nat{n = max_TLSPlaintext_fragment_length}

type            range  = low:nat * high:nat { low <= high }
type (;r:range) rbytes = b:bytes { ?l,h. r = (l,h) /\ l <= Length(b) /\ Length(b) <= h }
 
function val Sum: range * range -> range
private assume !l0, h0, l1, h1. Sum((l0, h0), (l1, h1)) = (l0+l1, h0+h1)

val rangeSum   : r0:range -> r1:range -> r:range{r = Sum(r0,r1)}
val splitRange : ki:succEpoch -> r:range -> (r0:range * r1:range){r0 = r /\ r1 = (0, 0) /\ r = Sum(r0, r1)} 

private type (;ki:epoch) stream = { sb: bytes list }
private type (;ki:epoch, h:(;ki)stream, r:range) delta = { contents: (;r) rbytes }

predicate EmptyStream of ki:epoch * (;ki) stream 

function val ExtendStream: 'a * 'b * 'c * 'd -> 'e
assume !ki,s. EmptyStream(ki,s) <=> s = { sb = [] }
assume !ki,s,r,d. ExtendStream(ki,s,r,d) = { sb = d.contents :: s.sb } 

ask !ki,s,s'. EmptyStream(ki,s) /\ EmptyStream(ki,s') => s = s'

private val createDelta: 
  ki:epoch -> s:(;ki) stream -> r:range -> 
  b:(;r) rbytes -> c: (;ki,s,r) delta  

val init: ki:epoch -> s:(;ki) stream{EmptyStream(ki,s)}

val append: 
  ki:epoch -> s: (;ki) stream -> r:range ->
  d:(;ki,s,r) delta -> s':(;ki) stream{s' = ExtendStream(ki,s,r,d)}

val deltaPlain: 
  ki:epoch{not Auth(ki)} -> s:(;ki) stream -> r:range -> 
  b:(;r) rbytes -> c: (;ki,s,r) delta  

val deltaRepr: 
  ki:epoch{not Safe(ki)} -> s:(;ki) stream -> r:range -> 
  c: (;ki,s,r) delta -> (;r) rbytes

val split: ki:epoch -> s:(;ki) stream -> 
  r0:range -> r1:range -> d:(;ki,s,Sum(r0,r1)) delta -> 
  (d0:(;ki,s,r0) delta * d1:(;ki,ExtendStream(ki,s,r0,d0),r1) delta)
