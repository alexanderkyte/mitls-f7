module StatefulPlain

(* 'plain' module for Stateful AEAD *) 

open Bytes
open TLSConstants
open TLSInfo
open Range

(* The authenticated record header includes the content type + the protocol version if > SSL3. *)

function val ADLength: id -> nat
private definition !i. 
    (i.pv = SSL_3p0  /\ ADLength(i) = 1) \/
	(i.pv  <> SSL_3p0 /\ ADLength(i) = 3)
ask !i. 0 <= ADLength(i) // needed for parsing and not entailed by ADLength's type

type (;i:id) adata = (b:bytes){Length(b) = ADLength(i)} 

function val ADBytes: id * ContentType -> cbytes //(;i)StatefulPlain.adata
private definition !i,ct.
	(PvOfId(i)  = SSL_3p0  => ADBytes(i,ct) = CTBytes(ct) ) /\
	(PvOfId(i) <> SSL_3p0  => ADBytes(i,ct) = (CTBytes(ct) @| VersionBytes(i.pv )))

function val ParseAD: i:id * cbytes -> ContentType
private definition !b,i,ct. ParseAD(i,ADBytes(i,ct)) = ct

//CF why do we need to parse AD again? 
val makeAD:  i:id -> ct:ContentType -> ad:(;i)adata{B(ad)=ADBytes(i,ct) /\ ParseAD(i,B(ad)) = ct}
private val parseAD: i:id -> ad:(;i)adata -> ct:ContentType{ParseAD(i,B(ad))=ct}

private type (;i:id,ad:cbytes,r:range) fragment = {contents: (;i,ParseAD(i,ad),r)TLSFragment.fragment}

function val Payload: i:id * ad:cbytes * r:range * (;i,ad,r)fragment -> cbytes
private definition !i,ad,r,f.
    Payload(i,ad,r,f) = TLSFragment.Payload(i,ParseAD(i,ad),r,f.contents)
//TODO review!

(* We logically define the id history by induction on sent fragments. *)

// The sequence of messages
type (;i:id) prehistory = (ad:(;i)adata * r:range * f:(;i,B(ad),r)fragment) list

// The message sequence number (kept independently, as this is not ghost state)
function val HLength: i:id * (;i)prehistory -> nat
private definition !i.          HLength(i,[]) = 0
private definition !i,h,ad,r,f. HLength(i,(ad,r,f)::h) = HLength(i,h)+1
 
predicate StAEHistory of i:id * (;i)prehistory

type (;i:id)history = (sn:nat * ph:(;i)prehistory){sn = HLength(i,ph) /\ (AuthId(i) => StAEHistory(i,ph))}
function val SeqN: i:id * (;i)history -> nat
definition !i,sn,h. SeqN(i,(sn,h)) = sn

function val EmptyHistory: i:id -> (;i) history
function val ExtendHistory: i:id * ad:(;i)adata * h:(;i) history * r:range * (;i,ad,r) fragment -> 'a //(;i)history
private definition !i. EmptyHistory(i) = (0,[])
private definition !i,n,h,d,r,f. ExtendHistory(i,d,(n,h),r,f) = (n+1,(d,r,f)::h)

predicate Sent of i:id * ad:cbytes *  h:(;i)history * r:range * (;i,ad,r)fragment

private definition !i. StAEHistory(i,[])
private definition !i,ad,sn,h,r,f. 
    (StAEHistory(i,h) /\ Sent(i,B(ad),(sn,h),r,f)) => StAEHistory(i,(ad,r,f)::h)

//CF how do we prove it? where do we use it?
theorem !i,ad,sn,h,r,f.
    Sent(i,B(ad),(sn,h),r,f) => (StAEHistory(i,h) /\ HLength(i,h) = sn)

//----------------------------------------------------MK Everything until here is completely epoch free.

//MK fragment erroneously indexed by epoch?!
function val StAEToRecord: i:id * ct:ContentType * r:range * f:(;i,ADBytes(i,ct),r)fragment -> 'a //(;i,ct,r)TLSFragment.fragment
private definition !i,ct,r,f. StAEToRecord(i,ct,r,f) = f.contents 

function val Multiplexed: e:epoch * (;Id(e)) history -> 'b //(;e)TLSFragment.history
definition !e. 
    Multiplexed(e,EmptyHistory(Id(e))) = TLSFragment.EmptyHistory(e)
definition !e,ad,sh,r,f,ct. 
    Multiplexed(e,ExtendHistory(Id(e),ad,sh,r,f)) = 
    TLSFragment.ExtendHistory(e,ParseAD(Id(e),B(ad)),
                   Multiplexed(e,sh),
                   r,StAEToRecord(e,ParseAD(Id(e),B(ad)),r,f))
(* CF delete?
definition !e,ad,sh,sh',h,ct,r,f. 
  (sh' = ExtendHistory(e,ad,sh,r,f) /\
   ct = ParseAD(e,B(ad)) /\ //ParseAD(e,B(ad)),
//   B(ad) =  ADBytes(e,ct) /\
   h = Multiplexed(e,sh)) => 
  (Multiplexed(e,sh') = TLSFragment.ExtendHistory(e,ct,h,r,StAEToRecord(e,ct,r,f)))
  *)

private definition !e,ad,sh,r,f. 
    Sent(Id(e),ad,sh,r,f) <=> 
    TLSFragment.RecordSent(e,ParseAD(Id(e),ad),Multiplexed(e,sh),r,f.contents)

//----------------------------------------------------MK End of epoch id mixture.

//------------------------------------------------------------------------------------------------------
// `Plain' interface towards StatefulLHAE, encapsulating TLS-specific headers and content types
//------------------------------------------------------------------------------------------------------

type (;i:id,ad:(;i)adata,h:(;i)history,r:range) plain =
	f:(;i,B(ad),r)fragment{AuthId(i) => Sent(i,B(ad),h,r,f)}

val plain:
  i:id{not AuthId(i)} -> h:(;i)history -> ad:(;i)adata -> r:range -> 
  b:(;r)rbytes -> p:(;i,ad,h,r) plain {B(b) = Payload(i,B(ad),r,p)}
val repr:
  i:id{not SafeId(i)} -> h:(;i)history -> ad:(;i)adata -> r:range ->
  p:(;i,ad,h,r) plain -> b:(;r)rbytes {B(b) = Payload(i,B(ad),r,p)}
val reprFragment: 
  i:id{not SafeId(i)} -> ad:(;i)adata -> r:range ->
  f:(;i,B(ad),r) fragment -> b:(;r)rbytes {B(b) = Payload(i,B(ad),r,f)}

(*
val widen:
  e:epoch -> ad:(;Id(e))adata -> r:range -> 
  f:(;Id(e),B(ad),r) fragment -> 
  f':(;Id(e),B(ad),RangeClass(Id(e),r)) fragment{
    Payload(Id(e),B(ad),r,f) = Payload(Id(e),B(ad),RangeClass(Id(e),r),f') /\
    !h. Sent(Id(e),B(ad),h,r,f) => Sent(Id(e),B(ad),h,RangeClass(Id(e),r),f')}
*)

val widen:
  i:id -> ad:(;i)adata -> r:range -> 
  f:(;i,B(ad),r) fragment -> 
  f':(;i,B(ad),RangeClass(i,r)) fragment{
    Payload(i,B(ad),r,f) = Payload(i,B(ad),RangeClass(i,r),f')}
(* /\
    !e',h. Sent(Id(e),B(ad),h,r,f) => Sent(Id(e'),B(ad),h,RangeClass(e,r),f')}
*)
//------------------------------------------------------------------------------------------------------
// internal interface towards TLSFragment
//------------------------------------------------------------------------------------------------------

val emptyHistory: i:id -> h:(;i)history{h = EmptyHistory(i)}
val extendHistory: i:id -> ad:(;i)adata ->
	h:(;i)history -> r:range -> f:(;i,ad,h,r)plain ->
	h':(;i)history{h' = ExtendHistory(i,ad,h,r,f)}

//------------------------------------------------------------------------------------------------------
// Auxiliary definitions for typing
//------------------------------------------------------------------------------------------------------

private val consHistory: 
    i:id -> h:(;i)prehistory -> ad:(;i)adata -> r:range -> 
	f:(;i,B(ad),r)fragment -> h':(;i)prehistory{h' = (ad,r,f)::h}

//CF Sent grows linearly
//CF assume !i.          Sent(i,(0,[]))
//CF assume !i,h,ad,r,x. Sent(i,ExtendHistory(i,h,ad,r,x)) => Sent(i,h)
//CF assume !i,ad,h,h',r,f. (AuthId(i) /\ Sent(i,ad,h,r,f) /\ Sent(i,ad,h',r,f) /\ SeqN(i,h) = SeqN(i,h')) => h = h'

//CF usage? 
assume !i,ad,h,h',r,f. (AuthId(i) /\ StAEHistory(i,h) /\ StAEHistory(i,h') /\ HLength(i,h) = HLength(i,h')) => h = h'

//----------------------------------------------------MK Everything until here is epoch free since previous marker except for comments.

//CF usage? 
val RecordPlainToStAEPlain: 
    e:epoch -> ct:ContentType -> 
    ad:(;Id(e))adata{B(ad) = ADBytes(Id(e),ct)}  -> 
    h:(;e) TLSFragment.history ->
    st:(;Id(e)) history{h = Multiplexed(e,st)} -> 
    rg:range -> 
    f:(;e,ct,h,rg) TLSFragment.plain -> 
    sf:(;Id(e),ad,st,rg) plain{f = StAEToRecord(e,ct,rg,sf)}

val StAEPlainToRecordPlain: 
    e:epoch -> ct:ContentType -> ad:(;Id(e))adata{B(ad) = ADBytes(Id(e),ct)} -> 
    h:(;e) TLSFragment.history ->
    st:(;Id(e)) history{h = Multiplexed(e,st)} -> rg:range -> 
    d:(;Id(e),ad,st,rg) plain ->
    f:(;e,ct,h,rg) TLSFragment.plain{f=StAEToRecord(e,ct,rg,d)}
