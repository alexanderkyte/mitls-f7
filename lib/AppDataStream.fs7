module AppDataStream

open TLSInfo
open Bytes
open Error
open DataStream

private type (;ki:epoch) input_buffer =
	h:(;ki) stream * (r:range * f:(;ki,r)Fragment.fragment
	{Auth(ki) => Fragment.Fragment(ki,h,r,f)}) option
private type (;ki:epoch) output_buffer = h:(;ki) stream * (r:range * (;ki,h,r) delta) option

private type (;ci:ConnectionInfo) app_state = {
    app_incoming: (;ci.id_in) input_buffer;
    app_outgoing: (;ci.id_out) output_buffer;
}

private function val AppInStream_int: e:epoch * (;e)input_buffer -> 'a
private definition !e,st,d. AppInStream_int(e,(st,d)) = st
private function val AppOutStream_int: e:epoch * (;e)output_buffer -> 'a
private definition !e,st,d. AppOutStream_int(e,(st,d)) = st

function val AppInStream:  ci:ConnectionInfo * (;ci)app_state -> 'a //(;ci.id_in) stream
function val AppOutStream: ci:ConnectionInfo * (;ci)app_state -> 'a //(;ci.id_out)stream
private definition !ci,s. AppInStream(ci,s) = AppInStream_int(ci.id_in,s.app_incoming)
private definition !ci,s. AppOutStream(ci,s) = AppOutStream_int(ci.id_out,s.app_outgoing)

private function val AppInBuf_int: e:epoch * (;e)input_buffer -> 'a
private definition !e,st,d. AppInBuf_int(e,(st,d)) = d
private function val AppOutBuf_int: e:epoch * (;e)output_buffer -> 'a
private definition !e,st,d. AppOutBuf_int(e,(st,d)) = d

function val AppInBuf:  ci:ConnectionInfo * (;ci)app_state -> 'a //(range * Fragment.fragment) option
function val AppOutBuf: ci:ConnectionInfo * (;ci)app_state -> 'a //(range * delta) option
private definition !ci,s. AppInBuf(ci,s) = AppInBuf_int(ci.id_in,s.app_incoming)
private definition !ci,s. AppOutBuf(ci,s) = AppOutBuf_int(ci.id_out,s.app_outgoing)

val inStream:  ci:ConnectionInfo -> s:(;ci)app_state -> st:(;ci.id_in) stream{st = AppInStream(ci,s) }
val outStream: ci:ConnectionInfo -> s:(;ci)app_state -> st:(;ci.id_out)stream{st = AppOutStream(ci,s)}

val init: ci:ConnectionInfo ->
	s:(;ci)app_state{AppInBuf(ci,s) = None /\ AppOutBuf(ci,s) = None /\
		EmptyStream(ci.id_in,AppInStream(ci,s)) /\ EmptyStream(ci.id_out,AppOutStream(ci,s))}

val writeAppData: ci:ConnectionInfo -> s:(;ci)app_state{AppOutBuf(ci,s) = None} ->
	r:range -> d:(;ci.id_out,AppOutStream(ci,s),r)delta ->
	s':(;ci)app_state{AppOutBuf(ci,s') = Some((r,d)) /\
		AppInBuf(ci,s') = AppInBuf(ci,s) /\
		AppOutStream(ci,s') = AppOutStream(ci,s) /\
		AppInStream (ci,s') = AppInStream (ci,s)}
		
val emptyOutgoingAppData: ci:ConnectionInfo -> s:(;ci)app_state ->
	((r:range * d:(;ci.id_out, AppOutStream(ci,s), r)delta) option) *
		s':(;ci)app_state{AppOutBuf(ci,s') = None /\
		AppInBuf(ci,s') = AppInBuf(ci,s) /\
		AppOutStream(ci,s') = AppOutStream(ci,s) /\
		AppInStream (ci,s') = AppInStream (ci,s)}

val next_fragment: ci:ConnectionInfo -> s:(;ci)app_state ->
	ro:((r:range * f:(;ci.id_out,r)Fragment.fragment * s':(;ci)app_state)
	{(Auth(ci.id_out) => Fragment.Fragment(ci.id_out,AppOutStream(ci,s),r,f) ) /\
	 AppOutStream(ci,s') = Fragment.Extend(ci.id_out,AppOutStream(ci,s),r,f) /\
	 AppInBuf(ci,s') = AppInBuf(ci,s) /\
	 AppInStream (ci,s') = AppInStream (ci,s)}) option{ro = None => AppOutBuf(ci,s) = None}

val recv_fragment: ci:ConnectionInfo -> s:(;ci)app_state -> r:range ->
	f:(;ci.id_in,r)Fragment.fragment{Auth(ci.id_in) =>
		Fragment.Fragment(ci.id_in,AppInStream(ci,s),r,f)} ->
	s':(;ci)app_state{AppInBuf(ci,s') = Some((r,f)) /\
		AppOutStream(ci,s') = AppOutStream(ci,s) /\
		AppInStream (ci,s') = AppInStream (ci,s)}

val readAppData: ci:ConnectionInfo -> s:(;ci)app_state ->
	((r:range * (;ci.id_in,AppInStream(ci,s),r)delta) option * s':(;ci)app_state){AppInBuf(ci,s') = None /\
		AppOutStream(ci,s') = AppOutStream(ci,s) /\
		( (AppInBuf(ci,s) = None /\ AppInStream(ci,s') = AppInStream(ci,s)) \/
		  (?r,f. AppInBuf(ci,s) = Some((r,f)) /\ AppInStream(ci,s') = Fragment.Extend(ci.id_in,AppInStream(ci,s),r,f))
		)}

val reset_outgoing: ci:ConnectionInfo -> s:(;ci)app_state ->
	ci':ConnectionInfo{ci'.role = ci.role /\ ci'.id_in = ci.id_in} ->
	s':(;ci')app_state{AppOutBuf(ci',s') = None /\ 
            EmptyStream(ci'.id_out,AppOutStream(ci',s')) /\
            AppInStream(ci',s') = AppInStream(ci,s)}
val reset_incoming: ci:ConnectionInfo -> s:(;ci)app_state ->
	ci':ConnectionInfo{ci'.role = ci.role /\ ci'.id_out = ci.id_out} ->
	s':(;ci')app_state{AppInBuf(ci',s') = None /\ 
            EmptyStream(ci'.id_in,AppInStream(ci',s')) /\
            AppOutStream(ci',s') = AppOutStream(ci,s)}

