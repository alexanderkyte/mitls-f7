(* Copyright (C) 2012--2014 Microsoft Research and INRIA *)

module DataStream

(* Application-level bytes streams exchanged over TLS;            *)
(* depending on the safety of their indexes,                      *) 
(* these streams are treated abstractly by our TLS implementation *)

open TLSInfo
open Bytes
open Error
open TLSError
open Range

/// Auxiliary functions for ranges

private val min: a:nat -> b:nat -> c:nat{(a<=b /\ c=a) \/ (a>b /\ c=b)}

val maxLHPad: id -> l:nat{l < fragmentLength} -> nat
val splitRange: e:succEpoch -> r:range -> (r0:range * r1:range){r = Sum(r0,r1) /\ RangeFragment(Id(e),r0)}

/// Bytestreams

// we communicate deltas indexed by all preceding bytes on the stream.  
// TLS guarantees abstraction for every delta with a safe index; 
// this is the main basis for application-level integrity and secrecy 

// used only as a ghost index:
// streams have no destructors, so they do not leak secrets
// they are used abstractly by TLS, except that
// their logical definition is needed for authentication in application code.
private type (;e:epoch) stream = {sb:cbytes list}

// the implementation of this type is application-specific 
// but it must provide a few functions to TLS, declared below.
private type (;e:epoch, h:(;e)stream, r:range) delta = {contents: (;r) rbytes}

function val Payload: e:epoch * s:(;e)stream * r:range * (;e,s,r)delta -> cbytes
private definition !e,s,r,d. Payload(e,s,r,d) = B(d.contents)

// CF enabling re-indexing too easily?
// CF ask !e,e',s,s',r,r',d. Payload(e,s,r,d) = Payload(e',s',r',d)

function val EmptyStream: e:epoch -> (;e)stream 
private definition !e. EmptyStream(e) = {sb = []}

function val ExtendStream: 'a * 'b * 'c * 'd -> 'e
private definition !e,s,r,b. ExtendStream(e,s,r,b) = {sb = b :: s.sb } 

function val ExtendStreamDelta: 'a * 'b * 'c * 'd -> 'e
private definition !e,s,r,d. ExtendStreamDelta(e,s,r,d) = ExtendStream(e,s,r,B(d.contents))

ask !e,e',s,s',r,r',d,d'.
   Payload(e,s,r,d) = Payload(e',s',r',d') =>
   ExtendStreamDelta(e,s,r,d) = ExtendStreamDelta(e,s,r,d')

function val StreamBytes: e:epoch * (;e)stream -> cbytes
private definition 
   (!e,s. (s.sb = []   => StreamBytes(e,s) = [||]) ) /\
   (!e,s,h,t. (s.sb = h::t => StreamBytes(e,s) = (StreamBytes(e,{sb=t}) @| h)) )

ask !e.       StreamBytes(e,EmptyStream(e)) = [||]
ask !e,s,r,b. StreamBytes(e,ExtendStream(e,s,r,b)) = ( StreamBytes(e,s) @| b )
ask !e,s,r,d. StreamBytes(e,ExtendStreamDelta(e,s,r,d)) = ( StreamBytes(e,s) @| Payload(e,s,r,d) )

// The following two functions are 
// used only by the application 
// They are never called from TLS.
val createDelta: 
  e:epoch -> s:(;e) stream -> r:range -> 
  b:(;r) rbytes -> c: (;e,s,r) delta  
val deltaBytes: 
  e:epoch -> s:(;e) stream -> r:range -> 
  c: (;e,s,r) delta -> b:(;r) rbytes 

//CF we need a better verification pattern for multi-user interfaces.
//CF a cheap one is to use different names plus ifdefs in the .fsi

// These functions are used by TLS:
val init: e:epoch -> s:(;e)stream{s=EmptyStream(e)}
val append: 
  e:epoch -> s: (;e) stream -> r:range ->
  d:(;e,s,r) delta -> 
  s':(;e) stream{s' = ExtendStreamDelta(e,s,r,d)}

val deltaPlain: 
  e:epoch{not Auth(e)} -> s:(;e) stream -> r:range -> 
  b:(;r) rbytes -> d: (;e,s,r) delta {B(b) = Payload(e,s,r,d)} 
val deltaRepr: 
  e:epoch{not Safe(e)} -> s:(;e) stream -> r:range -> 
  d: (;e,s,r) delta -> b:(;r) rbytes{B(b) = Payload(e,s,r,d)}

val split: e:epoch -> s:(;e) stream -> 
  r0:range -> r1:range -> d:(;e,s,Sum(r0,r1)) delta -> 
  (d0:(;e,s,r0) delta * d1:(;e,ExtendStreamDelta(e,s,r0,d0),r1) delta){
	Payload(e,s,Sum(r0,r1),d) =
		Payload(e,s,r0,d0) @| Payload(e,ExtendStreamDelta(e,s,r0,d0),r1,d1)
  }

val widen: e:epoch -> s:(;e) stream -> 
  r0:range -> r1:range{SubRange(r0,r1)} -> d0:(;e,s,r0) delta ->
  d1:(;e,s,r1) delta{Payload(e,s,r0,d0) = Payload(e,s,r1,d1)}

//CF: We need linearity on the stream! 


(* CF notes on the "plaintext cascade"

- we need something stronger than Auth, e.g. Auth /\ Complete.
- document ghost status of some indexes (so that we can "fake" them)

// DataStream   (provided by the application)

  private type (;e:epoch, h:(;e)stream, r:range) delta = {contents: (;r) rbytes}

// AppFragment  (s,d) re-indexing from epochs to indexes. FIX COMMENTS.
// we generate a dummy epoch, Ok. 

- Extend is wrong: not a function.
- Sent is too strong. As we decrypt, we only know ?e'. I(e) = I(e') /\ ... 

  private type (;i:id,r:range) fragment = 
    {frag: (e':epoch * s:(;e)stream * d:(;e',s,r) delta
	       { i = Id(e') /\ (Auth(e') => DeltaFragment(e',s,r,d))}) }

  type (;e:epoch,s:(;e)stream,r:range) plain = f:(;Id(e),r) fragment {Auth(e) => Sent(e,s,r,f)}

// HSFragment, for the other payloads. BROKEN?

  type (;i:id,s:(;i)stream,r:range)plain = f:(;i,r)fragment{AuthId(i) => Sent(i,s,r,f)}

// TLSFragment, multiplexing 4 protocols.
// Record also does some packaging

  private type (;i:id,ct:ContentType,rg:range) fragment =
    | FHandshake of f:(;i,rg)HSFragment.fragment {ct=Handshake}
    | FCCS       of f:(;i,rg)HSFragment.fragment {ct=Change_cipher_spec}
    | FAlert     of f:(;i,rg)HSFragment.fragment {ct=Alert}
    | FAppData   of f:(;i,rg)AppFragment.fragment{ct=Application_data}

// StatefulPlain, for StatefulAEAD

  private type (;i:id,ad:cbytes,r:range) fragment = 
    {contents: (;i,ParseAD(e,ad),r)TLSFragment.fragment}

// LHAEPlain, for LHAE

  private type (;i:id,ad:cbytes,r:range) fragment = 
    {contents: (;i,ParseAD(i,ad),r)StatefulPlain.fragment}

// Encode, for ENC

  private type (;i:id,ad:(;i)LHAEPlain.adata,rg:range) plain =
	{ plain: (;i,ad,rg)LHAEPlain.plain;
	  tag  : (;i)MAC.tag;
	  ok   : b:bool { EncAlg(i) = Stream_RC4_128 => b = true }

*) 

