module Dispatch

open AppData
open Alert
open Data
open Formats
open Handshake
open Record
open Sessions
open Stream
open AppCommon
open Error_handling
open Bytearray

type predispatchState =
  | Init
  | FirstHandshake
  | Finishing
  | Finished
  | Open
  | Closing
  | Closed

type dispatchState = ds:predispatchState{ds = Init \/ ds = FirstHandshake \/
                ds = Finishing \/ ds = Finished \/ ds = Open \/ ds = Closing \/ ds = Closed}

type dState = {
    disp: dispatchState;
    conn: ConnectionState;
    }

type preConnection =
  {ds_info: SessionInfo;
   handshake: Handshake.hs_state;
   alert: Alert.al_state;
   appdata: AppData.app_state;
   read: dState;
   write: dState}


predicate type preds =
	| DispSend of dState * ContentType
	| ContentMap of SessionInfo * int * ContentType * bytes
        | ValidConnection of preConnection
	| DispInv of dState
	| DispState of dState * dState

type Connection = c:preConnection{ValidConnection(c)}

val init :
  Tcp.NetworkStream ->
      r:role -> po:protocolOptions{ po.minVer <> UnknownPV /\ po.maxVer <> UnknownPV} ->
      c:Connection{c.read.disp = Init /\ c.write.disp = Init}

val appDataAvailable: Connection -> bool
val getSessionInfo: Connection -> SessionInfo

val moveToOpenState: c:Connection -> s:SessionInfo -> Connection

val next_fragment :
        int ->  c:Connection{c.write.disp <> Closed} -> 
                ((bool Error_handling.Result) * c':Connection)
                (* maybe say that c' = IncSeqNum(c) ? *)

val sendNextFragments : Connection -> (unit Error_handling.Result) * Connection

val deliver :
  Formats.ContentType ->
    Record.fragment -> c:Connection{c.read.disp <> Closed} -> (bool Error_handling.Result) * Connection

val readNextAppFragment : Connection -> (unit Error_handling.Result) * Connection

val writeOneAppFragment: Connection -> bytes -> ((bytes * bytes) Result) * Connection

val readOneAppFragment: Connection -> int -> (bytes Result) * Connection

(* Definition of ValidConnection, implicitly expressing all the found invariants *)
assume !c. ValidConnection(c) <=> 
  (RecvConnState(c.read.conn) /\ 
   SendConnState(c.write.conn) /\
   DispState(c.read,c.write) /\
   HandshakeState(c.handshake) /\
   AlertState(c.alert) /\
   ApplicationState(c.appdata) /\
   c.ds_info = c.handshake.hs_info /\
   c.ds_info = c.alert.al_info /\
   c.ds_info = c.appdata.app_info /\
   ( c.write.disp = Open =>
	c.ds_info = c.write.conn.rec_info /\
	ContentMap(c.ds_info,c.write.conn.seq_num,Application_data,PreviouslyRead(c.appdata.app_outgoing)) ) /\
   ( c.read.disp = Open =>
	c.ds_info = c.read.conn.rec_info /\
	(ContentMap(OtherRole(c.ds_info),c.read.conn.seq_num,Application_data,StreamBytes(c.appdata.app_incoming)) \/
	 Compromised(OtherRole(c.ds_info))) )

(* Similarly for HS, Alert:
   ContentMap(c.ds_info,Handshake,c.write.conn.seq_num,PreviouslyRead(c.handshake.hs_outgoing)) /\
   ContentMap(c.ds_info,Alert,c.write.conn.seq_num,PreviouslyRead(c.alert.al_outgoing)) /\
*)
  )


(* Invariants on the Dispatch automaton *)
assume !dstate. DispInv(dstate) <=> (
	((dstate.disp = Init \/ dstate.disp = FirstHandshake) =>
	 (dstate.conn.sparams.bulk_cipher_algorithm = BCA_null /\
	 dstate.conn.sparams.mac_algorithm = MA_null)) /\
	((dstate.disp = Finishing \/ dstate.disp = Open) =>
	 (dstate.conn.sparams.bulk_cipher_algorithm <> BCA_null /\
	 dstate.conn.sparams.mac_algorithm <> MA_null))
	)

assume !read,write. DispState(read,write) <=> (
	DispInv(read) /\ DispInv(write) /\
	)


(* Which protocols can be sent in which dispatch states *)
assume !dstate,proto. DispSend(dstate,proto) <=> (
	((dstate.disp = Init \/ dstate.disp = FirstHandshake) /\
	        proto <> Application_data) \/
	(dstate.disp = Finishing /\
	        (proto = Handshake \/ proto = Alert)) \/
	(dstate.disp = Open) \/
	(dstate.disp = Closing /\ proto = Alert)
	)


assume !c,protocol,s,f.
             ValidConnection(c) /\
             DispSend(c.write,protocol) /\
	     UpperProtoSend(c.ds_info,protocol,f) => 
               FragmentSend(c.ds_info,c.write.conn.seq_num,protocol,f)

theorem !i,n,p,f. FragmentSend(i,n,p,f) => (?c. ValidConnection(c) /\ DispSend(c.write,p) /\
                                            UpperProtoSend(c.ds_info,p,f) /\
                                            i = c.ds_info /\ n = c.write.conn.seq_num)

(* On the receive side, we need something:
ask !c,p,f. ValidConnection(c) /\ FragmentSend(c.ds_info,c.read.conn.seq_num,p,f) =>
            (.....)
*)

(* By linearity *)
theorem !i,n,p,f,p',f'. FragmentSend(i,n,p,f) /\ FragmentSend(i,n,p',f') => (p = p' /\ f = f')

assume !i,ct,n. ContentMap(i,0,ct,empty_bstr)
assume !i,n,ct,h,f. ContentMap(i,n,ct,h) /\ FragmentSend(i,n,ct,f) =>
                   ContentMap(i,n+1,ct,AppendBytes(h,f))
assume !i,n,ct,h,ct',f. ContentMap(i,n,ct,h) /\ FragmentSend(i,n,ct',f) /\ ct <> ct' =>
                   ContentMap(i,n+1,ct,h)

