module TLSInfo

open Bytes
open Principal
open CipherSuites

type sessionID = bytes

type preDirection =
    | CtoS
    | StoC
type Direction = d:preDirection{d = CtoS \/ d = StoC}
(* FIXME: Automatic inference by F7 *)

val dualDirection: d1:Direction -> d2:Direction
  {(d1 = CtoS /\ d2 = StoC) \/ (d1 = StoC /\ d2 = CtoS) }

type SessionInfo = {
    clientID: cert option;
    serverID: cert option;
    sessionID: sessionID option;
    protocol_version: ProtocolVersion;
    cipher_suite: cipherSuite;
    compression: Compression;
    init_crand: bytes;
    init_srand: bytes
    }

predicate NullSessionInfo of SessionInfo 

private assume !si. NullSessionInfo(si) <=> (si.clientID = None /\ si.serverID = None /\ si.sessionID = None /\
    si.cipher_suite = nullCipherSuite /\ si.compression = Null /\ si.init_crand = [||] /\ si.init_srand = [||] )

val null_sessionInfo: pv:ProtocolVersion -> si:SessionInfo{NullSessionInfo(si)}

type KeyInfo = {
    sinfo: SessionInfo;
    dir: Direction;
    crand: bytes;
    srand: bytes;
    // cVerifyData: bytes
    // sVerifyData: bytes
    }

predicate NullKeyInfo of KeyInfo

private assume !ki. NullKeyInfo(ki) <=> (NullSessionInfo(ki.sinfo) /\ ki.crand = [||] /\ ki.srand = [||])

val null_KeyInfo: d:Direction -> pv:ProtocolVersion -> ki:KeyInfo{NullKeyInfo(ki)}

// We might need something like this -- and possibly more
// definition !ki. NullKeyInfo(ki) => NullSessionInfo(ki.sinfo)
