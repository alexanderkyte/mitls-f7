module AEAD_GCM

open Bytes
open Range
open TLSInfo
open Error
open TLSError
open TLSConstants

type cipher = b:bytes{Length(b) <= max_TLSCipher_fragment_length}
private type (;i:id)key = {kb:bytes}
private type (;i:id)iv = {ivb:bytes}
type counter = nat

private type (;i:id,rw:rw)state = {key:(;i)key;
              iv:(;i)iv;
              counter:counter}

type (;i:id)encryptor = (;i,Writer)state
type (;i:id)decryptor = (;i,Reader)state

function val NextEncryptor: i:id * (;i)encryptor -> 'a //(;i)encryptor
private definition !i,k,iv,c. NextEncryptor(i,{key=k;iv=iv;counter=c}) = {key=k;iv=iv;counter=c+1} 

val GEN: i:id -> (;i)encryptor * (;i)decryptor
val COERCE: i:id{not AuthId(i)} -> rw:rw -> bytes -> bytes -> (;i,rw)state
val LEAK:   i:id{not AuthId(i)} -> rw:rw -> (;i,rw)state -> bytes

predicate val ENCrypted: i:id * ad:(;i)LHAEPlain.adata * cipher * 'a -> bool

type entry = 
  (i:id * ad:(;i)LHAEPlain.adata * c:cipher * r:range * p:(;i,ad,r)LHAEPlain.plain)
  { ENCrypted(i,ad,c,p) } 

val log: entry list ref
val cfind: i:id -> c:cipher -> xs: entry list ->
	(a:(;i)LHAEPlain.adata * r:range * (;i,a,r) LHAEPlain.plain)

val ENC_int: i:id -> e:(;i)encryptor -> ad:(;i)LHAEPlain.adata -> r:range -> bytes ->
	( (e':(;i)encryptor{e'=NextEncryptor(i,e)}) *
	  (c:cipher )) //{ Length(c) = TargetLength(i,r)}) )

val ENC: i:id -> e:(;i)encryptor -> ad:(;i)LHAEPlain.adata -> r:range -> p:(;i,ad,r)LHAEPlain.plain ->
	( (e':(;i)encryptor{e'=NextEncryptor(i,e)}) *
	  (c:cipher{(SafeId(i) => ENCrypted(i,ad,c,p)) /\
	             Length(c) = TargetLength(i,r)}) )

val DEC_int: i:id -> (;i)decryptor -> ad:(;i)LHAEPlain.adata -> r:range -> c:cipher ->
	res: (((;i)decryptor * p:(;i,ad,r)LHAEPlain.plain) Result)

val DEC: i:id -> (;i)decryptor -> ad:(;i)LHAEPlain.adata -> r:range -> c:cipher ->
	res: (((;i)decryptor * p:(;i,ad,r)LHAEPlain.plain) Result)
	{SafeId(i) =>
		( (!d,p. res = Correct((d,p)) => ENCrypted(i,ad,c,p)) /\
		  (?p. ENCrypted(i,ad,c,p) => ?d. res = Correct((d,p)))
		)}