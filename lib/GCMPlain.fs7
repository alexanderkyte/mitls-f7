module GCMPlain

open TLSInfo
open Bytes
open Range

private type (;i:id,d:(;id)LHAEPlain.adata,r:range)plain =
	{adata: b:bytes; //AP: TODO: add refinement on this adata
	 text: (;i,d,r)LHAEPlain.plain}

val prepare: i:id -> d:(;i)LHAEPlain.adata -> r:range -> (;i,d,r)LHAEPlain.plain ->
	(;i,d,r)plain

function val Payload: i:id * d:cbytes * r:range * (;i,d,r)plain -> cbytes
private definition !i,d,r,p.
	Payload(i,d,r,p) = LHAEPlain.Payload(i,d,r,p.text)

val repr: i:id{not SafeId(i)} -> d:(;i)LHAEPlain.adata -> r:range -> p:(;i,d,r)plain ->
	(bytes * b:(;r)rbytes){B(b) = Payload(i,B(d),r,p)}
	