module TLSFragment

open Bytes
open TLSInfo
open Formats
open CipherSuites

// Plain type for Dispatch
type (;ki:KeyInfo,tlen:int,seqn:int,ct:ContentType) fragment =
    | FHandshake of (;ki,seqn,tlen)Handshake.fragment    {ct=Formats.Handshake}
    | FCCS       of (;ki,seqn,tlen)Handshake.ccsFragment {ct=Change_cipher_spec}
    | FAlert     of (;ki,seqn,tlen)Alert.fragment        {ct=Alert}
    | FAppData   of (;ki,seqn,tlen)AppDataPlain.fragment {ct=Application_data}

val TLSFragmentRepr: ki:KeyInfo -> tlen:int -> seqn:int -> 
  ct:ContentType -> (;ki,tlen,seqn,ct)fragment -> bytes
val TLSFragment: ki:KeyInfo -> tlen:int -> seqn:int -> 
  ct:ContentType -> bytes -> (;ki,tlen,seqn,ct)fragment

// Additional Data
type addData = bytes
function val ADBytes: ProtocolVersion * int * ContentType -> addData
private assume !pv,seqn,ct.
	( pv = SSL_3p0 /\
	  ADBytes(pv,seqn,ct) =
		IntBytes(8,seqn) @| CTBytes(ct) ) \/
	  ADBytes(pv,seqn,ct) =
		IntBytes(8,seqn) @| CTBytes(ct) @| VersionBytes(pv)

private val makeAD: pv:ProtocolVersion ->
	seqn:int -> ct:ContentType ->
	ad:addData{ad=ADBytes(pv,seqn,ct)}

private val parseAD: pv:ProtocolVersion -> ad:addData -> (seqn:int * ct:ContentType){ad=ADBytes(pv,seqn,ct)}

function val ADct: ProtocolVersion * addData -> ContentType
assume !pv,seqn,ct. ADct(pv,ADBytes(pv,seqn,ct)) = ct

function val ADseqn: ProtocolVersion * addData -> int
assume !pv,seqn,ct. ADseqn(pv,ADBytes(pv,seqn,ct)) = seqn

// Plain type for AEAD
predicate Fragment of ki:KeyInfo * tlen:int * seq:int * ct:ContentType * bytes

private type (;ki:KeyInfo,tlen:int,ad:addData) AEADPlain = bytes
private type (;ki:KeyInfo,tlen:int,ad:addData) AEADMsg = 
            (x:(;ki,tlen,ad) AEADPlain){Corrupt(ki) \/
                                        Fragment(ki,tlen,
                                                 ADseqn(ki.sinfo.protocol_version,ad),
                                                 ADct(ki.sinfo.protocol_version,ad),
                                                 x)}

val AEADPlain: ki:KeyInfo -> tlen:int -> ad:addData -> bytes -> (;ki,tlen,ad)AEADPlain
val AEADRepr:  ki:KeyInfo -> tlen:int -> ad:addData -> f:(;ki,tlen,ad)AEADPlain -> b:bytes

val AEADPlainToTLSFragment: ki:KeyInfo -> tlen:int -> ad:addData ->
                            (;ki,tlen,ad)AEADPlain -> 
                            (;ki,tlen,ADseqn(ki.sinfo.protocol_version,ad),ADct(ki.sinfo.protocol_version,ad)) fragment

val TLSFragmentToAEADPlain: ki:KeyInfo -> tlen:int -> seqn:int -> ct:ContentType -> 
                            (;ki,tlen,seqn,ct)fragment -> 
                            (;ki,tlen,ADBytes(ki.sinfo.protocol_version,seqn,ct)) AEADPlain
