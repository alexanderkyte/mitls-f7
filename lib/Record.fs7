module Record

/// Implements stateful AE on top of LHAE,
/// managing sequence numbers and the binary record format

open Bytes
open Error
open TLSError
open TLSConstants
open TLSInfo
open Range

private type (;ki:epoch,rw:rw) ConnectionState =
	| NullState
	| SomeState of h :(;Id(ki))TLSFragment.history * st:(;Id(ki),rw)StatefulLHAE.state
	   {h = StatefulPlain.Multiplexed(Id(ki),StatefulLHAE.History(Id(ki),rw,st))}

val someState: ki:epoch -> rw:rw -> h:(;Id(ki)) TLSFragment.history -> st: (;Id(ki),rw) StatefulLHAE.state{h = StatefulPlain.Multiplexed(Id(ki),StatefulLHAE.History(Id(ki),rw,st))} -> cs:(;ki,rw) ConnectionState{cs = SomeState (h,st)}

function val History: ki:epoch * rw:rw * (;ki,rw) ConnectionState -> 'a
private definition !ki,rw,h,s. History(ki,rw,SomeState(h,s)) = h
private definition !ki,rw,s.   History(ki,rw,NullState) = TLSFragment.EmptyHistory(Id(ki))

type (;ki:epoch) sendState = (;ki,Writer) ConnectionState 
type (;ki:epoch) recvState = (;ki,Reader) ConnectionState

val initConnState: ki:succEpoch -> rw:rw ->
	state:(;Id(ki),rw) StatefulLHAE.state{StatefulLHAE.History(Id(ki),rw,state) = StatefulPlain.EmptyHistory(Id(ki))} ->
	cs:(;ki,rw) ConnectionState{History(ki,rw,cs) = TLSFragment.EmptyHistory(Id(ki))}
val nullConnState: ki:epoch -> rw:rw ->
	cs:(;ki,rw) ConnectionState{History(ki,rw,cs) = TLSFragment.EmptyHistory(Id(ki))}

private val makePacket: ContentType -> ProtocolVersion -> bytes -> bytes

val headerLength: b:bytes{Length(b) = 5} -> (n:nat{n>0 /\ n <= max_TLSCipher_fragment_length}) Result

private val parseHeader: b:bytes{Length(b) = 5} ->
	((ContentType * ProtocolVersion * n:nat){n>0 /\ n <= max_TLSCipher_fragment_length}) Result

val recordPacketOut: ki:epoch -> 
                     ss:(;ki) sendState -> pv:ProtocolVersion ->
                     rg:range -> ct:ContentType -> 
                     f:(;ki,ct,History(ki,Writer,ss),rg) TLSFragment.plain ->
                     (ss':(;ki) sendState * wire:bytes){
						Auth(ki) => (History(ki,Writer,ss') = 
                                                             TLSFragment.ExtendHistory(Id(ki),ct,History(ki,Writer,ss),rg,f))}
 
val recordPacketIn : ki:succEpoch ->
                     rs:(;ki) recvState -> 
                     wire:bytes{Length(wire) >= 5} -> 
                     res:(rs':(;ki)recvState *
                        ct:ContentType * pv:ProtocolVersion *
                        rg:range * 
                        f:(;ki,ct,History(ki,Reader,rs),rg) TLSFragment.plain) Result{
                       !rs',ct,pv,rg,f. (res = Correct ((rs',ct,pv,rg,f)) /\ Auth(ki)) => 
                         (History(ki,Reader,rs') = TLSFragment.ExtendHistory(Id(ki),ct,History(ki,Reader,rs),rg,f))}



val history: ki:epoch -> rw:rw -> s:(;ki,rw) ConnectionState ->
	h:(;Id(ki))TLSFragment.history{h=History(ki,rw,s)}

//TODO val historyStream: e:epoch -> st:(;e) ConnectionState -> 
//TODO  ct:TLSConstants.ContentType -> s:(;e)stream{s=HistoryStream(e,ct,History(e,st))}
	
