module Sessions

open Data

type prerole =
    | ClientRole
    | ServerRole

type role = r:prerole{r = ClientRole \/ r = ServerRole}

type sessionID = bytes

type SessionInfo = {
    role: role;
    clientID: string option;
    serverID: string option;
    sessionID: sessionID option;
    }

function type funs =
    | IntOtherRole of role
    | OtherRole of SessionInfo
    | InitSessionInfo of role

predicate type preds = Compromised of SessionInfo

val init_sessionInfo: r:role ->	s:SessionInfo{ s = InitSessionInfo(r) }

val getSessionRole: i:SessionInfo -> r:role{r = i.role}
val getSessionID: i:SessionInfo -> id:sessionID option{id = i.sessionID}

assume !r,d. InitSessionInfo(r) = { role = r;
				    clientID = None;
				    serverID = None;
				    sessionID = None}

assume IntOtherRole(ClientRole) = ServerRole
assume IntOtherRole(ServerRole) = ClientRole

assume !s. OtherRole(s) = {
	   	role = IntOtherRole(s.role);
		clientID = s.clientID;
		serverID = s.serverID;
		sessionID = s.sessionID}
