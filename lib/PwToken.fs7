module PwToken

// ------------------------------------------------------------------------
open Bytes

// ------------------------------------------------------------------------
type username = string

type token =
  | GToken of bytes
  | BToken of bytes

predicate GoodClient      of unit
predicate GoodToken       of token
predicate RegisteredToken of username * token

assume !bs.     GoodToken(GToken(bs))
assume !bs. not GoodToken(BToken(bs))

private type utk = username * token

private val tokens : (utk:utk{RegisteredToken(fst(utk), snd(utk))}) list ref

// ------------------------------------------------------------------------
val create   : x:unit{GoodClient()} -> tk:token{GoodToken(tk)}
val register : u:username -> tk:token{GoodToken(tk)} -> unit {RegisteredToken(u, tk)} 
val verify   : u:username -> tk:token -> b:bool{b = true => RegisteredToken(u, tk)}
val guess    : bytes -> tk:token{not GoodToken(tk)}

// ------------------------------------------------------------------------
ask !u, tk. RegisteredToken(u, tk) => GoodToken(tk)

ask !tk1, tk2. GoodToken(tk1) /\ not GoodToken(tk2) => tk1 <> tk2
