module FIFO

open Data
open Record

type Fifo = bytes

predicate type preds =
	| FIFOSend of fragment

val empty_Fifo: Fifo
val is_empty_Fifo: f:Fifo ->
	r:bool{(r = true /\ f = empty_Fifo) \/ (r = false /\ f <> empty_Fifo)}
val enqueue_data: f:Fifo -> d:bytes -> f':Fifo{IsConcat(f',f,d)}
val enqueue_fragment: f:Fifo -> d:fragment -> f':Fifo{IsConcat(f',f,d)}
val dequeue_data: f:Fifo -> int -> (d:bytes * f':Fifo){IsConcat(f,d,f')}
val dequeue_fragment: f:Fifo -> int -> (d:fragment * f':Fifo){IsConcat(f,d,f') /\ FIFOSend(d)}


