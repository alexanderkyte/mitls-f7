module TLSInfo

(* This module gathers the definitions of 
   public datatypes, parameters, and predicates for our TLS API.
   
   Its interface is used by most TLS modules; its implementation is typechecked. *)

(* TODO 20-12-12:
- VerifyData and SentCCS should be about epochs not sessions (change PRF!)
    
- Fix Sig/VerifyData/Complete as discussed with Cedric

- Declare all Strong predicates. Define in TLS?
  PRF.Strong, CRE.Strong, StrongRSAPMS, StrongDHPMS, StrongHS, Sig.Strong, StrongAE, StrongAuth
  
- Declare all honest predicates
  RSAKey.Honest(pk) (enc), Sig.Honest(a,pk)
  HonestRSAPMSData(pv,pk,epms), HonestDHPMSData(p,g,gx,gy)
  extend to HonestMS, HonestKeys

- What is used: DHGroup or DH?
  MK? I don't understand this question. Both?

- We need to typecheck ideal code, so rewrite all modules in the style
   #if ideal
   if safeHS(...) 
     ... GEN ...
   else 
   #endif
     .... COERCE ...
  This requires concrete safe/auth/strong/honest functions (specify, dont implement)
  MK: honest could be implemented and sometimes is implemented. Is this misguided?
*)

open Bytes
open Date
open TLSConstants

// polarity for reading and writing, e.g. for stateful encryption
type rw =
    | Reader
    | Writer

type preRole =
	| Client
	| Server
type Role = r:preRole{r = Client \/ r = Server}
function val DualRole: Role -> Role
assume DualRole(Client) = Server
assume DualRole(Server) = Client


// Client/Server randomness (implemented in Nonce) 

// their first 4 bytes give the local time, 
// so that they are locally pairwise-distinct
type random = (;32) lbytes 
type crand = random
type srand = random
type csrands = (;64) lbytes
//CF 04-09 the randoms are not just bytes; where do we rely on collision-resistance?


// pre-master-secret index and encrypted data 

private type pmsId = NoPmsId | SomePmsId of PMS.pms
function val PmsId: PMS.pms -> pmsId
private definition !pms. PmsId(pms) = SomePmsId(pms)
val pmsId: pms:PMS.pms -> id:pmsId{ id = PmsId(pms) } 
val noPmsId: pmsId

//CF unclear what its purpose is besides pmsId
type pmsData =
    | PMSUnset
    | RSAPMS of pk:RSAKey.pk * ProtocolVersion * encpms:bytes
    | DHPMS  of p:DHGroup.p * g:(;p)DHGroup.g *
		  	      gx:(;p)DHGroup.elt (* Client *) *
			      gy:(;p)DHGroup.elt (* Server *)

function val EncPMS: pmsData -> bytes 


// Session information (public immutable data)

type sessionID = b:bytes {Length(b) <= 32}
// "An arbitrary byte sequence chosen by the server 
// to identify an active or resumable session state."
// We treat empty_bytes as the absence of identifier.

// TODO this is out of sync with the paper, on client_auth.
type SessionInfo = {
    init_crand: crand;
    init_srand: srand;
    protocol_version: ProtocolVersion;
    cipher_suite: cipherSuite;
    compression: Compression;
	pmsId: pmsId;
    pmsData: pmsData;
    client_auth: bool;
    clientID: Cert.cert list;
    serverID: Cert.cert list;
    sessionID: sessionID;
    // Extensions:
    extended_record_padding: bool;
    }
// for certificates, the empty list represents the absence of identity 
// (possibly refusing to present requested certs) 
//   
// for sessionID, the empty bytes empty_bytes represents the absence of ID,
// that is, the session is not resumable. 

function val CSRands: SessionInfo -> csrands
definition !si,csr. csr=CSRands(si) <=> B(csr)=B(si.init_crand) @| B(si.init_srand) 
val csrands: si:SessionInfo -> csr:csrands {csr=CSRands(si)}

function val PrfAlg: SessionInfo -> prfAlg
function val SIaeAlg: SessionInfo -> aeAlg
function val KdfAlg: SessionInfo -> kdfAlg

definition !si. SIaeAlg(si) = CipherSuiteAuthEncAlg(si.cipher_suite,si.protocol_version)
definition !si.  KdfAlg(si) = (si.protocol_version,si.cipher_suite)
definition !si.  PrfAlg(si) = (si.protocol_version,si.cipher_suite)

val prfAlg: si:SessionInfo -> a:prfAlg {a=PrfAlg(si)}

// master-secret index (derived from the sessionID) 

// CF We cannot use just csr, because of MiTM forwarding honest nonces
type msId =        // We record the parameters used to derive this MS: 
  pms   : pmsId *     // the pms and its indexes  
  csr   : csrands *   // the nonces  
  creAlg: prfAlg      // the PMS-PRF algorithm
   
function val MsI: SessionInfo -> msId
private definition !si. MsI(si) = (si.pmsId, CSRands(si), PrfAlg(si)) 
val msi: si:SessionInfo -> i:msId { i = MsI(si) }


// Epoch descriptors (public immutable data)

private type preEpoch =
  | InitEpoch of writer:Role
  | SuccEpoch of crand * srand  (* the latest randoms     *)
               * si:SessionInfo
               * pred:preEpoch 

predicate val IsInitEpoch: preEpoch -> bool
predicate val IsSuccEpoch: preEpoch -> bool
private definition !e. IsInitEpoch(e) <=> ?r. e = InitEpoch(r)
private definition !e. IsSuccEpoch(e) <=> ?c,s,si,pe. e = SuccEpoch(c,s,si,pe)

type epoch = e:preEpoch {IsInitEpoch(e) \/ IsSuccEpoch(e)}
type succEpoch = e:preEpoch {IsSuccEpoch(e)}

function val Pred: succEpoch -> epoch
private definition !cr,sr,si,pred. Pred(SuccEpoch(cr,sr,si,pred)) = pred

function val EpochSI: succEpoch -> SessionInfo
private definition !c,s,si,p. EpochSI(SuccEpoch(c,s,si,p)) = si

function val EpochSRand: succEpoch -> bytes
function val EpochCRand: succEpoch -> bytes
private definition !b1,b2,si,pe. EpochSRand(SuccEpoch(b1,b2,si,pe)) = b2
private definition !b1,b2,si,pe. EpochCRand(SuccEpoch(b1,b2,si,pe)) = b1

val isInitEpoch: e:epoch -> b:bool{(b = true /\ IsInitEpoch(e)) \/ (b = false /\ IsSuccEpoch(e))}
val epochSI: e:succEpoch -> si:SessionInfo{si = EpochSI(e)}

function val EpochWriter: epoch -> Role
definition !r. EpochWriter(InitEpoch(r)) = r 
definition !r. EpochWriter(InitEpoch(r)) = r 
definition !r,cr,sr,si,pred. EpochWriter(SuccEpoch(cr,sr,si,pred)) = EpochWriter(pred)

val epochSRand: e:succEpoch -> b:crand{B(b) = B(EpochSRand(e))}
val epochCRand: e:succEpoch -> b:srand{B(b) = B(EpochCRand(e))}
val epochCSRands: e:succEpoch -> b:csrands{B(b) = B(EpochCRand(e)) @| B(EpochSRand(e))}


// Connection information (public immutable data)

type ConnectionInfo =
	{ role: Role;
	  id_rand: random;
	  id_in:  epoch;
      id_out: epoch}

val connectionRole: ci:ConnectionInfo -> r:Role{r = ci.role}

val initConnection: r:Role -> ra:random -> ci:ConnectionInfo{ci.role = r /\ ci.id_rand = ra /\ IsInitEpoch(ci.id_in) /\ IsInitEpoch(ci.id_out)}
val nextEpoch: e:epoch -> c:crand -> s:srand -> si:SessionInfo ->
	e':succEpoch{Pred(e') = e /\ EpochSI(e') = si /\
			     EpochCRand(e') = c /\ EpochSRand(e') = s}


// the tight index we use as an abstract parameter for StatefulAEAD et al
type id = { 
  // indexes and algorithms of the session used in the key derivation
  msId   : msId;   // the index of the master secret used for key derivation
  kdfAlg : prfAlg; // the KDF algorithm used for key derivation
  aeAlg  : aeAlg;  // the authenticated-encryption algorithms

  // epoch-specific parameters
  csrConn: csrands;// the client-server random of the connection
  writer : Role    // the role of the writer 
  }

function val Id: succEpoch -> id
definition !e. Id(e) = 
  { msId    = MsI(EpochSI(e)); 
    kdfAlg  = KdfAlg(EpochSI(e));
	aeAlg   = SIaeAlg(EpochSI(e));
	csrConn = CSRands(EpochSI(e));
	writer  = EpochWriter(e);
 }

(* SPECIFYING THE STRENGTH OF CRYPTO ALGORITHMS (SECURITY ASSUMPTIONS) *) 

predicate StrongRSAPMS   of SessionInfo // MK was ProtocolVersion * kexAlg
predicate StrongDHPMS    of SessionInfo // MK was ProtocolVersion * kexAlg
           
predicate StrongSig of SessionInfo
definition !si. StrongSig(si) <=> Sig.Strong(CipherSuiteSigHashAlg(si.cipher_suite))

predicate StrongCRE of SessionInfo
// TODO: definition !si. StrongCRE(si) <=> CRE.Strong(si.protocol_version,CipherSuiteMACAlg(si.protocol_version,si.cipher_suite))

predicate StrongPRF of SessionInfo
// TODO: definition !si. StrongPRF(si) <=> PRF.Strong(si.protocol_version,CipherSuiteMACAlg(si.protocol_version,si.cipher_suite))

// summarizing all assumptions needed for a strong handshake
predicate StrongHS  of SessionInfo //CF * hashAlg for certs?
definition !si. StrongHS(si) <=> 
  ( (StrongRSAPMS(si) \/ StrongDHPMS(si)) /\ 
    StrongSig(si) /\ 
    StrongCRE(si) /\ StrongPRF(si) )

predicate StrongAuthSI of SessionInfo
predicate StrongAESI of SessionInfo
predicate StrongAuth of epoch
predicate StrongAE of epoch

definition !si. StrongAuthSI(si) <=> 
  (?e,m. CipherSuiteAuthEncAlg(si.cipher_suite,si.protocol_version) = MtE(e,m) /\ 
         INT_CMA_M(m))

definition !si. StrongAESI(si) <=> 
  (?e,m. CipherSuiteAuthEncAlg(si.cipher_suite,si.protocol_version) = MtE(e,m) /\ 
         IND_CPA(e) /\ 
         INT_CMA_M(m) /\ 
         INT_CTXT(MtE(e,m),si.protocol_version))

definition !e. StrongAuth(e) <=> StrongAuthSI(EpochSI(e))
definition !e. StrongAE(e)   <=> StrongAESI(EpochSI(e))


(* SPECIFYING HONESTY (TRUST ASSUMPTIONS) *) 

// Predicates specifying the honesty of keys and key material

predicate HonestSig of a:sigHashAlg * (;a) Sig.pkey
definition !a,k. HonestSig(a,k) <=> Sig.Honest(a,k)

// ``The associated sk is used only by compliant TLS''
predicate HonestRSAKey of RSAKey.pk
definition !pk. HonestRSAKey(pk) <=> RSAKey.Honest(pk)

//MK: predicate HonestLTKey (See also Cert.fs7)

// To be defined 
predicate HonestRSAPMSData of pk:RSAKey.pk * pv:ProtocolVersion * encpms:bytes
predicate HonestDHPMSData of p:DHGroup.p * g:(;p)DHGroup.g *
		  	      gx:(;p)DHGroup.elt (* Client *) *
			      gy:(;p)DHGroup.elt (* Server *)

predicate HonestPMSData of pmsData
assume !pd. HonestPMSData(pd) <=>
      ((?pk,pv,e. pd = RSAPMS(pk,pv,e) /\ HonestRSAPMSData(pk,pv,e)) \/
       (?p,g,gx,gy. pd = DHPMS(p,g,gx,gy) /\ HonestDHPMSData(p,g,gx,gy)))

(* SPECIFYING SAFETY *) 

predicate SafeMS_SI of SessionInfo // Good enough handshake for finished macking for this sessioninfo
predicate SafeHS_SI of SessionInfo // Good handshake for this sessioninfo
predicate SafeHS of epoch          // Good handshake for this epoch

// MK This definition is too strong. 
// MK StrongHS(si) /\ HonestPMSData(si.pmsData) => SafeHS_SI(si) but not the other way around.
// MK SafeHS_SI(si) => ( ? pms, sk. StrongHS(si) /\ HonestPMS(pms) /\ pms=RSADecrypt(sk,id.pmsData) )

//MK I think we need a separate SafeMS_SI to idealize the finished message
definition !si. SafeMS_SI(si) <=> 
      StrongHS(si)
//  /\ ? pms. EncryptedRSAPMS(PK(si.serverID),pms,EncOMS(pmsData)) /\ HonestRSAPMS(pms) //MK: \/ DH branch ...  

definition !si. SafeHS_SI(si) <=> StrongHS(si) /\ HonestPMSData(si.pmsData)

// Predicates specifying the security of TLS connections 
predicate type cryptopreds = 
| SafeSI  of SessionInfo // The session ciphersuite yields secrecy and integrity
| AuthSI  of SessionInfo // The session ciphersuite yields integrity (not necessarily secrecy)
| Safe   of epoch // The epoch parameters yield privacy & integrity
| Auth   of epoch // The epoch parameters yield integrity (not necesarily privacy)

definition !id. SafeHS(id) <=> SafeHS_SI(EpochSI(id)) 
definition !si. SafeSI(si) <=> SafeHS_SI(si) /\ StrongAESI(si)
definition !si. AuthSI(si) <=> SafeHS_SI(si) /\ StrongAuthSI(si)

definition !e. Safe(e) <=> SafeSI(EpochSI(e))
definition !e. Auth(e) <=> AuthSI(EpochSI(e))
// Safety for epochs relies only on SessionInfo, but this would change if we introduce a finer model of compromise
// E.g. if we allowed the attacker to compromise specific epochs


// In the code of ideal implementations only,
// we use F# functions that characterize the Safe and Auth predicates.
val safe: (e:epoch) -> b:bool { b = true <=> Safe(e) }
val safeHS: (e:epoch) -> b:bool {b = true <=> SafeHS(e)}
val safeHS_SI: (si:SessionInfo) -> b:bool {b = true <=> SafeHS_SI(si)}
val safeMS_SI: (si:SessionInfo) -> b:bool {b = true <=> SafeMS_SI(si)} 
//MK: safeMS_SI is used for idealization even if ciphersuites don't match.
//MK: this is needed to guarantee security of finished message MACs
val auth :(e:epoch) -> b:bool {b = true <=> Auth(e)}
val safeMAC: (e:epoch) -> b:bool {b = true <=> Auth(e)}
val safeENC: (e:epoch) -> b:bool {b = true <=> Safe(e)}

ask !e. Safe(e) => Auth(e) 

ask !e,mac. CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MACOnly(mac) => not Safe(e)
// AP: This should be invalid, as ciphersuite is a private type!!!
// AP ask !e. CipherSuiteAuthEncAlg(EpochSI(e).cipher_suite,EpochSI(e).protocol_version) = MACOnly(mac) => 
// AP   not (?kex,s. EpochSI(e).cipher_suite = CipherSuite(kex,s))

// so that TLS can exchange any traffic on the initial null connection
assume !e. IsInitEpoch(e) => not Auth(e)


(* Application configuration options *) 

// TODO Consider repackaging client and server options 

type helloReqPolicy =
    | HRPIgnore
    | HRPFull
    | HRPResume

type config = {
    minVer: ProtocolVersion;
    maxVer: ProtocolVersion;
    ciphersuites: cipherSuites;
    compressions: Compression list;

    (* Handshake specific options *)

    (* Client side *)
    honourHelloReq: helloReqPolicy;
    allowAnonCipherSuite: bool;

    (* Server side *)
    request_client_certificate: bool;
    check_client_version_in_pms_for_old_tls: bool;

    (* Common *)
    safe_renegotiation: bool;
	server_name: Cert.hint;
	client_name: Cert.hint;

    (* Sessions database *)
    sessionDBFileName: string;
    sessionDBExpiry: TimeSpan
    }

val defaultConfig: config

private val max_TLSPlaintext_fragment_length: nat
private val max_TLSCompressed_fragment_length: nat
val max_TLSCipher_fragment_length: nat
val fragmentLength: nat
