module AEAD_GCM

open Bytes
open Range
open TLSInfo
open Error
open TLSError
open TLSConstants

type cipher = bytes
private type (;i:id)key = {kb:bytes}
private type (;i:id)iv = {ivb:bytes}
type counter = nat

//AP: This file is ready to support reader/writer separation, but LHAE is not (yet).
private type (;i:id (* ,rw:rw *) )state = {key:(;i)key;
              iv:(;i)iv;
              counter:counter}

type (;i:id)encryptor = (;i (* ,Writer *) )state
type (;i:id)decryptor = (;i (* ,Reader *) )state

function val NextEncryptor: i:id * (;i)encryptor -> 'a //(;i)encryptor
private definition !i,k,iv,c. NextEncryptor(i,{key=k;iv=iv;counter=c}) = {key=k;iv=iv;counter=c+1} 

val GEN: i:id -> (;i)encryptor * (;i)decryptor
val COERCE: i:id{not AuthId(i)} -> (* rw:rw -> *) bytes -> bytes -> (;i)state
val LEAK:   i:id{not AuthId(i)} -> (;i)state -> bytes

predicate val ENCrypted: i:id * ad:(;i)LHAEPlain.adata * cipher * 'a -> bool

val ENC: i:id -> e:(;i)encryptor -> ad:(;i)LHAEPlain.adata -> r:range -> p:(;i,ad,r)LHAEPlain.plain ->
	(e':(;i)encryptor * c:cipher){e'=NextEncryptor(i,e) /\
		SafeId(i) => ENCrypted(i,ad,c,p) /\
		Length(c) = TargetLength(i,r)}

val DEC: i:id -> (;i)decryptor -> ad:(;i)LHAEPlain.adata -> r:range -> c:cipher ->
	res: (((;i)decryptor * p:(;i,ad,r)LHAEPlain.plain) Result)
	{SafeId(i) =>
		( (!d,p. res = Correct((d,p)) => ENCrypted(i,ad,c,p)) /\
		  (?p. ENCrypted(i,ad,c,p) => ?d. res = Correct((d,p)))
		)}