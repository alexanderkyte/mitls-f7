module AEAD

open TLSPlain

function val KeySize: KeyInfo -> int
definition !id. KeySize(id) = ENC.KeySize(id) + MAC.KeySize(id)
val keysize: ki:KeyInfo -> n:int {n = KeySize(ki)}
type (;ki:KeyInfo) keybytes = b:bytes {Length(b)=KeySize(ki)}
private predicate type keypred = MtEKey of ki:KeyInfo * ((;ki) MAC.key * (;ki) ENC.key)
private type (;ki:KeyInfo) key = 
      MacThenEncrypt of ka:(;ki)MAC.key * ke:(;ki)ENC.key {MtEKey(ki,(ka,ke))}
(*  |   GCM of ke:(;ki:AENC.key)  *)

val ENC: ki:KeyInfo -> (;ki) key -> (;ki) ENC.iv3 -> (;ki) add_data -> n:int -> (;ki) fragment -> ((;ki) ENC.iv3 * cipher) Result
val DEC: ki:KeyInfo -> (;ki) key -> (;ki) ENC.iv3 -> (;ki) add_data -> n:int -> cipher -> ((;ki) ENC.iv3 * (;ki) fragment) Result


(* TODOS: (KB: Done?) *)
(* - Add explicit ciphertext length *)
(* - Make all iv become iv3: Only TLS 1.0 will use iv, later versions don't. *)
(*	 The ciphertext has different lengths, depending on the version: *)
(*   In later versions it includes the fresh iv, in early versions it doensn't. *)

