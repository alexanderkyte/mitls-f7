module Algorithms

(* Identifiers and sizes for the TLS crypto algorithms *)

open Bytes

(* Not abstract, but meant to be used only by crypto modules and CipherSuites *)

type kexAlg =
    | RSA
    | DH_DSS
    | DH_RSA
    | DHE_DSS
    | DHE_RSA
    | DH_anon

type cipherAlg =
    | RC4_128
    | TDES_EDE_CBC
    | AES_128_CBC
    | AES_256_CBC

type hashAlg =
    | MD5
    | SHA
    | SHA256
    | SHA384

type aeadAlg =
    | AES_128_GCM
	| AES_256_GCM

type authencAlg =
    | EncMAC of cipherAlg * hashAlg
    | AEAD of aeadAlg * hashAlg

(* With F7, we need to declare both logical length functions
   and their concrete implementations; we still miss a few...
   TODO: use uniform naming convention, e.g. length implements Length
   a nicer F7 could enable homonymous concrete implementations of logical functions *) 

function val EncKeySize: cipherAlg -> int
// providing an explicit spec at least once; this should be internal
definition EncKeySize(RC4_128)      = 16
definition EncKeySize(TDES_EDE_CBC) = 24
definition EncKeySize(AES_128_CBC)  = 16
definition EncKeySize(AES_256_CBC)  = 32

val encKeySize: a:cipherAlg -> l:int{l=EncKeySize(a)}

function val BlockSize: cipherAlg -> int
definition BlockSize(RC4_128)		=  0
definition BlockSize(TDES_EDE_CBC)	=  8
definition BlockSize(AES_128_CBC)	= 16
definition BlockSize(AES_256_CBC)	= 16
val blockSize: a:cipherAlg -> l:int {l=BlockSize(a)}
val ivSize: a:cipherAlg -> l:int    {l=BlockSize(a)}

val aeadKeySize: aeadAlg -> int
val aeadIVSize: aeadAlg -> int

function val MacKeySize: hashAlg -> int
definition MacKeySize(MD5)		= 16
definition MacKeySize(SHA)		= 20
definition MacKeySize(SHA256)	= 32
definition MacKeySize(SHA384)	= 48
val macKeySize: a:hashAlg -> l:int{l=MacKeySize(a)}
val macSize:    a:hashAlg -> l:int{l=MacKeySize(a)}
val hashSize:   a:hashAlg -> l:int{l=MacKeySize(a)}

(* SSL Constants *)
val ssl_pad1_md5:  bytes  
val ssl_pad2_md5:  bytes
val ssl_pad1_sha1: bytes
val ssl_pad2_sha1: bytes