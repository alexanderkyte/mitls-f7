module MAC

open TLSInfo

predicate type msg = Msg of ki:keyInfo * (;ki) ltext

type macKey

type mac_plain = bytes
predicate val Msg: ki:KeyInfo * mac_plain -> bool

function val MacSize: KeyInfo -> int 
type (;ki:KeyInfo) mac = b:bytes{Length(b) = MacSize(KeyInfo)}

// why using this subset of the interface for MACs? 
// we'll probably need the rest soon.

val MAC: ki:KeyInfo -> (;ki) macKey -> mp:(;ki)mac_plain{Msg(ki,mp)} -> ((;ki) mac) Result
val VERIFY: ki:KeyInfo -> (;ki) macKey -> mp:(;ki)mac_plain -> (;ki) mac -> 
            unit{CMA(ki) => Msg(ki,mp)} Result
