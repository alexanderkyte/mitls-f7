module Tcp

open Bytes
open Error

type NetworkStream
type TcpListener

(* Server side *)

val listen: string -> int -> TcpListener
val accept: TcpListener -> NetworkStream
val stop: TcpListener -> unit

(* Client side *)

val connect: string -> int -> NetworkStream

(* Input/Output *)

val dataAvailable: NetworkStream -> r:bool Result{!y,z. r = Error(y,z) => y = AD_internal_error}
val read: NetworkStream -> l:int{l>0} ->
		r:bytes Result{(!b. r = Correct(b) => Length(b) = l)
		/\ (!y,z. r = Error(y,z) => y = AD_internal_error)}
val write: NetworkStream -> bytes -> r:unit Result{!y,z. r = Error(y,z) => y = AD_internal_error}
val close: NetworkStream -> unit
