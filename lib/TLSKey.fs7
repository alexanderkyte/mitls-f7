module TLSKey

open TLSInfo

// not implemented in TLSKey, but in Algorithms
//function val KeySize: KeyInfo -> int
//definition !id. KeySize(id) = ENC.KeySize(id) + MAC.KeySize(id)
//val keysize: ki:KeyInfo -> n:int {n = KeySize(ki)}
//type (;ki:KeyInfo) keybytes = b:bytes {Length(b)=KeySize(ki)}
// private predicate MtEKey of ki:KeyInfo * ((;ki)MACKey.key * (;ki)ENCKey.key)

type (;ki:KeyInfo) AEADKey = 
      MtE of ka:(;ki)MAC.key * ke:(;ki)ENCKey.key // {MtEKey(ki,(ka,ke))}
    | MACOnly of (;ki) MAC.key
(*  |   GCM of ke:(;ki:AENC.key)  *)

type (;ki:KeyInfo) recordKey =
    | RecordAEADKey of (;ki)AEADKey
    | RecordMACKey of (;ki)MAC.key
    | NoneKey

type (;ki:KeyInfo) ccs_data =
    { ccsKey: (;ki) recordKey;
      ccsIV3: (;ki) ENCKey.iv3;
    }

val nullCCSData: ki:KeyInfo -> (;ki) ccs_data
