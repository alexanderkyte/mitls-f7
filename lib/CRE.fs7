module CRE

open Bytes
open TLSConstants
open TLSInfo
open PMS
open PRF

// concrete PMS --> MS derivation.
private val extractMS: si:SessionInfo {not SafeMS_SI(si)} -> p:bytes -> (;si) PRF.masterSecret

(** RSA ciphersuites **) 

// CF what for?
private val accessRSAPMS: pk:RSAKey.pk -> cv:ProtocolVersion -> (;pk,cv) rsapms -> rsarepr

open DHGroup

private val accessDHPMS: p:DHGroup.p -> g:(;p)DHGroup.g -> gx:(;p)DHGroup.elt -> gy:(;p)DHGroup.elt ->
    pms: (;p,g,gx,gy)dhpms -> bytes

private val accessPMS: pms -> bytes

//CF actually a private type 
type entry = pi:pmsId * csr:csrands * ca:creAlg * ms:(;(pi,csr,ca)) ms
private val log: entry list ref 

val assoc: pi:pmsId -> csr:csrands -> ca:creAlg -> 
             (pi':pmsId * csr':csrands * ca':creAlg * (;(pi',csr',ca')) PRF.ms) list -> 
             (;(pi,csr,ca)) PRF.ms option

val extract:
    si:SessionInfo ->
    pms: pms { si.pmsId = PmsId(pms) /\ (si.pmsId,csrands(si), creAlg(si))=MsI(si) } ->
    (;si) PRF.masterSecret
	 
