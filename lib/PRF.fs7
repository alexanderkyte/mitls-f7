module PRF

(* PRFs keyed by master secrets, both for key derivation and verifyData *)

open Bytes
open TLSInfo
open StatefulAEAD

type repr = (;48)lbytes
private type (;si:SessionInfo) masterSecret = {bytes: repr}

// AuthSI is defined in TLSInfo
val sample: si:SessionInfo                         -> (;si)masterSecret
val coerce: si:SessionInfo{not AuthSI(si)} -> repr -> (;si)masterSecret

// Master secrets are used to derive key materials. 
// Compared with standard key derivation,
// - the label is hardcoded & implicit; 
// - the seed (crandom @| srandom) is retrieved from the epoch

val keyGen: ci:ConnectionInfo -> (;EpochSI(ci.id_out))masterSecret -> 
  ( w:(;ci.id_out)StatefulAEAD.writer * 
    r:(;ci.id_in) StatefulAEAD.reader )
  { StatefulPlain.EmptyHistory(ci.id_out,w.history) /\
    StatefulPlain.EmptyHistory(ci.id_in,r.history)}

private val log: ((ConnectionInfo * masterSecret) * (state * state)) list ref 

(* VerifyData should be about epochs not sessions *)
// Master secrets are also used to generate and check verifyData tags,
// providing conditional authentication of the (abstract) VerifyData predicate.

predicate VerifyData of SessionInfo * Role * bytes

val makeVerifyData: si:SessionInfo -> r:Role -> (;si) masterSecret ->
                   log:bytes{VerifyData(si,r,log)} -> 
                   bytes (* length depends on cs, 12 by default *)

val checkVerifyData: si:SessionInfo -> r:Role -> (;si) masterSecret ->
				   log:bytes (* the log *) ->
				   tag:bytes (* the expected value *) ->
				   b:bool{(b = true /\ AuthSI(si)) => VerifyData(si,r,log)}

val ssl_certificate_verify: si:SessionInfo -> (;si)masterSecret -> TLSConstants.sigAlg -> bytes -> bytes

