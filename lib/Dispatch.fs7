module Dispatch

open Bytes
open Formats
open Tcp
open Error
open Record
open Handshake
open Alert
open AppData
open TLSInfo
open AppCommon
open TLSFragment
open SessionDB

type predispatchState =
  | Init (* of ProtocolVersion * ProtocolVersion *) (* min and max *)
  | FirstHandshake (* of ProtocolVersion *)             (* set by the ServerHello *) 
  | Finishing
  | Finished (* Only for Writing side, used to avoid sending data on a partially completed handshake *)
  | Open
  | Closing
  | Closed

type dispatchState = d:predispatchState{
	d = Init \/ d = FirstHandshake \/ d = Finishing \/ d = Finished \/
	d = Open \/ d = Closing \/ d = Closed}

type (;ki:KeyInfo) dState = {
    disp: dispatchState;
    conn: (;ki)Record.ConnectionState;
    }

type index =
    { id_in:  KeyInfo;
      id_out: KeyInfo}

type (;id:index) globalState = {
  poptions: protocolOptions;
  (* abstract protocol states for HS/CCS, AL, and AD *)
  handshake: (;id.id_out.sinfo) Handshake.hs_state;
  alert    : (;id.id_out.sinfo) Alert.state;
  appdata  : (;id.id_out.sinfo) AppData.app_state;    

  (* connection state for reading and writing *)
  read  : (;id.id_in)  dState;
  write : (;id.id_out) dState;

  (* The actual socket *)
  ns: NetworkStream
  }

type Connection = id:index * (;id)globalState

type writeOutcome =
    | WriteAgain (* Possibly more data to send *)
    | Done (* No more data to send in the current state *)
    | MustRead (* Read until completion of Handshake *)

type deliverOutcome =
    | ReadAgain
    | AppDataDone
    | HSDone
    | Abort

val init: NetworkStream -> Direction -> protocolOptions -> Connection

val resume: NetworkStream -> sessionID -> protocolOptions -> unit Result * Connection

val ask_rehandshake: (id:index * (;id)globalState) -> protocolOptions -> (id':index * (;id')globalState){id'=id}
val ask_rekey:       (id:index * (;id)globalState) -> protocolOptions -> (id':index * (;id')globalState){id'=id}
val ask_hs_request:  (id:index * (;id)globalState) -> protocolOptions -> (id':index * (;id')globalState){id'=id}

val getSessionInfo: (id:index * (;id)globalState) -> si:SessionInfo{si=id.id_out.sinfo}

val moveToOpenState: id:index * (;id)globalState -> StorableSession -> (;id)globalState Result

val closeConnection: (id:index * (;id)globalState) -> (id':index * (;id')globalState){id'=id}

val send: ki:KeyInfo -> NetworkStream -> ss:(;ki)sendState -> tlen:int ->
	ct:ContentType -> f:(;ki,tlen,ct)TLSFragment.fragment ->
	ss':(;ki)sendState Result

val writeOne: (id:index * (;id)globalState) ->
	(writeOutcome Result) * ((id':index * (;id')globalState){id'=id})

val deliver: (id:index * (;id)globalState) -> ct:ContentType -> tlen:int ->
	(;id.id_out,ct,tlen)TLSFragment.fragment ->
	(deliverOutcome Result) * ((id':index * (;id')globalState){id'=id})

val recv: (id:index * (;id)globalState) ->
	((id:index * (;id)globalState) *
	  ct:ContentType * tlen:int * (;id.id_in,tlen,ct)TLSFragment.fragment) Result

val readOne: (id:index * (;id)globalState) ->
	deliverOutcome Result * ((id':index * (;id')globalState){id'=id})

val writeFromRead: (id:index * (;id)globalState) ->
	unit Result * ((id':index * (;id')globalState){id'=id})

type preReadInvocation =
    | StopAtHS
    | StopAtAppData

type readInvocation = r:preReadInvocation{
	r = StopAtHS \/ r = StopAtAppData}

val read: (id:index * (;id)globalState) -> readInvocation ->
	unit Result * ((id':index * (;id')globalState){id'=id})

val writeAppData: (id:index * (;id)globalState) ->
	unit Result * ((id':index * (;id')globalState){id'=id})

val commit: (id:index * (;id)globalState) ->
	(;id.id_out.sinfo)AppDataPlain.lengths ->
	(;id.id_out.sinfo)AppDataPlain.appdata ->
	(id':index * (;id')globalState){id'=id}

val readAppData: (id:index * (;id)globalState) ->
	(((;id.id_in.sinfo)AppDataPlain.appdata Result) *
		((id':index * (;id')globalState){id'=id}))

val readHS: (id:index * (;id)globalState) ->
	unit Result * ((id':index * (;id')globalState){id'=id})
