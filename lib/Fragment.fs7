module Fragment
open Bytes
open TLSInfo
open DataStream

predicate DeltaFragment of ki:epoch * s:(;ki) stream * r:range * (;ki,s,r)delta
private type (;ki:epoch,r:range) fragment = 
  {frag: (s:(;ki)stream * d:(;ki,s,r) delta{Auth(ki) => DeltaFragment(ki,s,r,d)})}

function val Extend: 'a * 'b * 'c * 'd -> 'e

predicate Fragment of ki:epoch * (;ki) stream * r:range * (;ki,r)fragment
private assume !ki,s,r,f. Fragment(ki,s,r,f) <=> 
  (?d. f.frag = (s,d) /\ DeltaFragment(ki,s,r,d))

// range-based fragmentation 

val fragment: ki:epoch -> s:(;ki) stream -> r:range ->
  (;ki,s,r) delta -> 
  (f:(;ki,r) fragment * s':(;ki) stream){Fragment(ki,s,r,f) /\ s' = Extend(ki,s,r,f)}

val delta: ki:epoch -> s:(;ki) stream -> r:range -> 
  f:(;ki,r) fragment{Auth(ki) => Fragment(ki,s,r,f)} -> 
  d:(;ki,s,r) delta * s':(;ki) stream{s' = Extend(ki,s,r,f)}

val delta': ki:epoch -> s:(;ki) stream -> r:range -> 
  f:(;ki,r) fragment{not Auth(ki)} -> 
  d:(;ki,s,r) delta * s':(;ki) stream{s' = ExtendStream(ki,s,r,d)}

val fragmentPlain: ki:epoch{not Auth(ki)} -> r:range -> (;r) rbytes -> (;ki,r) fragment
val fragmentRepr:  ki:epoch{not Safe(ki)} -> r:range -> (;ki,r) fragment -> (;r) rbytes

// Recall that our streams are lists of bytes; 
// due to empty bytes, the theorem below would not be valid with their concatenation.

private theorem !ki,s,r1,r2,f1,f2. 
  DeltaFragment(ki,s,r1,f1) /\ DeltaFragment(ki,s,r2,f2) => (r1 = r2 /\ f1 = f2)
private definition !ki,s,r,s',d. 
  Extend(ki,s,r,{frag = (s',d)}) = ExtendStream(ki,s,r,d)


 

