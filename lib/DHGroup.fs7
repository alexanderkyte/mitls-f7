module DHGroup

open Bytes
open DHDB
open CoreKeys
open TLSError

// Marks "Strong" parameter generation used by compliant servers,
// formally a precondition for signing them with an honest key.
predicate PP of dhparams

// For public parameters and exchanged values.
// We use an abstract predicate to ensure that elements 
// are bytes that have been correctly generated or checked,
// e.g. Elt(p,g,b) => Num(b) in [2..p-1) /\ order(b) = order(g)

predicate Elt of dhparams * bytes

type (;dhp:dhparams) elt = b:bytes{ Elt(dhp,b) } 

theorem !dhp. PP(dhp) => Elt(dhp,dhp.dhg)

private val goodPP_log: (dhparams list) ref
private val pp: dhp:dhparams ->
	dhp':dhparams {dhp=dhp' /\ PP(dhp)}
val goodPP: dhp:dhparams -> b:bool{b = true <=> PP(dhp)}

val genElement: dhp:dhparams -> (;dhp) elt
val checkParams: dhdb -> nat -> p:bytes -> g:bytes ->
	((dhdb * dhp:dhparams){PP(dhp) /\ dhp.dhp=p /\ dhp.dhg = g}) Result

val checkElement: dhp:dhparams{PP(dhp)} -> b:bytes -> (b':(;dhp) elt {b = b'}) option

val defaultDHparams: string -> dhdb -> nat -> ((dhdb * dhp:dhparams){PP(dhp)})