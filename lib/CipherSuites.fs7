module CipherSuites

open Bytes
open Algorithms
open Error

(*** Following RFC5246 A.5 *)

private type SCSVsuite =
    | TLS_EMPTY_RENEGOTIATION_INFO_SCSV

private type cipherSuite = // internal; kept abstract in the .fsi
    | NullCipherSuite
    | CipherSuite of kexAlg * authencAlg
    | OnlyMACCipherSuite of kexAlg * hashAlg
    | SCSV of SCSVsuite

type cipherSuites = cipherSuite list

type Compression =
    | NullCompression

function val CompressionBytes: Compression -> bytes
private assume CompressionBytes(NullCompression) = [| 0uy |]

val compressionBytes: c:Compression -> b:bytes{CompressionBytes(c) = b}
val parseCompression: b:bytes -> (c:Compression{b=CompressionBytes(c)}) Result
val parseCompressions: bytes -> Compression list

type ProtocolVersion =
    | SSL_3p0   
    | TLS_1p0   
    | TLS_1p1   
    | TLS_1p2   

//CF Bad name. We'll need VersionBytes to be injective; we can verify it in principle.
function val VersionBytes: ProtocolVersion -> b:bytes
assume !p. Length(VersionBytes(p)) = 2
private assume VersionBytes(SSL_3p0) = [| 3uy; 0uy |]
private assume VersionBytes(TLS_1p0) = [| 3uy; 1uy |]
private assume VersionBytes(TLS_1p1) = [| 3uy; 2uy |]
private assume VersionBytes(TLS_1p2) = [| 3uy; 3uy |]

val versionBytes: pv:ProtocolVersion -> b:bytes{Length(b) = 2 /\ b = VersionBytes(pv)}
val parseVersion: b:bytes{Length(b) = 2} -> (pv:ProtocolVersion{ b= VersionBytes(pv)}) Result
val minPV: a:ProtocolVersion -> b:ProtocolVersion -> c:ProtocolVersion
//CF what's this refinement?? adjust on demand
//  {(a < b /\ c = a) \/ (a >= b /\ c = b)}
val geqPV: a:ProtocolVersion -> b:ProtocolVersion -> r:bool
// AP same as minPV

(* FIXME: same duplication between logical and concrete function definitions, 
   already seen in Algorithms. 
   CF: we could save a bit by not making cipherSuite abstract for F7.
   *)
predicate val IsNullCiphersuite: cipherSuite -> bool
assume !x. IsNullCiphersuite(x) <=> x = NullCipherSuite
val nullCipherSuite: c:cipherSuite{IsNullCiphersuite(c)}
val isNullCipherSuite: c:cipherSuite -> r:bool{r=true => IsNullCiphersuite(c)}

predicate val IsOnlyMACCiphersuite: cipherSuite -> bool
assume !x. (IsOnlyMACCiphersuite(x) <=> ?z,t. x = OnlyMACCipherSuite(z,t))
val isOnlyMACCipherSuite: c:cipherSuite -> r:bool{r=true => IsOnlyMACCiphersuite(c)}

predicate val IsSCSVCiphersuite: cipherSuite -> bool
assume !x. IsSCSVCiphersuite(x) <=> ?z. x = SCSV(z)

predicate val IsAEADCiphersuite: cipherSuite -> bool
assume !x. IsAEADCiphersuite(x) <=> ?z,t. x = CipherSuite(z,t)
val isAEADCipherSuite: c:cipherSuite -> r:bool{r=true => IsAEADCiphersuite(c)}

assume !x. IsAEADCiphersuite(x) => not IsOnlyMACCiphersuite(x)
assume !x. IsAEADCiphersuite(x) => not IsNullCiphersuite(x)

(* TODO: predicates similar to the ones above, to be done when handling handshake *)
val isAnonCipherSuite: cipherSuite -> bool
val cipherSuiteRequiresKeyExchange: cipherSuite -> bool
val canEncryptPMS: cipherSuite -> bool
val contains_TLS_EMPTY_RENEGOTIATION_INFO_SCSV: cipherSuites -> bool
val verifyDataLen_of_ciphersuite: cipherSuite -> int
val prfHashAlg_of_ciphersuite: cipherSuite  -> hashAlg
val verifyDataHashAlg_of_ciphersuite: cs:cipherSuite -> hashAlg

function val CipherSuiteMACAlg: cipherSuite -> hashAlg
function val CipherSuiteENCAlg: cipherSuite -> cipherAlg

private assume !kex,enc,mac.
	CipherSuiteMACAlg(CipherSuite(kex,MtE(enc,mac))) = mac
private assume !enc,mac.
	CipherSuiteMACAlg(OnlyMACCipherSuite(enc,mac)) = mac
private assume !kex,enc,mac.
	CipherSuiteENCAlg(CipherSuite(kex,MtE(enc,mac))) = enc
val macAlg_of_ciphersuite: cs:cipherSuite -> h:hashAlg{h = CipherSuiteMACAlg(cs)}
val encAlg_of_ciphersuite: cs:cipherSuite -> c:cipherAlg{c = CipherSuiteENCAlg(cs)}

function val AEAlg: cipherSuite -> authencAlg
private assume !kex,a. AEAlg(CipherSuite(kex,a)) = a

predicate KnownCipherSuite of cipherSuite 
function val CipherSuiteBytes: cipherSuite -> bytes 


private assume !cs. KnownCipherSuite(cs) <=>
       (cs = NullCipherSuite)                                     
    \/ (cs = OnlyMACCipherSuite (RSA, MD5))                       
    \/ (cs = OnlyMACCipherSuite (RSA, SHA))                       
    \/ (cs = OnlyMACCipherSuite (RSA, SHA256))                    
    \/ (cs = CipherSuite (RSA, MtE (RC4_128, MD5)))            
    \/ (cs = CipherSuite (RSA, MtE (RC4_128, SHA)))            
    \/ (cs = CipherSuite (RSA, MtE (TDES_EDE_CBC, SHA)))       
    \/ (cs = CipherSuite (RSA, MtE (AES_128_CBC, SHA)))        
    \/ (cs = CipherSuite (RSA, MtE (AES_256_CBC, SHA)))        
    \/ (cs = CipherSuite (RSA, MtE (AES_128_CBC, SHA256)))     
    \/ (cs = CipherSuite (RSA, MtE (AES_256_CBC, SHA256)))     

    \/ (cs = CipherSuite (DH_DSS,  MtE (TDES_EDE_CBC, SHA)))   
    \/ (cs = CipherSuite (DH_RSA,  MtE (TDES_EDE_CBC, SHA)))   
    \/ (cs = CipherSuite (DHE_DSS, MtE (TDES_EDE_CBC, SHA)))   
    \/ (cs = CipherSuite (DHE_RSA, MtE (TDES_EDE_CBC, SHA)))   
    \/ (cs = CipherSuite (DH_DSS,  MtE (AES_128_CBC, SHA)))    
    \/ (cs = CipherSuite (DH_RSA,  MtE (AES_128_CBC, SHA)))    
    \/ (cs = CipherSuite (DHE_DSS, MtE (AES_128_CBC, SHA)))    
    \/ (cs = CipherSuite (DHE_RSA, MtE (AES_128_CBC, SHA)))    
    \/ (cs = CipherSuite (DH_DSS,  MtE (AES_256_CBC, SHA)))    
    \/ (cs = CipherSuite (DH_RSA,  MtE (AES_256_CBC, SHA)))    
    \/ (cs = CipherSuite (DHE_DSS, MtE (AES_256_CBC, SHA)))    
    \/ (cs = CipherSuite (DHE_RSA, MtE (AES_256_CBC, SHA)))    
    \/ (cs = CipherSuite (DH_DSS,  MtE (AES_128_CBC, SHA256))) 
    \/ (cs = CipherSuite (DH_RSA,  MtE (AES_128_CBC, SHA256))) 
    \/ (cs = CipherSuite (DHE_DSS, MtE (AES_128_CBC, SHA256))) 
    \/ (cs = CipherSuite (DHE_RSA, MtE (AES_128_CBC, SHA256))) 
    \/ (cs = CipherSuite (DH_DSS,  MtE (AES_256_CBC, SHA256))) 
    \/ (cs = CipherSuite (DH_RSA,  MtE (AES_256_CBC, SHA256))) 
    \/ (cs = CipherSuite (DHE_DSS, MtE (AES_256_CBC, SHA256))) 
    \/ (cs = CipherSuite (DHE_RSA, MtE (AES_256_CBC, SHA256))) 

    \/ (cs = CipherSuite (DH_anon, MtE (RC4_128, MD5)))        
    \/ (cs = CipherSuite (DH_anon, MtE (TDES_EDE_CBC, SHA)))   
    \/ (cs = CipherSuite (DH_anon, MtE (AES_128_CBC, SHA)))    
    \/ (cs = CipherSuite (DH_anon, MtE (AES_256_CBC, SHA)))    
    \/ (cs = CipherSuite (DH_anon, MtE (AES_128_CBC, SHA256))) 
    \/ (cs = CipherSuite (DH_anon, MtE (AES_256_CBC, SHA256))) 

    \/ (cs = SCSV (TLS_EMPTY_RENEGOTIATION_INFO_SCSV))            

private assume 
       CipherSuiteBytes(NullCipherSuite)                                     = [| 0x00uy; 0x00uy |]
    /\ CipherSuiteBytes(OnlyMACCipherSuite (RSA, MD5))                       = [| 0x00uy; 0x01uy |]
    /\ CipherSuiteBytes(OnlyMACCipherSuite (RSA, SHA))                       = [| 0x00uy; 0x02uy |]
    /\ CipherSuiteBytes(OnlyMACCipherSuite (RSA, SHA256))                    = [| 0x00uy; 0x3Buy |]
    /\ CipherSuiteBytes(CipherSuite (RSA, MtE (RC4_128, MD5)))            = [| 0x00uy; 0x04uy |]
    /\ CipherSuiteBytes(CipherSuite (RSA, MtE (RC4_128, SHA)))            = [| 0x00uy; 0x05uy |]
    /\ CipherSuiteBytes(CipherSuite (RSA, MtE (TDES_EDE_CBC, SHA)))       = [| 0x00uy; 0x0Auy |]
    /\ CipherSuiteBytes(CipherSuite (RSA, MtE (AES_128_CBC, SHA)))        = [| 0x00uy; 0x2Fuy |]
    /\ CipherSuiteBytes(CipherSuite (RSA, MtE (AES_256_CBC, SHA)))        = [| 0x00uy; 0x35uy |]
    /\ CipherSuiteBytes(CipherSuite (RSA, MtE (AES_128_CBC, SHA256)))     = [| 0x00uy; 0x3Cuy |]
    /\ CipherSuiteBytes(CipherSuite (RSA, MtE (AES_256_CBC, SHA256)))     = [| 0x00uy; 0x3Duy |]

    /\ CipherSuiteBytes(CipherSuite (DH_DSS,  MtE (TDES_EDE_CBC, SHA)))   = [| 0x00uy; 0x0Duy |]
    /\ CipherSuiteBytes(CipherSuite (DH_RSA,  MtE (TDES_EDE_CBC, SHA)))   = [| 0x00uy; 0x10uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_DSS, MtE (TDES_EDE_CBC, SHA)))   = [| 0x00uy; 0x13uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_RSA, MtE (TDES_EDE_CBC, SHA)))   = [| 0x00uy; 0x16uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_DSS,  MtE (AES_128_CBC, SHA)))    = [| 0x00uy; 0x30uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_RSA,  MtE (AES_128_CBC, SHA)))    = [| 0x00uy; 0x31uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_DSS, MtE (AES_128_CBC, SHA)))    = [| 0x00uy; 0x32uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_RSA, MtE (AES_128_CBC, SHA)))    = [| 0x00uy; 0x33uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_DSS,  MtE (AES_256_CBC, SHA)))    = [| 0x00uy; 0x36uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_RSA,  MtE (AES_256_CBC, SHA)))    = [| 0x00uy; 0x37uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_DSS, MtE (AES_256_CBC, SHA)))    = [| 0x00uy; 0x38uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_RSA, MtE (AES_256_CBC, SHA)))    = [| 0x00uy; 0x39uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_DSS,  MtE (AES_128_CBC, SHA256))) = [| 0x00uy; 0x3Euy |]
    /\ CipherSuiteBytes(CipherSuite (DH_RSA,  MtE (AES_128_CBC, SHA256))) = [| 0x00uy; 0x3Fuy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_DSS, MtE (AES_128_CBC, SHA256))) = [| 0x00uy; 0x40uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_RSA, MtE (AES_128_CBC, SHA256))) = [| 0x00uy; 0x67uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_DSS,  MtE (AES_256_CBC, SHA256))) = [| 0x00uy; 0x68uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_RSA,  MtE (AES_256_CBC, SHA256))) = [| 0x00uy; 0x69uy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_DSS, MtE (AES_256_CBC, SHA256))) = [| 0x00uy; 0x6Auy |]
    /\ CipherSuiteBytes(CipherSuite (DHE_RSA, MtE (AES_256_CBC, SHA256))) = [| 0x00uy; 0x6Buy |]

    /\ CipherSuiteBytes(CipherSuite (DH_anon, MtE (RC4_128, MD5)))        = [| 0x00uy; 0x18uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_anon, MtE (TDES_EDE_CBC, SHA)))   = [| 0x00uy; 0x1Buy |]
    /\ CipherSuiteBytes(CipherSuite (DH_anon, MtE (AES_128_CBC, SHA)))    = [| 0x00uy; 0x34uy |]
    /\ CipherSuiteBytes(CipherSuite (DH_anon, MtE (AES_256_CBC, SHA)))    = [| 0x00uy; 0x3Auy |]
    /\ CipherSuiteBytes(CipherSuite (DH_anon, MtE (AES_128_CBC, SHA256))) = [| 0x00uy; 0x6Cuy |]
    /\ CipherSuiteBytes(CipherSuite (DH_anon, MtE (AES_256_CBC, SHA256))) = [| 0x00uy; 0x6Duy |]

    /\ CipherSuiteBytes(SCSV (TLS_EMPTY_RENEGOTIATION_INFO_SCSV))            = [| 0x00uy; 0xFFuy |]


predicate ContainsCipherSuite of bytes * cipherSuite
private assume !b,cs. ContainsCipherSuite(b,cs) <=> 
                (?b1,b2. b = b1 @| b2 /\ Length(b1) = 2 /\
		         (b1 = CipherSuiteBytes(cs) \/ ContainsCipherSuite(b2,cs)))

predicate ContainsCipherSuites of bytes * cipherSuites
private assume !b,l. ContainsCipherSuites(b,l) <=>
  (l = [] \/
   (?h,t. l = h::t /\ ContainsCipherSuite(b,h) /\ ContainsCipherSuites(b,t)))

ask !b1,b2,cs. (Length(b1) = 2 /\ ContainsCipherSuite(b2,cs)) => ContainsCipherSuite(b1 @| b2, cs)

//requires induction
assume !b1,b2,l. (Length(b1) = 2 /\ ContainsCipherSuites(b2,l)) => ContainsCipherSuites(b1 @| b2, l)


private val consCipherSuites: cs:cipherSuite -> css:cipherSuites -> css':cipherSuites{css' = cs::css}

val cipherSuiteBytes: c:cipherSuite -> b:bytes{Length(b)=2 /\ b = CipherSuiteBytes(c)}
val cipherSuite_of_bytes: b:bytes{Length(b)=2} -> (c:cipherSuite{b = CipherSuiteBytes(c)}) Result

// this parsing function may fail if b has the wrong length,
// or if we were strict on unknown ciphersuites
val parseCipherSuites: b:bytes -> (css:cipherSuites {ContainsCipherSuites(b,css)}) Result
val bytes_of_cipherSuites: css:cipherSuites -> b:bytes {ContainsCipherSuites(b,css)}

val maxPadSize: ProtocolVersion -> cipherSuite -> nat

val mkIntTriple: (int * int * int) -> (int * int * int)
val getKeyExtensionLength: ProtocolVersion -> cipherSuite -> int

val PVRequiresExplicitIV: ProtocolVersion -> bool

(* Not for verification, just to run the implementation *)

type cipherSuiteName =
    | TLS_NULL_WITH_NULL_NULL            

    | TLS_RSA_WITH_NULL_MD5              
    | TLS_RSA_WITH_NULL_SHA              
    | TLS_RSA_WITH_NULL_SHA256           
    | TLS_RSA_WITH_RC4_128_MD5           
    | TLS_RSA_WITH_RC4_128_SHA           
    | TLS_RSA_WITH_3DES_EDE_CBC_SHA      
    | TLS_RSA_WITH_AES_128_CBC_SHA       
    | TLS_RSA_WITH_AES_256_CBC_SHA       
    | TLS_RSA_WITH_AES_128_CBC_SHA256    
    | TLS_RSA_WITH_AES_256_CBC_SHA256 
       
    | TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA   
    | TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA   
    | TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA  
    | TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA  
    | TLS_DH_DSS_WITH_AES_128_CBC_SHA    
    | TLS_DH_RSA_WITH_AES_128_CBC_SHA    
    | TLS_DHE_DSS_WITH_AES_128_CBC_SHA   
    | TLS_DHE_RSA_WITH_AES_128_CBC_SHA      
    | TLS_DH_DSS_WITH_AES_256_CBC_SHA    
    | TLS_DH_RSA_WITH_AES_256_CBC_SHA    
    | TLS_DHE_DSS_WITH_AES_256_CBC_SHA   
    | TLS_DHE_RSA_WITH_AES_256_CBC_SHA    
    | TLS_DH_DSS_WITH_AES_128_CBC_SHA256 
    | TLS_DH_RSA_WITH_AES_128_CBC_SHA256 
    | TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
    | TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
    | TLS_DH_DSS_WITH_AES_256_CBC_SHA256 
    | TLS_DH_RSA_WITH_AES_256_CBC_SHA256 
    | TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
    | TLS_DHE_RSA_WITH_AES_256_CBC_SHA256

    | TLS_DH_anon_WITH_RC4_128_MD5       
    | TLS_DH_anon_WITH_3DES_EDE_CBC_SHA  
    | TLS_DH_anon_WITH_AES_128_CBC_SHA
    | TLS_DH_anon_WITH_AES_256_CBC_SHA  
    | TLS_DH_anon_WITH_AES_128_CBC_SHA256
    | TLS_DH_anon_WITH_AES_256_CBC_SHA256

val cipherSuites_of_nameList: cipherSuiteName list -> cipherSuites

