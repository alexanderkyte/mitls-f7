module MAC

open Bytes
open Algorithms
open TLSInfo

/// a refined, ideal interface for indexed MACs
/// this file is loosely synchronized with cma/mac2.fs7

(*predicate val CMA: id -> bool*)
type text = bytes
predicate val Msg: KeyInfo * text -> bool
type mac = bytes

private type (;ki:KeyInfo) key = {k:bytes}

val MAC:    ki:KeyInfo -> k:(;ki) key -> t:text{Msg(ki,t)} -> mac
val VERIFY: ki:KeyInfo -> k:(;ki) key -> t:text -> mac -> 
  v:bool{ (v=true (*/\ CMA(id)*) ) => Msg(ki,t) }

val GEN: ki:KeyInfo -> (;ki) key
val LEAK:   ki:KeyInfo{!t. Msg(ki,t)} -> (;ki)key -> bytes
val COERCE: ki:KeyInfo{!t. Msg(ki,t)} -> bytes -> (;ki)key

val reIndex: oldKI:KeyInfo{NullSessionInfo(oldKI.sinfo)} -> newKI:KeyInfo{NullSessionInfo(newKI.sinfo)} -> (;oldKI)key -> (;newKI)key
