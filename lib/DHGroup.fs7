module DHGroup

(* Idealized module *) 

open Bytes

type p = bytes // DH modulus, actually a bignum
//MK we should also keep track of the sub-group order q.



// for public parameters and exchange values;
// we use an abstract predicate to ensure that elements 
// are bytes that have been correctly generated or checked,
// e.g. Num(elt) in 2..p-1 

predicate type preds = Elt of bytes * bytes
type (;p:p) elt = b:bytes{ Elt(p,b) } 
 
type (;p:p) g = (;p) elt  // for the group generator

// marks "Strong" parameter generation used by compliant servers,
// formally a precondition for signing them with an honest key.
predicate type predPP = PP of p:p * g:(;p) g

val dhparams: p:p -> (;p)g -> CoreKeys.dhparams
val genElement: p:p -> g:(;p)g -> (;p)elt

//MK should take g, and ultimately also q as input.
val checkElement: p:p -> b:bytes -> (b':(;p)elt{b=b'}) option