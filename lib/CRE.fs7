module CRE

open Bytes
open TLSConstants
open TLSInfo
open DHGroup

type rsarepr = (;48)lbytes

private val prfMS: si:SessionInfo -> p:bytes -> (;si) PRF.masterSecret

//#begin-abstractionRSA

private type rsaseed = {seed:rsarepr} // treated abstractly almost everywhere in this file
type (;pk:RSAKey.pk, pv:ProtocolVersion) rsapms = 
   | IdealRSAPMS    of rsaseed 
   | ConcreteRSAPMS of rsarepr

predicate CREHonestRSAPMS of pk:RSAKey.pk * pv:ProtocolVersion * (;pk,pv)rsapms

private definition !pk,pv,pms. CREHonestRSAPMS(pk,pv,pms) <=> ?s. pms = IdealRSAPMS(s)

val honestRSAPMS: pk:RSAKey.pk -> pv:ProtocolVersion -> pms: (;pk,pv) rsapms -> b:bool { b=true <=> CREHonestRSAPMS(pk,pv,pms) } 

val genRSA: pk:RSAKey.pk -> pv:ProtocolVersion -> pms:(;pk,pv)rsapms
val coerceRSA: pk:RSAKey.pk -> pv:ProtocolVersion (* MK suspicious {not SafeRSAPMS(pk,pv)} *)-> b:bytes {Length(b)=48} -> (;pk,pv)rsapms
val leakRSA: pk:RSAKey.pk -> pv:ProtocolVersion -> pms:(;pk,pv)rsapms {not CREHonestRSAPMS(pk,pv,pms)}-> bytes

//#end-abstractionRSA

// MK val rsaassoc pk:RSAKey.pk * pv:ProtocolVersion * pms:(;pk,pv)rsapms -> ((pk:RSAKey.pk * pv:ProtocolVersion * pms:(;pk,pv)rsapms) * PRF.masterSecret) list -> PRF.masterSecret

val rsaassoc: (pk:RSAKey.pk * pv:ProtocolVersion * (;pk,pv)rsapms * bytes) -> ((pk':RSAKey.pk * pv':ProtocolVersion * (;pk',pv')rsapms * bytes) * 'b) list -> 'b option

val prfSmoothRSA:
    si:SessionInfo ->
	pv:ProtocolVersion ->
    pms: (;Cert.RSAPKCert(si.serverID),pv) rsapms ->
    (;si) PRF.masterSecret


//#begin-abstractionDH

type dhrepr = bytes

private type dhseed = {seed:dhrepr} // treated abstractly almost everywhere in this file
private type (;p:p, g:(;p) g, gx:(;p) elt, gy:(;p) elt) dhpms =   
   | IdealDHPMS    of dhseed 
   | ConcreteDHPMS of dhrepr

predicate CREHonestDHPMS of p:p * g:(;p) g * gx:(;p) elt * gy:(;p) elt * (;p,g,gx,gy) dhpms

private definition !p,g,gx,gy,pms. CREHonestDHPMS(p,g,gx,gy,pms) <=> ?s. pms = IdealDHPMS(s)

val honestDHPMS: p:p -> g:(;p)g -> gx:(;p)elt -> gy:(;p)elt -> pms: (;p,g,gx,gy) dhpms -> b:bool { b=true <=> CREHonestDHPMS(p,g,gx,gy,pms) } 

val sampleDH:   p:p -> g:(;p)g -> gx:(;p)elt -> gy:(;p)elt ->  (;p,g,gx,gy) dhpms
val coerceDH:   p:p -> g:(;p)g -> gx:(;p)elt -> gy:(;p)elt {not SafeDHPMS(p,g,gx,gy)}-> (;p)elt -> (;p,g,gx,gy) dhpms
//#end-abstractionDH

val dhassoc: p:p * g:(;p) g * gx:(;p) elt * gy:(;p) elt * (;p,g,gx,gy) dhpms * bytes -> ((p:p * g:(;p) g * gx:(;p) elt * gy:(;p) elt * (;p,g,gx,gy) dhpms * bytes) * 'b) list -> 'b option

// AP: Don't we really want *any* link between si and (g,p,gx,gy)?
val prfSmoothDHE:
    si:SessionInfo ->
    p:DHGroup.p -> g:(;p)DHGroup.g -> gx:(;p)DHGroup.elt -> gy:(;p)DHGroup.elt ->
    pms: (;p,g,gx,gy)dhpms ->
    (;si) PRF.masterSecret


